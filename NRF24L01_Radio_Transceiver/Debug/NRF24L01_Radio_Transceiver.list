
NRF24L01_Radio_Transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004058  08004058  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  080040d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080040d0  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c8d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b99  00000000  00000000  00029d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017747  00000000  00000000  0002cb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008349  00000000  00000000  000442bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008490b  00000000  00000000  0004c608  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000d0f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a9c 	.word	0x08003a9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a9c 	.word	0x08003a9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d008      	beq.n	800017c <NRF24_csn+0x20>
 800016a:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_csn+0x38>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <NRF24_csn+0x3c>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2201      	movs	r2, #1
 8000174:	4619      	mov	r1, r3
 8000176:	f001 fcf3 	bl	8001b60 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800017a:	e007      	b.n	800018c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <NRF24_csn+0x38>)
 800017e:	6818      	ldr	r0, [r3, #0]
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <NRF24_csn+0x3c>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	2200      	movs	r2, #0
 8000186:	4619      	mov	r1, r3
 8000188:	f001 fcea 	bl	8001b60 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000090 	.word	0x20000090
 8000198:	20000094 	.word	0x20000094

0800019c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_ce+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_ce+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_ce+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f001 fcd3 	bl	8001b60 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_ce+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_ce+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f001 fcca 	bl	8001b60 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000090 	.word	0x20000090
 80001d8:	20000096 	.word	0x20000096

080001dc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f7ff ffb8 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80001f6:	f107 010c 	add.w	r1, r7, #12
 80001fa:	2364      	movs	r3, #100	; 0x64
 80001fc:	2201      	movs	r2, #1
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <NRF24_read_register+0x4c>)
 8000200:	f002 f966 	bl	80024d0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	1c59      	adds	r1, r3, #1
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	2201      	movs	r2, #1
 800020e:	4806      	ldr	r0, [pc, #24]	; (8000228 <NRF24_read_register+0x4c>)
 8000210:	f002 fa9a 	bl	8002748 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000214:	7b7b      	ldrb	r3, [r7, #13]
 8000216:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f7ff ff9f 	bl	800015c <NRF24_csn>
	return retData;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000098 	.word	0x20000098

0800022c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800023c:	2000      	movs	r0, #0
 800023e:	f7ff ff8d 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 031f 	and.w	r3, r3, #31
 8000248:	b2db      	uxtb	r3, r3
 800024a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800024c:	f107 010c 	add.w	r1, r7, #12
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000256:	f002 f93b 	bl	80024d0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	b29a      	uxth	r2, r3
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	6839      	ldr	r1, [r7, #0]
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000264:	f002 fa70 	bl	8002748 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f7ff ff77 	bl	800015c <NRF24_csn>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000098 	.word	0x20000098

0800027c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ff65 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	b2db      	uxtb	r3, r3
 800029a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002a0:	f107 010c 	add.w	r1, r7, #12
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2202      	movs	r2, #2
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <NRF24_write_register+0x40>)
 80002aa:	f002 f911 	bl	80024d0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ff54 	bl	800015c <NRF24_csn>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000098 	.word	0x20000098

080002c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f7ff ff43 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2201      	movs	r2, #1
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <NRF24_write_registerN+0x4c>)
 80002ea:	f002 f8f1 	bl	80024d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <NRF24_write_registerN+0x4c>)
 80002f8:	f002 f8ea 	bl	80024d0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff2d 	bl	800015c <NRF24_csn>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000098 	.word	0x20000098

08000310 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000314:	21ff      	movs	r1, #255	; 0xff
 8000316:	20e1      	movs	r0, #225	; 0xe1
 8000318:	f7ff ffb0 	bl	800027c <NRF24_write_register>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	20e2      	movs	r0, #226	; 0xe2
 8000328:	f7ff ffa8 	bl	800027c <NRF24_write_register>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000330:	b082      	sub	sp, #8
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	61fb      	str	r3, [r7, #28]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
 8000340:	4613      	mov	r3, r2
 8000342:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000344:	4b66      	ldr	r3, [pc, #408]	; (80004e0 <NRF24_begin+0x1b0>)
 8000346:	4618      	mov	r0, r3
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	2258      	movs	r2, #88	; 0x58
 800034e:	4619      	mov	r1, r3
 8000350:	f002 ff88 	bl	8003264 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000354:	4a63      	ldr	r2, [pc, #396]	; (80004e4 <NRF24_begin+0x1b4>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <NRF24_begin+0x1b8>)
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000360:	4a62      	ldr	r2, [pc, #392]	; (80004ec <NRF24_begin+0x1bc>)
 8000362:	883b      	ldrh	r3, [r7, #0]
 8000364:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff fef8 	bl	800015c <NRF24_csn>
	NRF24_ce(0);
 800036c:	2000      	movs	r0, #0
 800036e:	f7ff ff15 	bl	800019c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000372:	2005      	movs	r0, #5
 8000374:	f001 f994 	bl	80016a0 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000378:	2108      	movs	r1, #8
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff7e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000380:	213f      	movs	r1, #63	; 0x3f
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff7a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000388:	2103      	movs	r1, #3
 800038a:	2002      	movs	r0, #2
 800038c:	f7ff ff76 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000390:	2103      	movs	r1, #3
 8000392:	2003      	movs	r0, #3
 8000394:	f7ff ff72 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000398:	2103      	movs	r1, #3
 800039a:	2004      	movs	r0, #4
 800039c:	f7ff ff6e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80003a0:	2102      	movs	r1, #2
 80003a2:	2005      	movs	r0, #5
 80003a4:	f7ff ff6a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80003a8:	210f      	movs	r1, #15
 80003aa:	2006      	movs	r0, #6
 80003ac:	f7ff ff66 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80003b0:	210e      	movs	r1, #14
 80003b2:	2007      	movs	r0, #7
 80003b4:	f7ff ff62 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2008      	movs	r0, #8
 80003bc:	f7ff ff5e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80003c0:	2100      	movs	r1, #0
 80003c2:	2009      	movs	r0, #9
 80003c4:	f7ff ff5a 	bl	800027c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80003c8:	23e7      	movs	r3, #231	; 0xe7
 80003ca:	733b      	strb	r3, [r7, #12]
 80003cc:	23e7      	movs	r3, #231	; 0xe7
 80003ce:	72fb      	strb	r3, [r7, #11]
 80003d0:	23e7      	movs	r3, #231	; 0xe7
 80003d2:	72bb      	strb	r3, [r7, #10]
 80003d4:	23e7      	movs	r3, #231	; 0xe7
 80003d6:	727b      	strb	r3, [r7, #9]
 80003d8:	23e7      	movs	r3, #231	; 0xe7
 80003da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2205      	movs	r2, #5
 80003e2:	4619      	mov	r1, r3
 80003e4:	200a      	movs	r0, #10
 80003e6:	f7ff ff6b 	bl	80002c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80003ea:	23c2      	movs	r3, #194	; 0xc2
 80003ec:	733b      	strb	r3, [r7, #12]
 80003ee:	23c2      	movs	r3, #194	; 0xc2
 80003f0:	72fb      	strb	r3, [r7, #11]
 80003f2:	23c2      	movs	r3, #194	; 0xc2
 80003f4:	72bb      	strb	r3, [r7, #10]
 80003f6:	23c2      	movs	r3, #194	; 0xc2
 80003f8:	727b      	strb	r3, [r7, #9]
 80003fa:	23c2      	movs	r3, #194	; 0xc2
 80003fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	2205      	movs	r2, #5
 8000404:	4619      	mov	r1, r3
 8000406:	200b      	movs	r0, #11
 8000408:	f7ff ff5a 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800040c:	21c3      	movs	r1, #195	; 0xc3
 800040e:	200c      	movs	r0, #12
 8000410:	f7ff ff34 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000414:	21c4      	movs	r1, #196	; 0xc4
 8000416:	200d      	movs	r0, #13
 8000418:	f7ff ff30 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800041c:	21c5      	movs	r1, #197	; 0xc5
 800041e:	200e      	movs	r0, #14
 8000420:	f7ff ff2c 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000424:	21c6      	movs	r1, #198	; 0xc6
 8000426:	200f      	movs	r0, #15
 8000428:	f7ff ff28 	bl	800027c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800042c:	23e7      	movs	r3, #231	; 0xe7
 800042e:	733b      	strb	r3, [r7, #12]
 8000430:	23e7      	movs	r3, #231	; 0xe7
 8000432:	72fb      	strb	r3, [r7, #11]
 8000434:	23e7      	movs	r3, #231	; 0xe7
 8000436:	72bb      	strb	r3, [r7, #10]
 8000438:	23e7      	movs	r3, #231	; 0xe7
 800043a:	727b      	strb	r3, [r7, #9]
 800043c:	23e7      	movs	r3, #231	; 0xe7
 800043e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	2205      	movs	r2, #5
 8000446:	4619      	mov	r1, r3
 8000448:	2010      	movs	r0, #16
 800044a:	f7ff ff39 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800044e:	2100      	movs	r1, #0
 8000450:	2011      	movs	r0, #17
 8000452:	f7ff ff13 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000456:	2100      	movs	r1, #0
 8000458:	2012      	movs	r0, #18
 800045a:	f7ff ff0f 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800045e:	2100      	movs	r1, #0
 8000460:	2013      	movs	r0, #19
 8000462:	f7ff ff0b 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000466:	2100      	movs	r1, #0
 8000468:	2014      	movs	r0, #20
 800046a:	f7ff ff07 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2015      	movs	r0, #21
 8000472:	f7ff ff03 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	2016      	movs	r0, #22
 800047a:	f7ff feff 	bl	800027c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800047e:	f000 f955 	bl	800072c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	201c      	movs	r0, #28
 8000486:	f7ff fef9 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	201d      	movs	r0, #29
 800048e:	f7ff fef5 	bl	800027c <NRF24_write_register>
	printRadioSettings();
 8000492:	f000 f965 	bl	8000760 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000496:	210f      	movs	r1, #15
 8000498:	200f      	movs	r0, #15
 800049a:	f000 f829 	bl	80004f0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800049e:	2003      	movs	r0, #3
 80004a0:	f000 f884 	bl	80005ac <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 f8bb 	bl	8000620 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f8fe 	bl	80006ac <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80004b0:	f000 f864 	bl	800057c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80004b4:	2020      	movs	r0, #32
 80004b6:	f000 f84b 	bl	8000550 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80004ba:	f000 f92e 	bl	800071a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80004be:	204c      	movs	r0, #76	; 0x4c
 80004c0:	f000 f831 	bl	8000526 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80004c4:	f7ff ff24 	bl	8000310 <NRF24_flush_tx>
	NRF24_flush_rx();
 80004c8:	f7ff ff2a 	bl	8000320 <NRF24_flush_rx>

	NRF24_powerDown();
 80004cc:	f000 f916 	bl	80006fc <NRF24_powerDown>

}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004da:	b002      	add	sp, #8
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000098 	.word	0x20000098
 80004e4:	20000090 	.word	0x20000090
 80004e8:	20000094 	.word	0x20000094
 80004ec:	20000096 	.word	0x20000096

080004f0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	b25a      	sxtb	r2, r3
 8000506:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	b25b      	sxtb	r3, r3
 8000510:	4313      	orrs	r3, r2
 8000512:	b25b      	sxtb	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	2004      	movs	r0, #4
 800051a:	f7ff feaf 	bl	800027c <NRF24_write_register>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000530:	237f      	movs	r3, #127	; 0x7f
 8000532:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4293      	cmp	r3, r2
 800053a:	bf28      	it	cs
 800053c:	4613      	movcs	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2005      	movs	r0, #5
 8000544:	f7ff fe9a 	bl	800027c <NRF24_write_register>
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800055a:	2320      	movs	r3, #32
 800055c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4293      	cmp	r3, r2
 8000564:	bf28      	it	cs
 8000566:	4613      	movcs	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <NRF24_setPayloadSize+0x28>)
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	2000008c 	.word	0x2000008c

0800057c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000580:	201d      	movs	r0, #29
 8000582:	f7ff fe2b 	bl	80001dc <NRF24_read_register>
 8000586:	4603      	mov	r3, r0
 8000588:	f023 0304 	bic.w	r3, r3, #4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	201d      	movs	r0, #29
 8000592:	f7ff fe73 	bl	800027c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000596:	2100      	movs	r1, #0
 8000598:	201c      	movs	r0, #28
 800059a:	f7ff fe6f 	bl	800027c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800059e:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <NRF24_disableDynamicPayloads+0x2c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000008d 	.word	0x2000008d

080005ac <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80005b6:	2006      	movs	r0, #6
 80005b8:	f7ff fe10 	bl	80001dc <NRF24_read_register>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f023 0306 	bic.w	r3, r3, #6
 80005c6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d104      	bne.n	80005d8 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0306 	orr.w	r3, r3, #6
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	e019      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d104      	bne.n	80005e8 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e011      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d104      	bne.n	80005f8 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e009      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d103      	bne.n	800060c <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 0306 	orr.w	r3, r3, #6
 800060a:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4619      	mov	r1, r3
 8000610:	2006      	movs	r0, #6
 8000612:	f7ff fe33 	bl	800027c <NRF24_write_register>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800062e:	2006      	movs	r0, #6
 8000630:	f7ff fdd4 	bl	80001dc <NRF24_read_register>
 8000634:	4603      	mov	r3, r0
 8000636:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <NRF24_setDataRate+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000644:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d107      	bne.n	800065c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <NRF24_setDataRate+0x88>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	73bb      	strb	r3, [r7, #14]
 800065a:	e00d      	b.n	8000678 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d107      	bne.n	8000672 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <NRF24_setDataRate+0x88>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	73bb      	strb	r3, [r7, #14]
 8000670:	e002      	b.n	8000678 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <NRF24_setDataRate+0x88>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	4619      	mov	r1, r3
 800067c:	2006      	movs	r0, #6
 800067e:	f7ff fdfd 	bl	800027c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff fdaa 	bl	80001dc <NRF24_read_register>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	4293      	cmp	r3, r2
 8000690:	d102      	bne.n	8000698 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000692:	2301      	movs	r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e002      	b.n	800069e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <NRF24_setDataRate+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000008e 	.word	0x2000008e

080006ac <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff fd90 	bl	80001dc <NRF24_read_register>
 80006bc:	4603      	mov	r3, r0
 80006be:	f023 030c 	bic.w	r3, r3, #12
 80006c2:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00f      	beq.n	80006ea <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d104      	bne.n	80006da <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e007      	b.n	80006ea <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdc4 	bl	800027c <NRF24_write_register>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fd6b 	bl	80001dc <NRF24_read_register>
 8000706:	4603      	mov	r3, r0
 8000708:	f023 0302 	bic.w	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fdb3 	bl	800027c <NRF24_write_register>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800071e:	2170      	movs	r1, #112	; 0x70
 8000720:	2007      	movs	r0, #7
 8000722:	f7ff fdab 	bl	800027c <NRF24_write_register>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fd12 	bl	800015c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800073c:	2373      	movs	r3, #115	; 0x73
 800073e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2202      	movs	r2, #2
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <NRF24_ACTIVATE_cmd+0x30>)
 8000748:	f001 fec2 	bl	80024d0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff fd05 	bl	800015c <NRF24_csn>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000098 	.word	0x20000098

08000760 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	b0a1      	sub	sp, #132	; 0x84
 8000764:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4ab6      	ldr	r2, [pc, #728]	; (8000a44 <printRadioSettings+0x2e4>)
 800076c:	461c      	mov	r4, r3
 800076e:	4615      	mov	r5, r2
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077c:	682b      	ldr	r3, [r5, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	8022      	strh	r2, [r4, #0]
 8000782:	3402      	adds	r4, #2
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fcdd 	bl	800014c <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	230a      	movs	r3, #10
 800079c:	48aa      	ldr	r0, [pc, #680]	; (8000a48 <printRadioSettings+0x2e8>)
 800079e:	f002 fbcc 	bl	8002f3a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fd1a 	bl	80001dc <NRF24_read_register>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80007ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d020      	beq.n	80007fc <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80007ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <printRadioSettings+0x7e>
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4aa0      	ldr	r2, [pc, #640]	; (8000a4c <printRadioSettings+0x2ec>)
 80007cc:	461c      	mov	r4, r3
 80007ce:	4615      	mov	r5, r2
 80007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007dc:	e017      	b.n	800080e <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4a9b      	ldr	r2, [pc, #620]	; (8000a50 <printRadioSettings+0x2f0>)
 80007e4:	461c      	mov	r4, r3
 80007e6:	4615      	mov	r5, r2
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f0:	c403      	stmia	r4!, {r0, r1}
 80007f2:	8022      	strh	r2, [r4, #0]
 80007f4:	3402      	adds	r4, #2
 80007f6:	0c13      	lsrs	r3, r2, #16
 80007f8:	7023      	strb	r3, [r4, #0]
 80007fa:	e008      	b.n	800080e <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4a94      	ldr	r2, [pc, #592]	; (8000a54 <printRadioSettings+0x2f4>)
 8000802:	461c      	mov	r4, r3
 8000804:	4615      	mov	r5, r2
 8000806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080a:	682b      	ldr	r3, [r5, #0]
 800080c:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fc9a 	bl	800014c <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f107 0108 	add.w	r1, r7, #8
 8000820:	230a      	movs	r3, #10
 8000822:	4889      	ldr	r0, [pc, #548]	; (8000a48 <printRadioSettings+0x2e8>)
 8000824:	f002 fb89 	bl	8002f3a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fcd7 	bl	80001dc <NRF24_read_register>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000834:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000838:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800083c:	2b00      	cmp	r3, #0
 800083e:	bfcc      	ite	gt
 8000840:	2301      	movgt	r3, #1
 8000842:	2300      	movle	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000848:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800084c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000850:	2b00      	cmp	r3, #0
 8000852:	bfcc      	ite	gt
 8000854:	2301      	movgt	r3, #1
 8000856:	2300      	movle	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800085c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000860:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000864:	2b00      	cmp	r3, #0
 8000866:	bfcc      	ite	gt
 8000868:	2301      	movgt	r3, #1
 800086a:	2300      	movle	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000870:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000874:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000878:	2b00      	cmp	r3, #0
 800087a:	bfcc      	ite	gt
 800087c:	2301      	movgt	r3, #1
 800087e:	2300      	movle	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000884:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000888:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800088c:	2b00      	cmp	r3, #0
 800088e:	bfcc      	ite	gt
 8000890:	2301      	movgt	r3, #1
 8000892:	2300      	movle	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000898:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800089c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bfcc      	ite	gt
 80008a4:	2301      	movgt	r3, #1
 80008a6:	2300      	movle	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f107 0008 	add.w	r0, r7, #8
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	9402      	str	r4, [sp, #8]
 80008b2:	9101      	str	r1, [sp, #4]
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	4633      	mov	r3, r6
 80008b8:	462a      	mov	r2, r5
 80008ba:	4967      	ldr	r1, [pc, #412]	; (8000a58 <printRadioSettings+0x2f8>)
 80008bc:	f002 fce6 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fc41 	bl	800014c <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f107 0108 	add.w	r1, r7, #8
 80008d2:	230a      	movs	r3, #10
 80008d4:	485c      	ldr	r0, [pc, #368]	; (8000a48 <printRadioSettings+0x2e8>)
 80008d6:	f002 fb30 	bl	8002f3a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fc7e 	bl	80001dc <NRF24_read_register>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008ea:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bfcc      	ite	gt
 80008f2:	2301      	movgt	r3, #1
 80008f4:	2300      	movle	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008fe:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfcc      	ite	gt
 8000906:	2301      	movgt	r3, #1
 8000908:	2300      	movle	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800090e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000912:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000916:	2b00      	cmp	r3, #0
 8000918:	bfcc      	ite	gt
 800091a:	2301      	movgt	r3, #1
 800091c:	2300      	movle	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000922:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000926:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800092a:	2b00      	cmp	r3, #0
 800092c:	bfcc      	ite	gt
 800092e:	2301      	movgt	r3, #1
 8000930:	2300      	movle	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000936:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800093a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800093e:	2b00      	cmp	r3, #0
 8000940:	bfcc      	ite	gt
 8000942:	2301      	movgt	r3, #1
 8000944:	2300      	movle	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800094a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800094e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000952:	2b00      	cmp	r3, #0
 8000954:	bfcc      	ite	gt
 8000956:	2301      	movgt	r3, #1
 8000958:	2300      	movle	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f107 0008 	add.w	r0, r7, #8
 8000960:	9303      	str	r3, [sp, #12]
 8000962:	9402      	str	r4, [sp, #8]
 8000964:	9101      	str	r1, [sp, #4]
 8000966:	9200      	str	r2, [sp, #0]
 8000968:	4633      	mov	r3, r6
 800096a:	462a      	mov	r2, r5
 800096c:	493b      	ldr	r1, [pc, #236]	; (8000a5c <printRadioSettings+0x2fc>)
 800096e:	f002 fc8d 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fbe8 	bl	800014c <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	f107 0108 	add.w	r1, r7, #8
 8000984:	230a      	movs	r3, #10
 8000986:	4830      	ldr	r0, [pc, #192]	; (8000a48 <printRadioSettings+0x2e8>)
 8000988:	f002 fad7 	bl	8002f3a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff fc25 	bl	80001dc <NRF24_read_register>
 8000992:	4603      	mov	r3, r0
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800099c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009a0:	3302      	adds	r3, #2
 80009a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80009a6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	492c      	ldr	r1, [pc, #176]	; (8000a60 <printRadioSettings+0x300>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fc6b 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fbc6 	bl	800014c <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	230a      	movs	r3, #10
 80009ca:	481f      	ldr	r0, [pc, #124]	; (8000a48 <printRadioSettings+0x2e8>)
 80009cc:	f002 fab5 	bl	8002f3a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80009d0:	2005      	movs	r0, #5
 80009d2:	f7ff fc03 	bl	80001dc <NRF24_read_register>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80009dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	491e      	ldr	r1, [pc, #120]	; (8000a64 <printRadioSettings+0x304>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fc4e 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fba9 	bl	800014c <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	230a      	movs	r3, #10
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <printRadioSettings+0x2e8>)
 8000a06:	f002 fa98 	bl	8002f3a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff fbe6 	bl	80001dc <NRF24_read_register>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000a16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d024      	beq.n	8000a6c <printRadioSettings+0x30c>
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <printRadioSettings+0x308>)
 8000a28:	461c      	mov	r4, r3
 8000a2a:	4615      	mov	r5, r2
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a34:	6020      	str	r0, [r4, #0]
 8000a36:	3404      	adds	r4, #4
 8000a38:	8021      	strh	r1, [r4, #0]
 8000a3a:	3402      	adds	r4, #2
 8000a3c:	0c0b      	lsrs	r3, r1, #16
 8000a3e:	7023      	strb	r3, [r4, #0]
 8000a40:	e023      	b.n	8000a8a <printRadioSettings+0x32a>
 8000a42:	bf00      	nop
 8000a44:	08003ab4 	.word	0x08003ab4
 8000a48:	200000f0 	.word	0x200000f0
 8000a4c:	08003ae8 	.word	0x08003ae8
 8000a50:	08003b04 	.word	0x08003b04
 8000a54:	08003b20 	.word	0x08003b20
 8000a58:	08003b34 	.word	0x08003b34
 8000a5c:	08003b78 	.word	0x08003b78
 8000a60:	08003bc4 	.word	0x08003bc4
 8000a64:	08003be0 	.word	0x08003be0
 8000a68:	08003bf4 	.word	0x08003bf4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <printRadioSettings+0x3b8>)
 8000a72:	461c      	mov	r4, r3
 8000a74:	4615      	mov	r5, r2
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a7e:	6020      	str	r0, [r4, #0]
 8000a80:	3404      	adds	r4, #4
 8000a82:	8021      	strh	r1, [r4, #0]
 8000a84:	3402      	adds	r4, #2
 8000a86:	0c0b      	lsrs	r3, r1, #16
 8000a88:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f107 0108 	add.w	r1, r7, #8
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	481f      	ldr	r0, [pc, #124]	; (8000b1c <printRadioSettings+0x3bc>)
 8000aa0:	f002 fa4b 	bl	8002f3a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000aa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aa8:	f003 0306 	and.w	r3, r3, #6
 8000aac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000aba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d109      	bne.n	8000ad6 <printRadioSettings+0x376>
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <printRadioSettings+0x3c0>)
 8000ac8:	461c      	mov	r4, r3
 8000aca:	4615      	mov	r5, r2
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	6023      	str	r3, [r4, #0]
 8000ad4:	e037      	b.n	8000b46 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000ad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d109      	bne.n	8000af2 <printRadioSettings+0x392>
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <printRadioSettings+0x3c4>)
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4615      	mov	r5, r2
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	6023      	str	r3, [r4, #0]
 8000af0:	e029      	b.n	8000b46 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000af2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d118      	bne.n	8000b2c <printRadioSettings+0x3cc>
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <printRadioSettings+0x3c8>)
 8000b00:	461c      	mov	r4, r3
 8000b02:	4615      	mov	r5, r2
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	8022      	strh	r2, [r4, #0]
 8000b0e:	3402      	adds	r4, #2
 8000b10:	0c1b      	lsrs	r3, r3, #16
 8000b12:	7023      	strb	r3, [r4, #0]
 8000b14:	e017      	b.n	8000b46 <printRadioSettings+0x3e6>
 8000b16:	bf00      	nop
 8000b18:	08003c0c 	.word	0x08003c0c
 8000b1c:	200000f0 	.word	0x200000f0
 8000b20:	08003c24 	.word	0x08003c24
 8000b24:	08003c38 	.word	0x08003c38
 8000b28:	08003c4c 	.word	0x08003c4c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d108      	bne.n	8000b46 <printRadioSettings+0x3e6>
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4ad7      	ldr	r2, [pc, #860]	; (8000e98 <printRadioSettings+0x738>)
 8000b3a:	461c      	mov	r4, r3
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fafe 	bl	800014c <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	f107 0108 	add.w	r1, r7, #8
 8000b58:	230a      	movs	r3, #10
 8000b5a:	48d0      	ldr	r0, [pc, #832]	; (8000e9c <printRadioSettings+0x73c>)
 8000b5c:	f002 f9ed 	bl	8002f3a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000b60:	463b      	mov	r3, r7
 8000b62:	2205      	movs	r2, #5
 8000b64:	4619      	mov	r1, r3
 8000b66:	200a      	movs	r0, #10
 8000b68:	f7ff fb60 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000b6c:	793b      	ldrb	r3, [r7, #4]
 8000b6e:	461c      	mov	r4, r3
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	461d      	mov	r5, r3
 8000b74:	78bb      	ldrb	r3, [r7, #2]
 8000b76:	787a      	ldrb	r2, [r7, #1]
 8000b78:	7839      	ldrb	r1, [r7, #0]
 8000b7a:	f107 0008 	add.w	r0, r7, #8
 8000b7e:	9102      	str	r1, [sp, #8]
 8000b80:	9201      	str	r2, [sp, #4]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	462b      	mov	r3, r5
 8000b86:	4622      	mov	r2, r4
 8000b88:	49c5      	ldr	r1, [pc, #788]	; (8000ea0 <printRadioSettings+0x740>)
 8000b8a:	f002 fb7f 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fada 	bl	800014c <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	48be      	ldr	r0, [pc, #760]	; (8000e9c <printRadioSettings+0x73c>)
 8000ba4:	f002 f9c9 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2205      	movs	r2, #5
 8000bac:	4619      	mov	r1, r3
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f7ff fb3c 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000bb4:	793b      	ldrb	r3, [r7, #4]
 8000bb6:	461c      	mov	r4, r3
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	461d      	mov	r5, r3
 8000bbc:	78bb      	ldrb	r3, [r7, #2]
 8000bbe:	787a      	ldrb	r2, [r7, #1]
 8000bc0:	7839      	ldrb	r1, [r7, #0]
 8000bc2:	f107 0008 	add.w	r0, r7, #8
 8000bc6:	9102      	str	r1, [sp, #8]
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	462b      	mov	r3, r5
 8000bce:	4622      	mov	r2, r4
 8000bd0:	49b4      	ldr	r1, [pc, #720]	; (8000ea4 <printRadioSettings+0x744>)
 8000bd2:	f002 fb5b 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fab6 	bl	800014c <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f107 0108 	add.w	r1, r7, #8
 8000be8:	230a      	movs	r3, #10
 8000bea:	48ac      	ldr	r0, [pc, #688]	; (8000e9c <printRadioSettings+0x73c>)
 8000bec:	f002 f9a5 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	200c      	movs	r0, #12
 8000bf8:	f7ff fb18 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000bfc:	783b      	ldrb	r3, [r7, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	49a8      	ldr	r1, [pc, #672]	; (8000ea8 <printRadioSettings+0x748>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fb40 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fa9b 	bl	800014c <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f107 0108 	add.w	r1, r7, #8
 8000c1e:	230a      	movs	r3, #10
 8000c20:	489e      	ldr	r0, [pc, #632]	; (8000e9c <printRadioSettings+0x73c>)
 8000c22:	f002 f98a 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000c26:	463b      	mov	r3, r7
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	200d      	movs	r0, #13
 8000c2e:	f7ff fafd 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000c32:	783b      	ldrb	r3, [r7, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	499c      	ldr	r1, [pc, #624]	; (8000eac <printRadioSettings+0x74c>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fb25 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fa80 	bl	800014c <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f107 0108 	add.w	r1, r7, #8
 8000c54:	230a      	movs	r3, #10
 8000c56:	4891      	ldr	r0, [pc, #580]	; (8000e9c <printRadioSettings+0x73c>)
 8000c58:	f002 f96f 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	200e      	movs	r0, #14
 8000c64:	f7ff fae2 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000c68:	783b      	ldrb	r3, [r7, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	498f      	ldr	r1, [pc, #572]	; (8000eb0 <printRadioSettings+0x750>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fb0a 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fa65 	bl	800014c <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	f107 0108 	add.w	r1, r7, #8
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	4883      	ldr	r0, [pc, #524]	; (8000e9c <printRadioSettings+0x73c>)
 8000c8e:	f002 f954 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000c92:	463b      	mov	r3, r7
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	200f      	movs	r0, #15
 8000c9a:	f7ff fac7 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000c9e:	783b      	ldrb	r3, [r7, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4983      	ldr	r1, [pc, #524]	; (8000eb4 <printRadioSettings+0x754>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 faef 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fa4a 	bl	800014c <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f107 0108 	add.w	r1, r7, #8
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	4876      	ldr	r0, [pc, #472]	; (8000e9c <printRadioSettings+0x73c>)
 8000cc4:	f002 f939 	bl	8002f3a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2205      	movs	r2, #5
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2010      	movs	r0, #16
 8000cd0:	f7ff faac 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	461c      	mov	r4, r3
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	461d      	mov	r5, r3
 8000cdc:	78bb      	ldrb	r3, [r7, #2]
 8000cde:	787a      	ldrb	r2, [r7, #1]
 8000ce0:	7839      	ldrb	r1, [r7, #0]
 8000ce2:	f107 0008 	add.w	r0, r7, #8
 8000ce6:	9102      	str	r1, [sp, #8]
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	462b      	mov	r3, r5
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4971      	ldr	r1, [pc, #452]	; (8000eb8 <printRadioSettings+0x758>)
 8000cf2:	f002 facb 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa26 	bl	800014c <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f107 0108 	add.w	r1, r7, #8
 8000d08:	230a      	movs	r3, #10
 8000d0a:	4864      	ldr	r0, [pc, #400]	; (8000e9c <printRadioSettings+0x73c>)
 8000d0c:	f002 f915 	bl	8002f3a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8000d10:	2011      	movs	r0, #17
 8000d12:	f7ff fa63 	bl	80001dc <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4964      	ldr	r1, [pc, #400]	; (8000ebc <printRadioSettings+0x75c>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 faae 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa09 	bl	800014c <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f107 0108 	add.w	r1, r7, #8
 8000d42:	230a      	movs	r3, #10
 8000d44:	4855      	ldr	r0, [pc, #340]	; (8000e9c <printRadioSettings+0x73c>)
 8000d46:	f002 f8f8 	bl	8002f3a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8000d4a:	2012      	movs	r0, #18
 8000d4c:	f7ff fa46 	bl	80001dc <NRF24_read_register>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4957      	ldr	r1, [pc, #348]	; (8000ec0 <printRadioSettings+0x760>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fa91 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff f9ec 	bl	800014c <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f107 0108 	add.w	r1, r7, #8
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	4847      	ldr	r0, [pc, #284]	; (8000e9c <printRadioSettings+0x73c>)
 8000d80:	f002 f8db 	bl	8002f3a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8000d84:	2013      	movs	r0, #19
 8000d86:	f7ff fa29 	bl	80001dc <NRF24_read_register>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4949      	ldr	r1, [pc, #292]	; (8000ec4 <printRadioSettings+0x764>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fa74 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff f9cf 	bl	800014c <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f107 0108 	add.w	r1, r7, #8
 8000db6:	230a      	movs	r3, #10
 8000db8:	4838      	ldr	r0, [pc, #224]	; (8000e9c <printRadioSettings+0x73c>)
 8000dba:	f002 f8be 	bl	8002f3a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f7ff fa0c 	bl	80001dc <NRF24_read_register>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000dca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	493c      	ldr	r1, [pc, #240]	; (8000ec8 <printRadioSettings+0x768>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fa57 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9b2 	bl	800014c <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f107 0108 	add.w	r1, r7, #8
 8000df0:	230a      	movs	r3, #10
 8000df2:	482a      	ldr	r0, [pc, #168]	; (8000e9c <printRadioSettings+0x73c>)
 8000df4:	f002 f8a1 	bl	8002f3a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8000df8:	2015      	movs	r0, #21
 8000dfa:	f7ff f9ef 	bl	80001dc <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	492e      	ldr	r1, [pc, #184]	; (8000ecc <printRadioSettings+0x76c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fa3a 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f995 	bl	800014c <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	f107 0108 	add.w	r1, r7, #8
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	481b      	ldr	r0, [pc, #108]	; (8000e9c <printRadioSettings+0x73c>)
 8000e2e:	f002 f884 	bl	8002f3a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8000e32:	2016      	movs	r0, #22
 8000e34:	f7ff f9d2 	bl	80001dc <NRF24_read_register>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4921      	ldr	r1, [pc, #132]	; (8000ed0 <printRadioSettings+0x770>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fa1d 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff f978 	bl	800014c <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f107 0108 	add.w	r1, r7, #8
 8000e64:	230a      	movs	r3, #10
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <printRadioSettings+0x73c>)
 8000e68:	f002 f867 	bl	8002f3a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f7ff f9b5 	bl	80001dc <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e7c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bfcc      	ite	gt
 8000e84:	2301      	movgt	r3, #1
 8000e86:	2300      	movle	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	e01e      	b.n	8000ed4 <printRadioSettings+0x774>
 8000e96:	bf00      	nop
 8000e98:	08003c60 	.word	0x08003c60
 8000e9c:	200000f0 	.word	0x200000f0
 8000ea0:	08003c74 	.word	0x08003c74
 8000ea4:	08003ca4 	.word	0x08003ca4
 8000ea8:	08003cd4 	.word	0x08003cd4
 8000eac:	08003cfc 	.word	0x08003cfc
 8000eb0:	08003d24 	.word	0x08003d24
 8000eb4:	08003d4c 	.word	0x08003d4c
 8000eb8:	08003d74 	.word	0x08003d74
 8000ebc:	08003da0 	.word	0x08003da0
 8000ec0:	08003dbc 	.word	0x08003dbc
 8000ec4:	08003dd8 	.word	0x08003dd8
 8000ec8:	08003df4 	.word	0x08003df4
 8000ecc:	08003e10 	.word	0x08003e10
 8000ed0:	08003e2c 	.word	0x08003e2c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bfcc      	ite	gt
 8000ed8:	2301      	movgt	r3, #1
 8000eda:	2300      	movle	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ee0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bfcc      	ite	gt
 8000eec:	2301      	movgt	r3, #1
 8000eee:	2300      	movle	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ef4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bfcc      	ite	gt
 8000f00:	2301      	movgt	r3, #1
 8000f02:	2300      	movle	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f0c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bfcc      	ite	gt
 8000f14:	2301      	movgt	r3, #1
 8000f16:	2300      	movle	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f20:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bfcc      	ite	gt
 8000f28:	2301      	movgt	r3, #1
 8000f2a:	2300      	movle	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f107 0008 	add.w	r0, r7, #8
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	9402      	str	r4, [sp, #8]
 8000f36:	9101      	str	r1, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	4633      	mov	r3, r6
 8000f3c:	462a      	mov	r2, r5
 8000f3e:	494a      	ldr	r1, [pc, #296]	; (8001068 <printRadioSettings+0x908>)
 8000f40:	f002 f9a4 	bl	800328c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f8ff 	bl	800014c <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	f107 0108 	add.w	r1, r7, #8
 8000f56:	230a      	movs	r3, #10
 8000f58:	4844      	ldr	r0, [pc, #272]	; (800106c <printRadioSettings+0x90c>)
 8000f5a:	f001 ffee 	bl	8002f3a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8000f5e:	201d      	movs	r0, #29
 8000f60:	f7ff f93c 	bl	80001dc <NRF24_read_register>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8000f6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <printRadioSettings+0x830>
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <printRadioSettings+0x910>)
 8000f7c:	461c      	mov	r4, r3
 8000f7e:	4615      	mov	r5, r2
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f88:	6020      	str	r0, [r4, #0]
 8000f8a:	3404      	adds	r4, #4
 8000f8c:	8021      	strh	r1, [r4, #0]
 8000f8e:	e00e      	b.n	8000fae <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4a37      	ldr	r2, [pc, #220]	; (8001074 <printRadioSettings+0x914>)
 8000f96:	461c      	mov	r4, r3
 8000f98:	4615      	mov	r5, r2
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa2:	6020      	str	r0, [r4, #0]
 8000fa4:	3404      	adds	r4, #4
 8000fa6:	8021      	strh	r1, [r4, #0]
 8000fa8:	3402      	adds	r4, #2
 8000faa:	0c0b      	lsrs	r3, r1, #16
 8000fac:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff f8ca 	bl	800014c <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f107 0108 	add.w	r1, r7, #8
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	482a      	ldr	r0, [pc, #168]	; (800106c <printRadioSettings+0x90c>)
 8000fc4:	f001 ffb9 	bl	8002f3a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8000fc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00b      	beq.n	8000fec <printRadioSettings+0x88c>
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <printRadioSettings+0x918>)
 8000fda:	461c      	mov	r4, r3
 8000fdc:	4615      	mov	r5, r2
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe6:	c403      	stmia	r4!, {r0, r1}
 8000fe8:	8022      	strh	r2, [r4, #0]
 8000fea:	e00d      	b.n	8001008 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <printRadioSettings+0x91c>)
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffe:	c403      	stmia	r4!, {r0, r1}
 8001000:	8022      	strh	r2, [r4, #0]
 8001002:	3402      	adds	r4, #2
 8001004:	0c13      	lsrs	r3, r2, #16
 8001006:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f89d 	bl	800014c <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f107 0108 	add.w	r1, r7, #8
 800101a:	230a      	movs	r3, #10
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <printRadioSettings+0x90c>)
 800101e:	f001 ff8c 	bl	8002f3a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <printRadioSettings+0x920>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	8022      	strh	r2, [r4, #0]
 800103e:	3402      	adds	r4, #2
 8001040:	0c1b      	lsrs	r3, r3, #16
 8001042:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f87f 	bl	800014c <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f107 0108 	add.w	r1, r7, #8
 8001056:	230a      	movs	r3, #10
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <printRadioSettings+0x90c>)
 800105a:	f001 ff6e 	bl	8002f3a <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3774      	adds	r7, #116	; 0x74
 8001062:	46bd      	mov	sp, r7
 8001064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001066:	bf00      	nop
 8001068:	08003e48 	.word	0x08003e48
 800106c:	200000f0 	.word	0x200000f0
 8001070:	08003e94 	.word	0x08003e94
 8001074:	08003eac 	.word	0x08003eac
 8001078:	08003ec4 	.word	0x08003ec4
 800107c:	08003ee0 	.word	0x08003ee0
 8001080:	08003ab4 	.word	0x08003ab4

08001084 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001084:	b084      	sub	sp, #16
 8001086:	b4b0      	push	{r4, r5, r7}
 8001088:	af00      	add	r7, sp, #0
 800108a:	f107 040c 	add.w	r4, r7, #12
 800108e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <nrf24_DebugUART_Init+0x34>)
 8001094:	461c      	mov	r4, r3
 8001096:	f107 050c 	add.w	r5, r7, #12
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bcb0      	pop	{r4, r5, r7}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr
 80010b8:	200000f0 	.word	0x200000f0

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <MX_GPIO_Init+0xc0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <MX_GPIO_Init+0xc0>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <MX_GPIO_Init+0xc0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_GPIO_Init+0xc0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a23      	ldr	r2, [pc, #140]	; (800117c <MX_GPIO_Init+0xc0>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_GPIO_Init+0xc0>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_GPIO_Init+0xc0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <MX_GPIO_Init+0xc0>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_GPIO_Init+0xc0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_GPIO_Init+0xc0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <MX_GPIO_Init+0xc0>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_GPIO_Init+0xc0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001136:	4812      	ldr	r0, [pc, #72]	; (8001180 <MX_GPIO_Init+0xc4>)
 8001138:	f000 fd12 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_GPIO_Init+0xc8>)
 8001152:	f000 fbab 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2302      	movs	r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0xc4>)
 8001170:	f000 fb9c 	bl	80018ac <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40011000 	.word	0x40011000

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	b097      	sub	sp, #92	; 0x5c
 800118c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fa25 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f82f 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f7ff ff91 	bl	80010bc <MX_GPIO_Init>
  MX_SPI1_Init();
 800119a:	f000 f877 	bl	800128c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800119e:	f000 f983 	bl	80014a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	NRF24_begin(GPIOB, CSN_Pin, CE_Pin, hspi1);
 80011a2:	4c11      	ldr	r4, [pc, #68]	; (80011e8 <main+0x60>)
 80011a4:	4668      	mov	r0, sp
 80011a6:	1d23      	adds	r3, r4, #4
 80011a8:	2254      	movs	r2, #84	; 0x54
 80011aa:	4619      	mov	r1, r3
 80011ac:	f002 f85a 	bl	8003264 <memcpy>
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <main+0x64>)
 80011bc:	f7ff f8b8 	bl	8000330 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 80011c0:	4e0b      	ldr	r6, [pc, #44]	; (80011f0 <main+0x68>)
 80011c2:	466d      	mov	r5, sp
 80011c4:	f106 0410 	add.w	r4, r6, #16
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011dc:	f7ff ff52 	bl	8001084 <nrf24_DebugUART_Init>

	printRadioSettings();
 80011e0:	f7ff fabe 	bl	8000760 <printRadioSettings>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80011e4:	e7fe      	b.n	80011e4 <main+0x5c>
 80011e6:	bf00      	nop
 80011e8:	2000013c 	.word	0x2000013c
 80011ec:	40010c00 	.word	0x40010c00
 80011f0:	20000194 	.word	0x20000194

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f002 f839 	bl	800327a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001232:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fca7 	bl	8001b90 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001248:	f000 f819 	bl	800127e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2102      	movs	r1, #2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 ff12 	bl	8002090 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001272:	f000 f804 	bl	800127e <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3740      	adds	r7, #64	; 0x40
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_SPI1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c0:	2220      	movs	r2, #32
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d8:	220a      	movs	r2, #10
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012de:	f001 f873 	bl	80023c8 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f7ff ffc9 	bl	800127e <Error_Handler>
  }

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000013c 	.word	0x2000013c
 80012f4:	40013000 	.word	0x40013000

080012f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d12f      	bne.n	8001378 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800131e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001348:	23a0      	movs	r3, #160	; 0xa0
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_SPI_MspInit+0x90>)
 800135c:	f000 faa6 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_SPI_MspInit+0x90>)
 8001374:	f000 fa9a 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013000 	.word	0x40013000
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_MspInit+0x5c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_MspInit+0x5c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_MspInit+0x60>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_MspInit+0x60>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <HardFault_Handler+0x4>

08001402 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <BusFault_Handler+0x4>

0800140e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f914 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x16>
		heap_end = &end;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <_sbrk+0x50>)
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <_sbrk+0x54>)
 8001458:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <_sbrk+0x50>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <_sbrk+0x50>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	466a      	mov	r2, sp
 800146a:	4293      	cmp	r3, r2
 800146c:	d907      	bls.n	800147e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800146e:	f001 fecf 	bl	8003210 <__errno>
 8001472:	4602      	mov	r2, r0
 8001474:	230c      	movs	r3, #12
 8001476:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147c:	e006      	b.n	800148c <_sbrk+0x48>
	}

	heap_end += incr;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <_sbrk+0x50>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a03      	ldr	r2, [pc, #12]	; (8001494 <_sbrk+0x50>)
 8001488:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000130 	.word	0x20000130
 8001498:	200001e0 	.word	0x200001e0

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f001 fcde 	bl	8002ea0 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f7ff fec8 	bl	800127e <Error_Handler>
  }

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000194 	.word	0x20000194
 80014f8:	40004400 	.word	0x40004400

080014fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12f      	bne.n	800157c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_UART_MspInit+0x8c>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_MspInit+0x8c>)
 8001522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001526:	61d3      	str	r3, [r2, #28]
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x8c>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_UART_MspInit+0x8c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_UART_MspInit+0x8c>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0x8c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154c:	2304      	movs	r3, #4
 800154e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	; (800158c <HAL_UART_MspInit+0x90>)
 8001560:	f000 f9a4 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001564:	2308      	movs	r3, #8
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0x90>)
 8001578:	f000 f998 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40004400 	.word	0x40004400
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800

08001590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001592:	e003      	b.n	800159c <LoopCopyDataInit>

08001594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800159a:	3104      	adds	r1, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015a4:	d3f6      	bcc.n	8001594 <CopyDataInit>
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015a8:	e002      	b.n	80015b0 <LoopFillZerobss>

080015aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015ac:	f842 3b04 	str.w	r3, [r2], #4

080015b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015b4:	d3f9      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b6:	f7ff ff71 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f001 fe2f 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff fde3 	bl	8001188 <main>
  bx lr
 80015c2:	4770      	bx	lr
  ldr r3, =_sidata
 80015c4:	08004060 	.word	0x08004060
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015cc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80015d0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80015d4:	200001dc 	.word	0x200001dc

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x28>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f929 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fec8 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f933 	bl	8001892 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001644:	f000 f909 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000008 	.word	0x20000008
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000008 	.word	0x20000008
 8001688:	200001d4 	.word	0x200001d4

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200001d4 	.word	0x200001d4

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff fff0 	bl	800168c <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_Delay+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffe0 	bl	800168c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001824:	f7ff ff90 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff49 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5e 	bl	800172c <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff90 	bl	800179c <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5f 	bl	8001748 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b08b      	sub	sp, #44	; 0x2c
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e127      	b.n	8001b10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c0:	2201      	movs	r2, #1
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8116 	bne.w	8001b0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d034      	beq.n	8001950 <HAL_GPIO_Init+0xa4>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d80d      	bhi.n	8001906 <HAL_GPIO_Init+0x5a>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x9a>
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d804      	bhi.n	80018fc <HAL_GPIO_Init+0x50>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d031      	beq.n	800195a <HAL_GPIO_Init+0xae>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d01c      	beq.n	8001934 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e048      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d043      	beq.n	8001988 <HAL_GPIO_Init+0xdc>
 8001900:	2b11      	cmp	r3, #17
 8001902:	d01b      	beq.n	800193c <HAL_GPIO_Init+0x90>
          break;
 8001904:	e043      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001906:	4a89      	ldr	r2, [pc, #548]	; (8001b2c <HAL_GPIO_Init+0x280>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d026      	beq.n	800195a <HAL_GPIO_Init+0xae>
 800190c:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_GPIO_Init+0x280>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d806      	bhi.n	8001920 <HAL_GPIO_Init+0x74>
 8001912:	4a87      	ldr	r2, [pc, #540]	; (8001b30 <HAL_GPIO_Init+0x284>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d020      	beq.n	800195a <HAL_GPIO_Init+0xae>
 8001918:	4a86      	ldr	r2, [pc, #536]	; (8001b34 <HAL_GPIO_Init+0x288>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_GPIO_Init+0xae>
          break;
 800191e:	e036      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001920:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <HAL_GPIO_Init+0x28c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0xae>
 8001926:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <HAL_GPIO_Init+0x290>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d016      	beq.n	800195a <HAL_GPIO_Init+0xae>
 800192c:	4a84      	ldr	r2, [pc, #528]	; (8001b40 <HAL_GPIO_Init+0x294>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0xae>
          break;
 8001932:	e02c      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e028      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e023      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3308      	adds	r3, #8
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e01e      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	330c      	adds	r3, #12
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e019      	b.n	800198e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001962:	2304      	movs	r3, #4
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e012      	b.n	800198e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	611a      	str	r2, [r3, #16]
          break;
 800197a:	e008      	b.n	800198e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	615a      	str	r2, [r3, #20]
          break;
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	d801      	bhi.n	8001998 <HAL_GPIO_Init+0xec>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	e001      	b.n	800199c <HAL_GPIO_Init+0xf0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d802      	bhi.n	80019aa <HAL_GPIO_Init+0xfe>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x104>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3b08      	subs	r3, #8
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	210f      	movs	r1, #15
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	6a39      	ldr	r1, [r7, #32]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	431a      	orrs	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8096 	beq.w	8001b0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f6:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_GPIO_Init+0x29c>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x19e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2a4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x19a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_GPIO_Init+0x2a8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x196>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <HAL_GPIO_Init+0x2ac>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x192>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5c:	493a      	ldr	r1, [pc, #232]	; (8001b48 <HAL_GPIO_Init+0x29c>)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4938      	ldr	r1, [pc, #224]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4933      	ldr	r1, [pc, #204]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	492e      	ldr	r1, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4929      	ldr	r1, [pc, #164]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	4924      	ldr	r1, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	491f      	ldr	r1, [pc, #124]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	491a      	ldr	r1, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4915      	ldr	r1, [pc, #84]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f aed0 	bne.w	80018c0 <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	372c      	adds	r7, #44	; 0x2c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10220000 	.word	0x10220000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e26c      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8087 	beq.w	8001cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4b92      	ldr	r3, [pc, #584]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	4b8f      	ldr	r3, [pc, #572]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b89      	ldr	r3, [pc, #548]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x12c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d168      	bne.n	8001cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e246      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x76>
 8001bf8:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7f      	ldr	r2, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e02e      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b7b      	ldr	r3, [pc, #492]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7a      	ldr	r2, [pc, #488]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a77      	ldr	r2, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xbc>
 8001c32:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a71      	ldr	r2, [pc, #452]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	4b6b      	ldr	r3, [pc, #428]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a67      	ldr	r2, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fd0e 	bl	800168c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fd0a 	bl	800168c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1fa      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe4>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fcfa 	bl	800168c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fcf6 	bl	800168c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1e6      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x10c>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1ba      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4939      	ldr	r1, [pc, #228]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e03a      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fcaf 	bl	800168c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fcab 	bl	800168c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e19b      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4927      	ldr	r1, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc8e 	bl	800168c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff fc8a 	bl	800168c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e17a      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03a      	beq.n	8001e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fc6e 	bl	800168c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc6a 	bl	800168c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e15a      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f000 fada 	bl	800238c <RCC_Delay>
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fc54 	bl	800168c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de6:	e00f      	b.n	8001e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fc50 	bl	800168c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d908      	bls.n	8001e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e140      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	42420000 	.word	0x42420000
 8001e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e9      	bne.n	8001de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a6 	beq.w	8001f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b97      	ldr	r3, [pc, #604]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10d      	bne.n	8001e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b94      	ldr	r3, [pc, #592]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a93      	ldr	r2, [pc, #588]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b91      	ldr	r3, [pc, #580]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a8a      	ldr	r2, [pc, #552]	; (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fc11 	bl	800168c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff fc0d 	bl	800168c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0fd      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x312>
 8001e94:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	e02d      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x334>
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a72      	ldr	r2, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x356>
 8001ecc:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a6c      	ldr	r2, [pc, #432]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a69      	ldr	r2, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ee6:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a66      	ldr	r2, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b64      	ldr	r3, [pc, #400]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a63      	ldr	r2, [pc, #396]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fbc1 	bl	800168c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fbbd 	bl	800168c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0ab      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x37e>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fbab 	bl	800168c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fba7 	bl	800168c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e095      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a47      	ldr	r2, [pc, #284]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8081 	beq.w	800207a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	4b42      	ldr	r3, [pc, #264]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d061      	beq.n	8002048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d146      	bne.n	800201a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x4fc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fb7b 	bl	800168c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fb77 	bl	800168c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e067      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	4b35      	ldr	r3, [pc, #212]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d108      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	492d      	ldr	r1, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a19      	ldr	r1, [r3, #32]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	4927      	ldr	r1, [pc, #156]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x4fc>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fb4b 	bl	800168c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7ff fb47 	bl	800168c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e037      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46a>
 8002018:	e02f      	b.n	800207a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_RCC_OscConfig+0x4fc>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fb34 	bl	800168c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fb30 	bl	800168c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e020      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x498>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e013      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	429a      	cmp	r2, r3
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	42420060 	.word	0x42420060

08002090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0d0      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4965      	ldr	r1, [pc, #404]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0b8      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a58      	ldr	r2, [pc, #352]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a52      	ldr	r2, [pc, #328]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800210e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	494d      	ldr	r1, [pc, #308]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d040      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d115      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e07f      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e073      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06b      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4936      	ldr	r1, [pc, #216]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff fa84 	bl	800168c <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7ff fa80 	bl	800168c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e053      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d210      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4922      	ldr	r1, [pc, #136]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e032      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4916      	ldr	r1, [pc, #88]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800221e:	f000 f821 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002222:	4601      	mov	r1, r0
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	fa21 f303 	lsr.w	r3, r1, r3
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1cc>)
 8002238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1d0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff f9e2 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
 8002258:	0800400c 	.word	0x0800400c
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004

08002264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b490      	push	{r4, r7}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb0>)
 800226c:	1d3c      	adds	r4, r7, #4
 800226e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x40>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x46>
 80022a2:	e02d      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022b6:	4413      	add	r3, r2
 80022b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0c5b      	lsrs	r3, r3, #17
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d6:	4413      	add	r3, r2
 80022d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022e2:	fb02 f203 	mul.w	r2, r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e004      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	623b      	str	r3, [r7, #32]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002302:	623b      	str	r3, [r7, #32]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	6a3b      	ldr	r3, [r7, #32]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc90      	pop	{r4, r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	08003ff8 	.word	0x08003ff8
 8002318:	08004008 	.word	0x08004008
 800231c:	40021000 	.word	0x40021000
 8002320:	007a1200 	.word	0x007a1200
 8002324:	003d0900 	.word	0x003d0900

08002328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_RCC_GetHCLKFreq+0x10>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	20000000 	.word	0x20000000

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002340:	f7ff fff2 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002344:	4601      	mov	r1, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4a03      	ldr	r2, [pc, #12]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	0800401c 	.word	0x0800401c

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002368:	f7ff ffde 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 800236c:	4601      	mov	r1, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0adb      	lsrs	r3, r3, #11
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	0800401c 	.word	0x0800401c

0800238c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <RCC_Delay+0x34>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <RCC_Delay+0x38>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0a5b      	lsrs	r3, r3, #9
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a8:	bf00      	nop
  }
  while (Delay --);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	60fa      	str	r2, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f9      	bne.n	80023a8 <RCC_Delay+0x1c>
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e076      	b.n	80024c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ea:	d009      	beq.n	8002400 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
 80023f2:	e005      	b.n	8002400 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe ff6c 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002436:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	0c1a      	lsrs	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f002 0204 	and.w	r2, r2, #4
 80024a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_SPI_Transmit+0x22>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e126      	b.n	8002740 <HAL_SPI_Transmit+0x270>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024fa:	f7ff f8c7 	bl	800168c <HAL_GetTick>
 80024fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002514:	e10b      	b.n	800272e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SPI_Transmit+0x52>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002526:	e102      	b.n	800272e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2203      	movs	r2, #3
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256e:	d10f      	bne.n	8002590 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800258e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d007      	beq.n	80025ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b6:	d14b      	bne.n	8002650 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_Transmit+0xf6>
 80025c0:	8afb      	ldrh	r3, [r7, #22]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d13e      	bne.n	8002644 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	1c9a      	adds	r2, r3, #2
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ea:	e02b      	b.n	8002644 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d112      	bne.n	8002620 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	1c9a      	adds	r2, r3, #2
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	86da      	strh	r2, [r3, #54]	; 0x36
 800261e:	e011      	b.n	8002644 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002620:	f7ff f834 	bl	800168c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d803      	bhi.n	8002638 <HAL_SPI_Transmit+0x168>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002636:	d102      	bne.n	800263e <HAL_SPI_Transmit+0x16e>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002642:	e074      	b.n	800272e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ce      	bne.n	80025ec <HAL_SPI_Transmit+0x11c>
 800264e:	e04c      	b.n	80026ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_SPI_Transmit+0x18e>
 8002658:	8afb      	ldrh	r3, [r7, #22]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d140      	bne.n	80026e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002684:	e02c      	b.n	80026e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d113      	bne.n	80026bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80026ba:	e011      	b.n	80026e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026bc:	f7fe ffe6 	bl	800168c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d803      	bhi.n	80026d4 <HAL_SPI_Transmit+0x204>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d2:	d102      	bne.n	80026da <HAL_SPI_Transmit+0x20a>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026de:	e026      	b.n	800272e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1cd      	bne.n	8002686 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fbb8 	bl	8002e64 <SPI_EndRxTxTransaction>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	77fb      	strb	r3, [r7, #31]
 800272a:	e000      	b.n	800272e <HAL_SPI_Transmit+0x25e>
  }

error:
 800272c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800273e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002764:	d112      	bne.n	800278c <HAL_SPI_Receive+0x44>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10e      	bne.n	800278c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2204      	movs	r2, #4
 8002772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8f1 	bl	800296a <HAL_SPI_TransmitReceive>
 8002788:	4603      	mov	r3, r0
 800278a:	e0ea      	b.n	8002962 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_SPI_Receive+0x52>
 8002796:	2302      	movs	r3, #2
 8002798:	e0e3      	b.n	8002962 <HAL_SPI_Receive+0x21a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a2:	f7fe ff73 	bl	800168c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027b8:	e0ca      	b.n	8002950 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Receive+0x7e>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027ca:	e0c1      	b.n	8002950 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2204      	movs	r2, #4
 80027d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002812:	d10f      	bne.n	8002834 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002822:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d007      	beq.n	8002852 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d162      	bne.n	8002920 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800285a:	e02e      	b.n	80028ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d115      	bne.n	8002896 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f103 020c 	add.w	r2, r3, #12
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002894:	e011      	b.n	80028ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002896:	f7fe fef9 	bl	800168c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d803      	bhi.n	80028ae <HAL_SPI_Receive+0x166>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ac:	d102      	bne.n	80028b4 <HAL_SPI_Receive+0x16c>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028b8:	e04a      	b.n	8002950 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1cb      	bne.n	800285c <HAL_SPI_Receive+0x114>
 80028c4:	e031      	b.n	800292a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d113      	bne.n	80028fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	b292      	uxth	r2, r2
 80028e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028fa:	e011      	b.n	8002920 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028fc:	f7fe fec6 	bl	800168c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d803      	bhi.n	8002914 <HAL_SPI_Receive+0x1cc>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002912:	d102      	bne.n	800291a <HAL_SPI_Receive+0x1d2>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800291e:	e017      	b.n	8002950 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1cd      	bne.n	80028c6 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa46 	bl	8002dc0 <SPI_EndRxTransaction>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
 800294c:	e000      	b.n	8002950 <HAL_SPI_Receive+0x208>
  }

error :
 800294e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b08c      	sub	sp, #48	; 0x30
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002978:	2301      	movs	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x26>
 800298c:	2302      	movs	r3, #2
 800298e:	e18a      	b.n	8002ca6 <HAL_SPI_TransmitReceive+0x33c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002998:	f7fe fe78 	bl	800168c <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d00f      	beq.n	80029da <HAL_SPI_TransmitReceive+0x70>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c0:	d107      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x68>
 80029ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029d8:	e15b      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x82>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x82>
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029f2:	e14e      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d003      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	887a      	ldrh	r2, [r7, #2]
 8002a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	887a      	ldrh	r2, [r7, #2]
 8002a2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d007      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a64:	d178      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x10a>
 8002a6e:	8b7b      	ldrh	r3, [r7, #26]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d166      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c9a      	adds	r2, r3, #2
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a98:	e053      	b.n	8002b42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x176>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x176>
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d113      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d119      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x1b8>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	b292      	uxth	r2, r2
 8002b04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	1c9a      	adds	r2, r3, #2
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b22:	f7fe fdb3 	bl	800168c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d807      	bhi.n	8002b42 <HAL_SPI_TransmitReceive+0x1d8>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	d003      	beq.n	8002b42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b40:	e0a7      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1a6      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x130>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1a1      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x130>
 8002b56:	e07c      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_TransmitReceive+0x1fc>
 8002b60:	8b7b      	ldrh	r3, [r7, #26]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d16b      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8c:	e057      	b.n	8002c3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11c      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x26c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d017      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x26c>
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d114      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d119      	bne.n	8002c18 <HAL_SPI_TransmitReceive+0x2ae>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d014      	beq.n	8002c18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c18:	f7fe fd38 	bl	800168c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d803      	bhi.n	8002c30 <HAL_SPI_TransmitReceive+0x2c6>
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x2cc>
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c3c:	e029      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1a2      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x224>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d19d      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f904 	bl	8002e64 <SPI_EndRxTxTransaction>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c6e:	e010      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	e000      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3730      	adds	r7, #48	; 0x30
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cc0:	f7fe fce4 	bl	800168c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	4413      	add	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cd0:	f7fe fcdc 	bl	800168c <HAL_GetTick>
 8002cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	0d1b      	lsrs	r3, r3, #20
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce6:	e054      	b.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cee:	d050      	beq.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cf0:	f7fe fccc 	bl	800168c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d902      	bls.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d13d      	bne.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1e:	d111      	bne.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d28:	d004      	beq.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d107      	bne.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d10f      	bne.n	8002d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e017      	b.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d19b      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd4:	d111      	bne.n	8002dfa <SPI_EndRxTransaction+0x3a>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dde:	d004      	beq.n	8002dea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de8:	d107      	bne.n	8002dfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e02:	d117      	bne.n	8002e34 <SPI_EndRxTransaction+0x74>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d112      	bne.n	8002e34 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2101      	movs	r1, #1
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff ff49 	bl	8002cb0 <SPI_WaitFlagStateUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01a      	beq.n	8002e5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e013      	b.n	8002e5c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff ff36 	bl	8002cb0 <SPI_WaitFlagStateUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e000      	b.n	8002e5c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ff18 	bl	8002cb0 <SPI_WaitFlagStateUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e000      	b.n	8002e98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03f      	b.n	8002f32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe fb18 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f905 	bl	80030f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b08a      	sub	sp, #40	; 0x28
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d17c      	bne.n	8003054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_Transmit+0x2c>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e075      	b.n	8003056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x3e>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e06e      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fb7d 	bl	800168c <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fcc:	e02a      	b.n	8003024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f840 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3302      	adds	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e007      	b.n	8003016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cf      	bne.n	8002fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f810 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e02c      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d028      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
 800307e:	f7fe fb05 	bl	800168c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d21d      	bcs.n	80030ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800309c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0c3      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800312e:	f023 030c 	bic.w	r3, r3, #12
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	430b      	orrs	r3, r1
 800313a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <UART_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff f902 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	e002      	b.n	800316a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff f8ea 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	0119      	lsls	r1, r3, #4
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <UART_SetConfig+0x118>)
 80031a2:	fba3 0302 	umull	r0, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	4419      	add	r1, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009a      	lsls	r2, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <UART_SetConfig+0x118>)
 80031da:	fba3 0302 	umull	r0, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2064      	movs	r0, #100	; 0x64
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <UART_SetConfig+0x118>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	440a      	add	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40013800 	.word	0x40013800
 800320c:	51eb851f 	.word	0x51eb851f

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000000c 	.word	0x2000000c

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2500      	movs	r5, #0
 8003220:	4e0c      	ldr	r6, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1ba4      	subs	r4, r4, r6
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 fc36 	bl	8003a9c <_init>
 8003230:	2500      	movs	r5, #0
 8003232:	4e0a      	ldr	r6, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1ba4      	subs	r4, r4, r6
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08004058 	.word	0x08004058
 8003258:	08004058 	.word	0x08004058
 800325c:	08004058 	.word	0x08004058
 8003260:	0800405c 	.word	0x0800405c

08003264 <memcpy>:
 8003264:	b510      	push	{r4, lr}
 8003266:	1e43      	subs	r3, r0, #1
 8003268:	440a      	add	r2, r1
 800326a:	4291      	cmp	r1, r2
 800326c:	d100      	bne.n	8003270 <memcpy+0xc>
 800326e:	bd10      	pop	{r4, pc}
 8003270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003278:	e7f7      	b.n	800326a <memcpy+0x6>

0800327a <memset>:
 800327a:	4603      	mov	r3, r0
 800327c:	4402      	add	r2, r0
 800327e:	4293      	cmp	r3, r2
 8003280:	d100      	bne.n	8003284 <memset+0xa>
 8003282:	4770      	bx	lr
 8003284:	f803 1b01 	strb.w	r1, [r3], #1
 8003288:	e7f9      	b.n	800327e <memset+0x4>
	...

0800328c <siprintf>:
 800328c:	b40e      	push	{r1, r2, r3}
 800328e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003292:	b500      	push	{lr}
 8003294:	b09c      	sub	sp, #112	; 0x70
 8003296:	ab1d      	add	r3, sp, #116	; 0x74
 8003298:	9002      	str	r0, [sp, #8]
 800329a:	9006      	str	r0, [sp, #24]
 800329c:	9107      	str	r1, [sp, #28]
 800329e:	9104      	str	r1, [sp, #16]
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <siprintf+0x38>)
 80032a2:	4909      	ldr	r1, [pc, #36]	; (80032c8 <siprintf+0x3c>)
 80032a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80032a8:	9105      	str	r1, [sp, #20]
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	a902      	add	r1, sp, #8
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	f000 f866 	bl	8003380 <_svfiprintf_r>
 80032b4:	2200      	movs	r2, #0
 80032b6:	9b02      	ldr	r3, [sp, #8]
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	b01c      	add	sp, #112	; 0x70
 80032bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80032c0:	b003      	add	sp, #12
 80032c2:	4770      	bx	lr
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	ffff0208 	.word	0xffff0208

080032cc <__ssputs_r>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	688e      	ldr	r6, [r1, #8]
 80032d2:	4682      	mov	sl, r0
 80032d4:	429e      	cmp	r6, r3
 80032d6:	460c      	mov	r4, r1
 80032d8:	4690      	mov	r8, r2
 80032da:	4699      	mov	r9, r3
 80032dc:	d837      	bhi.n	800334e <__ssputs_r+0x82>
 80032de:	898a      	ldrh	r2, [r1, #12]
 80032e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032e4:	d031      	beq.n	800334a <__ssputs_r+0x7e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	6825      	ldr	r5, [r4, #0]
 80032ea:	6909      	ldr	r1, [r1, #16]
 80032ec:	1a6f      	subs	r7, r5, r1
 80032ee:	6965      	ldr	r5, [r4, #20]
 80032f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80032f8:	f109 0301 	add.w	r3, r9, #1
 80032fc:	443b      	add	r3, r7
 80032fe:	429d      	cmp	r5, r3
 8003300:	bf38      	it	cc
 8003302:	461d      	movcc	r5, r3
 8003304:	0553      	lsls	r3, r2, #21
 8003306:	d530      	bpl.n	800336a <__ssputs_r+0x9e>
 8003308:	4629      	mov	r1, r5
 800330a:	f000 fb2d 	bl	8003968 <_malloc_r>
 800330e:	4606      	mov	r6, r0
 8003310:	b950      	cbnz	r0, 8003328 <__ssputs_r+0x5c>
 8003312:	230c      	movs	r3, #12
 8003314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003318:	f8ca 3000 	str.w	r3, [sl]
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003328:	463a      	mov	r2, r7
 800332a:	6921      	ldr	r1, [r4, #16]
 800332c:	f7ff ff9a 	bl	8003264 <memcpy>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	6126      	str	r6, [r4, #16]
 800333e:	443e      	add	r6, r7
 8003340:	6026      	str	r6, [r4, #0]
 8003342:	464e      	mov	r6, r9
 8003344:	6165      	str	r5, [r4, #20]
 8003346:	1bed      	subs	r5, r5, r7
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	454e      	cmp	r6, r9
 800334c:	d900      	bls.n	8003350 <__ssputs_r+0x84>
 800334e:	464e      	mov	r6, r9
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	f000 faa1 	bl	800389c <memmove>
 800335a:	68a3      	ldr	r3, [r4, #8]
 800335c:	2000      	movs	r0, #0
 800335e:	1b9b      	subs	r3, r3, r6
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	441e      	add	r6, r3
 8003366:	6026      	str	r6, [r4, #0]
 8003368:	e7dc      	b.n	8003324 <__ssputs_r+0x58>
 800336a:	462a      	mov	r2, r5
 800336c:	f000 fb56 	bl	8003a1c <_realloc_r>
 8003370:	4606      	mov	r6, r0
 8003372:	2800      	cmp	r0, #0
 8003374:	d1e2      	bne.n	800333c <__ssputs_r+0x70>
 8003376:	6921      	ldr	r1, [r4, #16]
 8003378:	4650      	mov	r0, sl
 800337a:	f000 faa9 	bl	80038d0 <_free_r>
 800337e:	e7c8      	b.n	8003312 <__ssputs_r+0x46>

08003380 <_svfiprintf_r>:
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003384:	461d      	mov	r5, r3
 8003386:	898b      	ldrh	r3, [r1, #12]
 8003388:	b09d      	sub	sp, #116	; 0x74
 800338a:	061f      	lsls	r7, r3, #24
 800338c:	4680      	mov	r8, r0
 800338e:	460c      	mov	r4, r1
 8003390:	4616      	mov	r6, r2
 8003392:	d50f      	bpl.n	80033b4 <_svfiprintf_r+0x34>
 8003394:	690b      	ldr	r3, [r1, #16]
 8003396:	b96b      	cbnz	r3, 80033b4 <_svfiprintf_r+0x34>
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	f000 fae5 	bl	8003968 <_malloc_r>
 800339e:	6020      	str	r0, [r4, #0]
 80033a0:	6120      	str	r0, [r4, #16]
 80033a2:	b928      	cbnz	r0, 80033b0 <_svfiprintf_r+0x30>
 80033a4:	230c      	movs	r3, #12
 80033a6:	f8c8 3000 	str.w	r3, [r8]
 80033aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ae:	e0c8      	b.n	8003542 <_svfiprintf_r+0x1c2>
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	6163      	str	r3, [r4, #20]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9309      	str	r3, [sp, #36]	; 0x24
 80033b8:	2320      	movs	r3, #32
 80033ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033be:	2330      	movs	r3, #48	; 0x30
 80033c0:	f04f 0b01 	mov.w	fp, #1
 80033c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033c8:	9503      	str	r5, [sp, #12]
 80033ca:	4637      	mov	r7, r6
 80033cc:	463d      	mov	r5, r7
 80033ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80033d2:	b10b      	cbz	r3, 80033d8 <_svfiprintf_r+0x58>
 80033d4:	2b25      	cmp	r3, #37	; 0x25
 80033d6:	d13e      	bne.n	8003456 <_svfiprintf_r+0xd6>
 80033d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80033dc:	d00b      	beq.n	80033f6 <_svfiprintf_r+0x76>
 80033de:	4653      	mov	r3, sl
 80033e0:	4632      	mov	r2, r6
 80033e2:	4621      	mov	r1, r4
 80033e4:	4640      	mov	r0, r8
 80033e6:	f7ff ff71 	bl	80032cc <__ssputs_r>
 80033ea:	3001      	adds	r0, #1
 80033ec:	f000 80a4 	beq.w	8003538 <_svfiprintf_r+0x1b8>
 80033f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f2:	4453      	add	r3, sl
 80033f4:	9309      	str	r3, [sp, #36]	; 0x24
 80033f6:	783b      	ldrb	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 809d 	beq.w	8003538 <_svfiprintf_r+0x1b8>
 80033fe:	2300      	movs	r3, #0
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003408:	9304      	str	r3, [sp, #16]
 800340a:	9307      	str	r3, [sp, #28]
 800340c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003410:	931a      	str	r3, [sp, #104]	; 0x68
 8003412:	462f      	mov	r7, r5
 8003414:	2205      	movs	r2, #5
 8003416:	f817 1b01 	ldrb.w	r1, [r7], #1
 800341a:	4850      	ldr	r0, [pc, #320]	; (800355c <_svfiprintf_r+0x1dc>)
 800341c:	f000 fa30 	bl	8003880 <memchr>
 8003420:	9b04      	ldr	r3, [sp, #16]
 8003422:	b9d0      	cbnz	r0, 800345a <_svfiprintf_r+0xda>
 8003424:	06d9      	lsls	r1, r3, #27
 8003426:	bf44      	itt	mi
 8003428:	2220      	movmi	r2, #32
 800342a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800342e:	071a      	lsls	r2, r3, #28
 8003430:	bf44      	itt	mi
 8003432:	222b      	movmi	r2, #43	; 0x2b
 8003434:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003438:	782a      	ldrb	r2, [r5, #0]
 800343a:	2a2a      	cmp	r2, #42	; 0x2a
 800343c:	d015      	beq.n	800346a <_svfiprintf_r+0xea>
 800343e:	462f      	mov	r7, r5
 8003440:	2000      	movs	r0, #0
 8003442:	250a      	movs	r5, #10
 8003444:	9a07      	ldr	r2, [sp, #28]
 8003446:	4639      	mov	r1, r7
 8003448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800344c:	3b30      	subs	r3, #48	; 0x30
 800344e:	2b09      	cmp	r3, #9
 8003450:	d94d      	bls.n	80034ee <_svfiprintf_r+0x16e>
 8003452:	b1b8      	cbz	r0, 8003484 <_svfiprintf_r+0x104>
 8003454:	e00f      	b.n	8003476 <_svfiprintf_r+0xf6>
 8003456:	462f      	mov	r7, r5
 8003458:	e7b8      	b.n	80033cc <_svfiprintf_r+0x4c>
 800345a:	4a40      	ldr	r2, [pc, #256]	; (800355c <_svfiprintf_r+0x1dc>)
 800345c:	463d      	mov	r5, r7
 800345e:	1a80      	subs	r0, r0, r2
 8003460:	fa0b f000 	lsl.w	r0, fp, r0
 8003464:	4318      	orrs	r0, r3
 8003466:	9004      	str	r0, [sp, #16]
 8003468:	e7d3      	b.n	8003412 <_svfiprintf_r+0x92>
 800346a:	9a03      	ldr	r2, [sp, #12]
 800346c:	1d11      	adds	r1, r2, #4
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	9103      	str	r1, [sp, #12]
 8003472:	2a00      	cmp	r2, #0
 8003474:	db01      	blt.n	800347a <_svfiprintf_r+0xfa>
 8003476:	9207      	str	r2, [sp, #28]
 8003478:	e004      	b.n	8003484 <_svfiprintf_r+0x104>
 800347a:	4252      	negs	r2, r2
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	9207      	str	r2, [sp, #28]
 8003482:	9304      	str	r3, [sp, #16]
 8003484:	783b      	ldrb	r3, [r7, #0]
 8003486:	2b2e      	cmp	r3, #46	; 0x2e
 8003488:	d10c      	bne.n	80034a4 <_svfiprintf_r+0x124>
 800348a:	787b      	ldrb	r3, [r7, #1]
 800348c:	2b2a      	cmp	r3, #42	; 0x2a
 800348e:	d133      	bne.n	80034f8 <_svfiprintf_r+0x178>
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	3702      	adds	r7, #2
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	9203      	str	r2, [sp, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80034a2:	9305      	str	r3, [sp, #20]
 80034a4:	4d2e      	ldr	r5, [pc, #184]	; (8003560 <_svfiprintf_r+0x1e0>)
 80034a6:	2203      	movs	r2, #3
 80034a8:	7839      	ldrb	r1, [r7, #0]
 80034aa:	4628      	mov	r0, r5
 80034ac:	f000 f9e8 	bl	8003880 <memchr>
 80034b0:	b138      	cbz	r0, 80034c2 <_svfiprintf_r+0x142>
 80034b2:	2340      	movs	r3, #64	; 0x40
 80034b4:	1b40      	subs	r0, r0, r5
 80034b6:	fa03 f000 	lsl.w	r0, r3, r0
 80034ba:	9b04      	ldr	r3, [sp, #16]
 80034bc:	3701      	adds	r7, #1
 80034be:	4303      	orrs	r3, r0
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	7839      	ldrb	r1, [r7, #0]
 80034c4:	2206      	movs	r2, #6
 80034c6:	4827      	ldr	r0, [pc, #156]	; (8003564 <_svfiprintf_r+0x1e4>)
 80034c8:	1c7e      	adds	r6, r7, #1
 80034ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ce:	f000 f9d7 	bl	8003880 <memchr>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d038      	beq.n	8003548 <_svfiprintf_r+0x1c8>
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <_svfiprintf_r+0x1e8>)
 80034d8:	bb13      	cbnz	r3, 8003520 <_svfiprintf_r+0x1a0>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	3307      	adds	r3, #7
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	3308      	adds	r3, #8
 80034e4:	9303      	str	r3, [sp, #12]
 80034e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e8:	444b      	add	r3, r9
 80034ea:	9309      	str	r3, [sp, #36]	; 0x24
 80034ec:	e76d      	b.n	80033ca <_svfiprintf_r+0x4a>
 80034ee:	fb05 3202 	mla	r2, r5, r2, r3
 80034f2:	2001      	movs	r0, #1
 80034f4:	460f      	mov	r7, r1
 80034f6:	e7a6      	b.n	8003446 <_svfiprintf_r+0xc6>
 80034f8:	2300      	movs	r3, #0
 80034fa:	250a      	movs	r5, #10
 80034fc:	4619      	mov	r1, r3
 80034fe:	3701      	adds	r7, #1
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	4638      	mov	r0, r7
 8003504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003508:	3a30      	subs	r2, #48	; 0x30
 800350a:	2a09      	cmp	r2, #9
 800350c:	d903      	bls.n	8003516 <_svfiprintf_r+0x196>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c8      	beq.n	80034a4 <_svfiprintf_r+0x124>
 8003512:	9105      	str	r1, [sp, #20]
 8003514:	e7c6      	b.n	80034a4 <_svfiprintf_r+0x124>
 8003516:	fb05 2101 	mla	r1, r5, r1, r2
 800351a:	2301      	movs	r3, #1
 800351c:	4607      	mov	r7, r0
 800351e:	e7f0      	b.n	8003502 <_svfiprintf_r+0x182>
 8003520:	ab03      	add	r3, sp, #12
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4622      	mov	r2, r4
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <_svfiprintf_r+0x1ec>)
 8003528:	a904      	add	r1, sp, #16
 800352a:	4640      	mov	r0, r8
 800352c:	f3af 8000 	nop.w
 8003530:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003534:	4681      	mov	r9, r0
 8003536:	d1d6      	bne.n	80034e6 <_svfiprintf_r+0x166>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	065b      	lsls	r3, r3, #25
 800353c:	f53f af35 	bmi.w	80033aa <_svfiprintf_r+0x2a>
 8003540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003542:	b01d      	add	sp, #116	; 0x74
 8003544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003548:	ab03      	add	r3, sp, #12
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4622      	mov	r2, r4
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <_svfiprintf_r+0x1ec>)
 8003550:	a904      	add	r1, sp, #16
 8003552:	4640      	mov	r0, r8
 8003554:	f000 f882 	bl	800365c <_printf_i>
 8003558:	e7ea      	b.n	8003530 <_svfiprintf_r+0x1b0>
 800355a:	bf00      	nop
 800355c:	08004024 	.word	0x08004024
 8003560:	0800402a 	.word	0x0800402a
 8003564:	0800402e 	.word	0x0800402e
 8003568:	00000000 	.word	0x00000000
 800356c:	080032cd 	.word	0x080032cd

08003570 <_printf_common>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	4691      	mov	r9, r2
 8003576:	461f      	mov	r7, r3
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	690b      	ldr	r3, [r1, #16]
 800357c:	4606      	mov	r6, r0
 800357e:	4293      	cmp	r3, r2
 8003580:	bfb8      	it	lt
 8003582:	4613      	movlt	r3, r2
 8003584:	f8c9 3000 	str.w	r3, [r9]
 8003588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800358c:	460c      	mov	r4, r1
 800358e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003592:	b112      	cbz	r2, 800359a <_printf_common+0x2a>
 8003594:	3301      	adds	r3, #1
 8003596:	f8c9 3000 	str.w	r3, [r9]
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	0699      	lsls	r1, r3, #26
 800359e:	bf42      	ittt	mi
 80035a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035a4:	3302      	addmi	r3, #2
 80035a6:	f8c9 3000 	strmi.w	r3, [r9]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	f015 0506 	ands.w	r5, r5, #6
 80035b0:	d107      	bne.n	80035c2 <_printf_common+0x52>
 80035b2:	f104 0a19 	add.w	sl, r4, #25
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	f8d9 2000 	ldr.w	r2, [r9]
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	42ab      	cmp	r3, r5
 80035c0:	dc29      	bgt.n	8003616 <_printf_common+0xa6>
 80035c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	3300      	adds	r3, #0
 80035ca:	bf18      	it	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	0692      	lsls	r2, r2, #26
 80035d0:	d42e      	bmi.n	8003630 <_printf_common+0xc0>
 80035d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d6:	4639      	mov	r1, r7
 80035d8:	4630      	mov	r0, r6
 80035da:	47c0      	blx	r8
 80035dc:	3001      	adds	r0, #1
 80035de:	d021      	beq.n	8003624 <_printf_common+0xb4>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	68e5      	ldr	r5, [r4, #12]
 80035e4:	f003 0306 	and.w	r3, r3, #6
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	bf18      	it	ne
 80035ec:	2500      	movne	r5, #0
 80035ee:	f8d9 2000 	ldr.w	r2, [r9]
 80035f2:	f04f 0900 	mov.w	r9, #0
 80035f6:	bf08      	it	eq
 80035f8:	1aad      	subeq	r5, r5, r2
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	bf08      	it	eq
 8003600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003604:	4293      	cmp	r3, r2
 8003606:	bfc4      	itt	gt
 8003608:	1a9b      	subgt	r3, r3, r2
 800360a:	18ed      	addgt	r5, r5, r3
 800360c:	341a      	adds	r4, #26
 800360e:	454d      	cmp	r5, r9
 8003610:	d11a      	bne.n	8003648 <_printf_common+0xd8>
 8003612:	2000      	movs	r0, #0
 8003614:	e008      	b.n	8003628 <_printf_common+0xb8>
 8003616:	2301      	movs	r3, #1
 8003618:	4652      	mov	r2, sl
 800361a:	4639      	mov	r1, r7
 800361c:	4630      	mov	r0, r6
 800361e:	47c0      	blx	r8
 8003620:	3001      	adds	r0, #1
 8003622:	d103      	bne.n	800362c <_printf_common+0xbc>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	3501      	adds	r5, #1
 800362e:	e7c2      	b.n	80035b6 <_printf_common+0x46>
 8003630:	2030      	movs	r0, #48	; 0x30
 8003632:	18e1      	adds	r1, r4, r3
 8003634:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800363e:	4422      	add	r2, r4
 8003640:	3302      	adds	r3, #2
 8003642:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003646:	e7c4      	b.n	80035d2 <_printf_common+0x62>
 8003648:	2301      	movs	r3, #1
 800364a:	4622      	mov	r2, r4
 800364c:	4639      	mov	r1, r7
 800364e:	4630      	mov	r0, r6
 8003650:	47c0      	blx	r8
 8003652:	3001      	adds	r0, #1
 8003654:	d0e6      	beq.n	8003624 <_printf_common+0xb4>
 8003656:	f109 0901 	add.w	r9, r9, #1
 800365a:	e7d8      	b.n	800360e <_printf_common+0x9e>

0800365c <_printf_i>:
 800365c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003660:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003664:	460c      	mov	r4, r1
 8003666:	7e09      	ldrb	r1, [r1, #24]
 8003668:	b085      	sub	sp, #20
 800366a:	296e      	cmp	r1, #110	; 0x6e
 800366c:	4617      	mov	r7, r2
 800366e:	4606      	mov	r6, r0
 8003670:	4698      	mov	r8, r3
 8003672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003674:	f000 80b3 	beq.w	80037de <_printf_i+0x182>
 8003678:	d822      	bhi.n	80036c0 <_printf_i+0x64>
 800367a:	2963      	cmp	r1, #99	; 0x63
 800367c:	d036      	beq.n	80036ec <_printf_i+0x90>
 800367e:	d80a      	bhi.n	8003696 <_printf_i+0x3a>
 8003680:	2900      	cmp	r1, #0
 8003682:	f000 80b9 	beq.w	80037f8 <_printf_i+0x19c>
 8003686:	2958      	cmp	r1, #88	; 0x58
 8003688:	f000 8083 	beq.w	8003792 <_printf_i+0x136>
 800368c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003690:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003694:	e032      	b.n	80036fc <_printf_i+0xa0>
 8003696:	2964      	cmp	r1, #100	; 0x64
 8003698:	d001      	beq.n	800369e <_printf_i+0x42>
 800369a:	2969      	cmp	r1, #105	; 0x69
 800369c:	d1f6      	bne.n	800368c <_printf_i+0x30>
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	0605      	lsls	r5, r0, #24
 80036a4:	f103 0104 	add.w	r1, r3, #4
 80036a8:	d52a      	bpl.n	8003700 <_printf_i+0xa4>
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da03      	bge.n	80036ba <_printf_i+0x5e>
 80036b2:	222d      	movs	r2, #45	; 0x2d
 80036b4:	425b      	negs	r3, r3
 80036b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036ba:	486f      	ldr	r0, [pc, #444]	; (8003878 <_printf_i+0x21c>)
 80036bc:	220a      	movs	r2, #10
 80036be:	e039      	b.n	8003734 <_printf_i+0xd8>
 80036c0:	2973      	cmp	r1, #115	; 0x73
 80036c2:	f000 809d 	beq.w	8003800 <_printf_i+0x1a4>
 80036c6:	d808      	bhi.n	80036da <_printf_i+0x7e>
 80036c8:	296f      	cmp	r1, #111	; 0x6f
 80036ca:	d020      	beq.n	800370e <_printf_i+0xb2>
 80036cc:	2970      	cmp	r1, #112	; 0x70
 80036ce:	d1dd      	bne.n	800368c <_printf_i+0x30>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	e003      	b.n	80036e2 <_printf_i+0x86>
 80036da:	2975      	cmp	r1, #117	; 0x75
 80036dc:	d017      	beq.n	800370e <_printf_i+0xb2>
 80036de:	2978      	cmp	r1, #120	; 0x78
 80036e0:	d1d4      	bne.n	800368c <_printf_i+0x30>
 80036e2:	2378      	movs	r3, #120	; 0x78
 80036e4:	4865      	ldr	r0, [pc, #404]	; (800387c <_printf_i+0x220>)
 80036e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ea:	e055      	b.n	8003798 <_printf_i+0x13c>
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f2:	1d19      	adds	r1, r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6011      	str	r1, [r2, #0]
 80036f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036fc:	2301      	movs	r3, #1
 80036fe:	e08c      	b.n	800381a <_printf_i+0x1be>
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003706:	6011      	str	r1, [r2, #0]
 8003708:	bf18      	it	ne
 800370a:	b21b      	sxthne	r3, r3
 800370c:	e7cf      	b.n	80036ae <_printf_i+0x52>
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	6825      	ldr	r5, [r4, #0]
 8003712:	1d18      	adds	r0, r3, #4
 8003714:	6010      	str	r0, [r2, #0]
 8003716:	0628      	lsls	r0, r5, #24
 8003718:	d501      	bpl.n	800371e <_printf_i+0xc2>
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	e002      	b.n	8003724 <_printf_i+0xc8>
 800371e:	0668      	lsls	r0, r5, #25
 8003720:	d5fb      	bpl.n	800371a <_printf_i+0xbe>
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	296f      	cmp	r1, #111	; 0x6f
 8003726:	bf14      	ite	ne
 8003728:	220a      	movne	r2, #10
 800372a:	2208      	moveq	r2, #8
 800372c:	4852      	ldr	r0, [pc, #328]	; (8003878 <_printf_i+0x21c>)
 800372e:	2100      	movs	r1, #0
 8003730:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003734:	6865      	ldr	r5, [r4, #4]
 8003736:	2d00      	cmp	r5, #0
 8003738:	60a5      	str	r5, [r4, #8]
 800373a:	f2c0 8095 	blt.w	8003868 <_printf_i+0x20c>
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	f021 0104 	bic.w	r1, r1, #4
 8003744:	6021      	str	r1, [r4, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d13d      	bne.n	80037c6 <_printf_i+0x16a>
 800374a:	2d00      	cmp	r5, #0
 800374c:	f040 808e 	bne.w	800386c <_printf_i+0x210>
 8003750:	4665      	mov	r5, ip
 8003752:	2a08      	cmp	r2, #8
 8003754:	d10b      	bne.n	800376e <_printf_i+0x112>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	07db      	lsls	r3, r3, #31
 800375a:	d508      	bpl.n	800376e <_printf_i+0x112>
 800375c:	6923      	ldr	r3, [r4, #16]
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	bfde      	ittt	le
 8003764:	2330      	movle	r3, #48	; 0x30
 8003766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800376a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800376e:	ebac 0305 	sub.w	r3, ip, r5
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	f8cd 8000 	str.w	r8, [sp]
 8003778:	463b      	mov	r3, r7
 800377a:	aa03      	add	r2, sp, #12
 800377c:	4621      	mov	r1, r4
 800377e:	4630      	mov	r0, r6
 8003780:	f7ff fef6 	bl	8003570 <_printf_common>
 8003784:	3001      	adds	r0, #1
 8003786:	d14d      	bne.n	8003824 <_printf_i+0x1c8>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800378c:	b005      	add	sp, #20
 800378e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003792:	4839      	ldr	r0, [pc, #228]	; (8003878 <_printf_i+0x21c>)
 8003794:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	6821      	ldr	r1, [r4, #0]
 800379c:	1d1d      	adds	r5, r3, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6015      	str	r5, [r2, #0]
 80037a2:	060a      	lsls	r2, r1, #24
 80037a4:	d50b      	bpl.n	80037be <_printf_i+0x162>
 80037a6:	07ca      	lsls	r2, r1, #31
 80037a8:	bf44      	itt	mi
 80037aa:	f041 0120 	orrmi.w	r1, r1, #32
 80037ae:	6021      	strmi	r1, [r4, #0]
 80037b0:	b91b      	cbnz	r3, 80037ba <_printf_i+0x15e>
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	f022 0220 	bic.w	r2, r2, #32
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	e7b7      	b.n	800372e <_printf_i+0xd2>
 80037be:	064d      	lsls	r5, r1, #25
 80037c0:	bf48      	it	mi
 80037c2:	b29b      	uxthmi	r3, r3
 80037c4:	e7ef      	b.n	80037a6 <_printf_i+0x14a>
 80037c6:	4665      	mov	r5, ip
 80037c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80037cc:	fb02 3311 	mls	r3, r2, r1, r3
 80037d0:	5cc3      	ldrb	r3, [r0, r3]
 80037d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037d6:	460b      	mov	r3, r1
 80037d8:	2900      	cmp	r1, #0
 80037da:	d1f5      	bne.n	80037c8 <_printf_i+0x16c>
 80037dc:	e7b9      	b.n	8003752 <_printf_i+0xf6>
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	1d18      	adds	r0, r3, #4
 80037e4:	6961      	ldr	r1, [r4, #20]
 80037e6:	6010      	str	r0, [r2, #0]
 80037e8:	0628      	lsls	r0, r5, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	d501      	bpl.n	80037f2 <_printf_i+0x196>
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	e002      	b.n	80037f8 <_printf_i+0x19c>
 80037f2:	066a      	lsls	r2, r5, #25
 80037f4:	d5fb      	bpl.n	80037ee <_printf_i+0x192>
 80037f6:	8019      	strh	r1, [r3, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4665      	mov	r5, ip
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	e7b9      	b.n	8003774 <_printf_i+0x118>
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	1d19      	adds	r1, r3, #4
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	681d      	ldr	r5, [r3, #0]
 8003808:	6862      	ldr	r2, [r4, #4]
 800380a:	2100      	movs	r1, #0
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f837 	bl	8003880 <memchr>
 8003812:	b108      	cbz	r0, 8003818 <_printf_i+0x1bc>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	6060      	str	r0, [r4, #4]
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	2300      	movs	r3, #0
 800381e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003822:	e7a7      	b.n	8003774 <_printf_i+0x118>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	462a      	mov	r2, r5
 8003828:	4639      	mov	r1, r7
 800382a:	4630      	mov	r0, r6
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d0aa      	beq.n	8003788 <_printf_i+0x12c>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	079b      	lsls	r3, r3, #30
 8003836:	d413      	bmi.n	8003860 <_printf_i+0x204>
 8003838:	68e0      	ldr	r0, [r4, #12]
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	4298      	cmp	r0, r3
 800383e:	bfb8      	it	lt
 8003840:	4618      	movlt	r0, r3
 8003842:	e7a3      	b.n	800378c <_printf_i+0x130>
 8003844:	2301      	movs	r3, #1
 8003846:	464a      	mov	r2, r9
 8003848:	4639      	mov	r1, r7
 800384a:	4630      	mov	r0, r6
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d09a      	beq.n	8003788 <_printf_i+0x12c>
 8003852:	3501      	adds	r5, #1
 8003854:	68e3      	ldr	r3, [r4, #12]
 8003856:	9a03      	ldr	r2, [sp, #12]
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	42ab      	cmp	r3, r5
 800385c:	dcf2      	bgt.n	8003844 <_printf_i+0x1e8>
 800385e:	e7eb      	b.n	8003838 <_printf_i+0x1dc>
 8003860:	2500      	movs	r5, #0
 8003862:	f104 0919 	add.w	r9, r4, #25
 8003866:	e7f5      	b.n	8003854 <_printf_i+0x1f8>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ac      	bne.n	80037c6 <_printf_i+0x16a>
 800386c:	7803      	ldrb	r3, [r0, #0]
 800386e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003876:	e76c      	b.n	8003752 <_printf_i+0xf6>
 8003878:	08004035 	.word	0x08004035
 800387c:	08004046 	.word	0x08004046

08003880 <memchr>:
 8003880:	b510      	push	{r4, lr}
 8003882:	b2c9      	uxtb	r1, r1
 8003884:	4402      	add	r2, r0
 8003886:	4290      	cmp	r0, r2
 8003888:	4603      	mov	r3, r0
 800388a:	d101      	bne.n	8003890 <memchr+0x10>
 800388c:	2300      	movs	r3, #0
 800388e:	e003      	b.n	8003898 <memchr+0x18>
 8003890:	781c      	ldrb	r4, [r3, #0]
 8003892:	3001      	adds	r0, #1
 8003894:	428c      	cmp	r4, r1
 8003896:	d1f6      	bne.n	8003886 <memchr+0x6>
 8003898:	4618      	mov	r0, r3
 800389a:	bd10      	pop	{r4, pc}

0800389c <memmove>:
 800389c:	4288      	cmp	r0, r1
 800389e:	b510      	push	{r4, lr}
 80038a0:	eb01 0302 	add.w	r3, r1, r2
 80038a4:	d807      	bhi.n	80038b6 <memmove+0x1a>
 80038a6:	1e42      	subs	r2, r0, #1
 80038a8:	4299      	cmp	r1, r3
 80038aa:	d00a      	beq.n	80038c2 <memmove+0x26>
 80038ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80038b4:	e7f8      	b.n	80038a8 <memmove+0xc>
 80038b6:	4283      	cmp	r3, r0
 80038b8:	d9f5      	bls.n	80038a6 <memmove+0xa>
 80038ba:	1881      	adds	r1, r0, r2
 80038bc:	1ad2      	subs	r2, r2, r3
 80038be:	42d3      	cmn	r3, r2
 80038c0:	d100      	bne.n	80038c4 <memmove+0x28>
 80038c2:	bd10      	pop	{r4, pc}
 80038c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80038cc:	e7f7      	b.n	80038be <memmove+0x22>
	...

080038d0 <_free_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
 80038d4:	2900      	cmp	r1, #0
 80038d6:	d043      	beq.n	8003960 <_free_r+0x90>
 80038d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038dc:	1f0c      	subs	r4, r1, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfb8      	it	lt
 80038e2:	18e4      	addlt	r4, r4, r3
 80038e4:	f000 f8d0 	bl	8003a88 <__malloc_lock>
 80038e8:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <_free_r+0x94>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	4610      	mov	r0, r2
 80038ee:	b933      	cbnz	r3, 80038fe <_free_r+0x2e>
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	6014      	str	r4, [r2, #0]
 80038f4:	4628      	mov	r0, r5
 80038f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038fa:	f000 b8c6 	b.w	8003a8a <__malloc_unlock>
 80038fe:	42a3      	cmp	r3, r4
 8003900:	d90b      	bls.n	800391a <_free_r+0x4a>
 8003902:	6821      	ldr	r1, [r4, #0]
 8003904:	1862      	adds	r2, r4, r1
 8003906:	4293      	cmp	r3, r2
 8003908:	bf01      	itttt	eq
 800390a:	681a      	ldreq	r2, [r3, #0]
 800390c:	685b      	ldreq	r3, [r3, #4]
 800390e:	1852      	addeq	r2, r2, r1
 8003910:	6022      	streq	r2, [r4, #0]
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	6004      	str	r4, [r0, #0]
 8003916:	e7ed      	b.n	80038f4 <_free_r+0x24>
 8003918:	4613      	mov	r3, r2
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	b10a      	cbz	r2, 8003922 <_free_r+0x52>
 800391e:	42a2      	cmp	r2, r4
 8003920:	d9fa      	bls.n	8003918 <_free_r+0x48>
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	1858      	adds	r0, r3, r1
 8003926:	42a0      	cmp	r0, r4
 8003928:	d10b      	bne.n	8003942 <_free_r+0x72>
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	4401      	add	r1, r0
 800392e:	1858      	adds	r0, r3, r1
 8003930:	4282      	cmp	r2, r0
 8003932:	6019      	str	r1, [r3, #0]
 8003934:	d1de      	bne.n	80038f4 <_free_r+0x24>
 8003936:	6810      	ldr	r0, [r2, #0]
 8003938:	6852      	ldr	r2, [r2, #4]
 800393a:	4401      	add	r1, r0
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	e7d8      	b.n	80038f4 <_free_r+0x24>
 8003942:	d902      	bls.n	800394a <_free_r+0x7a>
 8003944:	230c      	movs	r3, #12
 8003946:	602b      	str	r3, [r5, #0]
 8003948:	e7d4      	b.n	80038f4 <_free_r+0x24>
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	1821      	adds	r1, r4, r0
 800394e:	428a      	cmp	r2, r1
 8003950:	bf01      	itttt	eq
 8003952:	6811      	ldreq	r1, [r2, #0]
 8003954:	6852      	ldreq	r2, [r2, #4]
 8003956:	1809      	addeq	r1, r1, r0
 8003958:	6021      	streq	r1, [r4, #0]
 800395a:	6062      	str	r2, [r4, #4]
 800395c:	605c      	str	r4, [r3, #4]
 800395e:	e7c9      	b.n	80038f4 <_free_r+0x24>
 8003960:	bd38      	pop	{r3, r4, r5, pc}
 8003962:	bf00      	nop
 8003964:	20000134 	.word	0x20000134

08003968 <_malloc_r>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	1ccd      	adds	r5, r1, #3
 800396c:	f025 0503 	bic.w	r5, r5, #3
 8003970:	3508      	adds	r5, #8
 8003972:	2d0c      	cmp	r5, #12
 8003974:	bf38      	it	cc
 8003976:	250c      	movcc	r5, #12
 8003978:	2d00      	cmp	r5, #0
 800397a:	4606      	mov	r6, r0
 800397c:	db01      	blt.n	8003982 <_malloc_r+0x1a>
 800397e:	42a9      	cmp	r1, r5
 8003980:	d903      	bls.n	800398a <_malloc_r+0x22>
 8003982:	230c      	movs	r3, #12
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	2000      	movs	r0, #0
 8003988:	bd70      	pop	{r4, r5, r6, pc}
 800398a:	f000 f87d 	bl	8003a88 <__malloc_lock>
 800398e:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <_malloc_r+0xac>)
 8003990:	6814      	ldr	r4, [r2, #0]
 8003992:	4621      	mov	r1, r4
 8003994:	b991      	cbnz	r1, 80039bc <_malloc_r+0x54>
 8003996:	4c20      	ldr	r4, [pc, #128]	; (8003a18 <_malloc_r+0xb0>)
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	b91b      	cbnz	r3, 80039a4 <_malloc_r+0x3c>
 800399c:	4630      	mov	r0, r6
 800399e:	f000 f863 	bl	8003a68 <_sbrk_r>
 80039a2:	6020      	str	r0, [r4, #0]
 80039a4:	4629      	mov	r1, r5
 80039a6:	4630      	mov	r0, r6
 80039a8:	f000 f85e 	bl	8003a68 <_sbrk_r>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d124      	bne.n	80039fa <_malloc_r+0x92>
 80039b0:	230c      	movs	r3, #12
 80039b2:	4630      	mov	r0, r6
 80039b4:	6033      	str	r3, [r6, #0]
 80039b6:	f000 f868 	bl	8003a8a <__malloc_unlock>
 80039ba:	e7e4      	b.n	8003986 <_malloc_r+0x1e>
 80039bc:	680b      	ldr	r3, [r1, #0]
 80039be:	1b5b      	subs	r3, r3, r5
 80039c0:	d418      	bmi.n	80039f4 <_malloc_r+0x8c>
 80039c2:	2b0b      	cmp	r3, #11
 80039c4:	d90f      	bls.n	80039e6 <_malloc_r+0x7e>
 80039c6:	600b      	str	r3, [r1, #0]
 80039c8:	18cc      	adds	r4, r1, r3
 80039ca:	50cd      	str	r5, [r1, r3]
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 f85c 	bl	8003a8a <__malloc_unlock>
 80039d2:	f104 000b 	add.w	r0, r4, #11
 80039d6:	1d23      	adds	r3, r4, #4
 80039d8:	f020 0007 	bic.w	r0, r0, #7
 80039dc:	1ac3      	subs	r3, r0, r3
 80039de:	d0d3      	beq.n	8003988 <_malloc_r+0x20>
 80039e0:	425a      	negs	r2, r3
 80039e2:	50e2      	str	r2, [r4, r3]
 80039e4:	e7d0      	b.n	8003988 <_malloc_r+0x20>
 80039e6:	684b      	ldr	r3, [r1, #4]
 80039e8:	428c      	cmp	r4, r1
 80039ea:	bf16      	itet	ne
 80039ec:	6063      	strne	r3, [r4, #4]
 80039ee:	6013      	streq	r3, [r2, #0]
 80039f0:	460c      	movne	r4, r1
 80039f2:	e7eb      	b.n	80039cc <_malloc_r+0x64>
 80039f4:	460c      	mov	r4, r1
 80039f6:	6849      	ldr	r1, [r1, #4]
 80039f8:	e7cc      	b.n	8003994 <_malloc_r+0x2c>
 80039fa:	1cc4      	adds	r4, r0, #3
 80039fc:	f024 0403 	bic.w	r4, r4, #3
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d005      	beq.n	8003a10 <_malloc_r+0xa8>
 8003a04:	1a21      	subs	r1, r4, r0
 8003a06:	4630      	mov	r0, r6
 8003a08:	f000 f82e 	bl	8003a68 <_sbrk_r>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0cf      	beq.n	80039b0 <_malloc_r+0x48>
 8003a10:	6025      	str	r5, [r4, #0]
 8003a12:	e7db      	b.n	80039cc <_malloc_r+0x64>
 8003a14:	20000134 	.word	0x20000134
 8003a18:	20000138 	.word	0x20000138

08003a1c <_realloc_r>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	4607      	mov	r7, r0
 8003a20:	4614      	mov	r4, r2
 8003a22:	460e      	mov	r6, r1
 8003a24:	b921      	cbnz	r1, 8003a30 <_realloc_r+0x14>
 8003a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	f7ff bf9c 	b.w	8003968 <_malloc_r>
 8003a30:	b922      	cbnz	r2, 8003a3c <_realloc_r+0x20>
 8003a32:	f7ff ff4d 	bl	80038d0 <_free_r>
 8003a36:	4625      	mov	r5, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3c:	f000 f826 	bl	8003a8c <_malloc_usable_size_r>
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d20f      	bcs.n	8003a64 <_realloc_r+0x48>
 8003a44:	4621      	mov	r1, r4
 8003a46:	4638      	mov	r0, r7
 8003a48:	f7ff ff8e 	bl	8003968 <_malloc_r>
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d0f2      	beq.n	8003a38 <_realloc_r+0x1c>
 8003a52:	4631      	mov	r1, r6
 8003a54:	4622      	mov	r2, r4
 8003a56:	f7ff fc05 	bl	8003264 <memcpy>
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ff37 	bl	80038d0 <_free_r>
 8003a62:	e7e9      	b.n	8003a38 <_realloc_r+0x1c>
 8003a64:	4635      	mov	r5, r6
 8003a66:	e7e7      	b.n	8003a38 <_realloc_r+0x1c>

08003a68 <_sbrk_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4c05      	ldr	r4, [pc, #20]	; (8003a84 <_sbrk_r+0x1c>)
 8003a6e:	4605      	mov	r5, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	f7fd fce6 	bl	8001444 <_sbrk>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_sbrk_r+0x1a>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_sbrk_r+0x1a>
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200001d8 	.word	0x200001d8

08003a88 <__malloc_lock>:
 8003a88:	4770      	bx	lr

08003a8a <__malloc_unlock>:
 8003a8a:	4770      	bx	lr

08003a8c <_malloc_usable_size_r>:
 8003a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a90:	1f18      	subs	r0, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfbc      	itt	lt
 8003a96:	580b      	ldrlt	r3, [r1, r0]
 8003a98:	18c0      	addlt	r0, r0, r3
 8003a9a:	4770      	bx	lr

08003a9c <_init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr

08003aa8 <_fini>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr
