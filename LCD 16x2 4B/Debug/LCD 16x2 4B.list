
LCD 16x2 4B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001f68  08001f68  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fcc  08001fcc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001fcc  08001fcc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fcc  08001fcc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000074  08002048  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002048  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a05  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001288  00000000  00000000  00024aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c8  00000000  00000000  00025d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  000261f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d2e  00000000  00000000  00026608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005079  00000000  00000000  0003d336  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080267  00000000  00000000  000423af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013b0  00000000  00000000  000c2694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f50 	.word	0x08001f50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08001f50 	.word	0x08001f50

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b26      	ldr	r3, [pc, #152]	; (800020c <MX_GPIO_Init+0xb0>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a25      	ldr	r2, [pc, #148]	; (800020c <MX_GPIO_Init+0xb0>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b23      	ldr	r3, [pc, #140]	; (800020c <MX_GPIO_Init+0xb0>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b20      	ldr	r3, [pc, #128]	; (800020c <MX_GPIO_Init+0xb0>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a1f      	ldr	r2, [pc, #124]	; (800020c <MX_GPIO_Init+0xb0>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b1d      	ldr	r3, [pc, #116]	; (800020c <MX_GPIO_Init+0xb0>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <MX_GPIO_Init+0xb0>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_GPIO_Init+0xb0>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <MX_GPIO_Init+0xb0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	21f0      	movs	r1, #240	; 0xf0
 80001bc:	4814      	ldr	r0, [pc, #80]	; (8000210 <MX_GPIO_Init+0xb4>)
 80001be:	f000 fe77 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2103      	movs	r1, #3
 80001c6:	4813      	ldr	r0, [pc, #76]	; (8000214 <MX_GPIO_Init+0xb8>)
 80001c8:	f000 fe72 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80001cc:	23f0      	movs	r3, #240	; 0xf0
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d0:	2301      	movs	r3, #1
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d8:	2302      	movs	r3, #2
 80001da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <MX_GPIO_Init+0xb4>)
 80001e4:	f000 fd0a 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80001e8:	2303      	movs	r3, #3
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <MX_GPIO_Init+0xb8>)
 8000200:	f000 fcfc 	bl	8000bfc <HAL_GPIO_Init>

}
 8000204:	bf00      	nop
 8000206:	3720      	adds	r7, #32
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000
 8000210:	40010800 	.word	0x40010800
 8000214:	40010c00 	.word	0x40010c00

08000218 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <DWT_Delay_Init+0x58>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a13      	ldr	r2, [pc, #76]	; (8000270 <DWT_Delay_Init+0x58>)
 8000222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000226:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <DWT_Delay_Init+0x58>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a10      	ldr	r2, [pc, #64]	; (8000270 <DWT_Delay_Init+0x58>)
 800022e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000232:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <DWT_Delay_Init+0x5c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <DWT_Delay_Init+0x5c>)
 800023a:	f023 0301 	bic.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <DWT_Delay_Init+0x5c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <DWT_Delay_Init+0x5c>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <DWT_Delay_Init+0x5c>)
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000252:	bf00      	nop
  __NOP();
 8000254:	bf00      	nop
  __NOP();
 8000256:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <DWT_Delay_Init+0x5c>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000260:	2300      	movs	r3, #0
 8000262:	e000      	b.n	8000266 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000264:	2301      	movs	r3, #1
  }
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000edf0 	.word	0xe000edf0
 8000274:	e0001000 	.word	0xe0001000

08000278 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <DWT_Delay_us+0x3c>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000286:	f001 f9f7 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 800028a:	4602      	mov	r2, r0
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <DWT_Delay_us+0x40>)
 800028e:	fba3 2302 	umull	r2, r3, r3, r2
 8000292:	0c9b      	lsrs	r3, r3, #18
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	fb02 f303 	mul.w	r3, r2, r3
 800029a:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 800029c:	bf00      	nop
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <DWT_Delay_us+0x3c>)
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	1ad2      	subs	r2, r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d3f8      	bcc.n	800029e <DWT_Delay_us+0x26>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	431bde83 	.word	0x431bde83

080002bc <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <lcd16x2_enablePulse+0x34>)
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <lcd16x2_enablePulse+0x38>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	f000 fdf0 	bl	8000eb0 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80002d0:	2014      	movs	r0, #20
 80002d2:	f7ff ffd1 	bl	8000278 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <lcd16x2_enablePulse+0x34>)
 80002d8:	6818      	ldr	r0, [r3, #0]
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <lcd16x2_enablePulse+0x38>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	2200      	movs	r2, #0
 80002e0:	4619      	mov	r1, r3
 80002e2:	f000 fde5 	bl	8000eb0 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80002e6:	203c      	movs	r0, #60	; 0x3c
 80002e8:	f7ff ffc6 	bl	8000278 <DWT_Delay_us>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000090 	.word	0x20000090
 80002f4:	20000096 	.word	0x20000096

080002f8 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <lcd16x2_rs+0x24>)
 8000304:	6818      	ldr	r0, [r3, #0]
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <lcd16x2_rs+0x28>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	f000 fdcf 	bl	8000eb0 <HAL_GPIO_WritePin>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000090 	.word	0x20000090
 8000320:	20000094 	.word	0x20000094

08000324 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 030f 	and.w	r3, r3, #15
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	091b      	lsrs	r3, r3, #4
 800033a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 800033c:	4b5f      	ldr	r3, [pc, #380]	; (80004bc <lcd16x2_write+0x198>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d05a      	beq.n	80003fa <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000344:	4b5e      	ldr	r3, [pc, #376]	; (80004c0 <lcd16x2_write+0x19c>)
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	4b5e      	ldr	r3, [pc, #376]	; (80004c4 <lcd16x2_write+0x1a0>)
 800034a:	8819      	ldrh	r1, [r3, #0]
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f000 fdab 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <lcd16x2_write+0x19c>)
 800035c:	6818      	ldr	r0, [r3, #0]
 800035e:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <lcd16x2_write+0x1a4>)
 8000360:	8819      	ldrh	r1, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f003 0302 	and.w	r3, r3, #2
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	f000 fda0 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000370:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <lcd16x2_write+0x19c>)
 8000372:	6818      	ldr	r0, [r3, #0]
 8000374:	4b55      	ldr	r3, [pc, #340]	; (80004cc <lcd16x2_write+0x1a8>)
 8000376:	8819      	ldrh	r1, [r3, #0]
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	f000 fd95 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000386:	4b4e      	ldr	r3, [pc, #312]	; (80004c0 <lcd16x2_write+0x19c>)
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	4b51      	ldr	r3, [pc, #324]	; (80004d0 <lcd16x2_write+0x1ac>)
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	f000 fd8a 	bl	8000eb0 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800039c:	4b4d      	ldr	r3, [pc, #308]	; (80004d4 <lcd16x2_write+0x1b0>)
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <lcd16x2_write+0x1b4>)
 80003a2:	8819      	ldrh	r1, [r3, #0]
 80003a4:	7bbb      	ldrb	r3, [r7, #14]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	f000 fd7f 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80003b2:	4b48      	ldr	r3, [pc, #288]	; (80004d4 <lcd16x2_write+0x1b0>)
 80003b4:	6818      	ldr	r0, [r3, #0]
 80003b6:	4b49      	ldr	r3, [pc, #292]	; (80004dc <lcd16x2_write+0x1b8>)
 80003b8:	8819      	ldrh	r1, [r3, #0]
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	f003 0302 	and.w	r3, r3, #2
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	f000 fd74 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80003c8:	4b42      	ldr	r3, [pc, #264]	; (80004d4 <lcd16x2_write+0x1b0>)
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	4b44      	ldr	r3, [pc, #272]	; (80004e0 <lcd16x2_write+0x1bc>)
 80003ce:	8819      	ldrh	r1, [r3, #0]
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	f000 fd69 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80003de:	4b3d      	ldr	r3, [pc, #244]	; (80004d4 <lcd16x2_write+0x1b0>)
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <lcd16x2_write+0x1c0>)
 80003e4:	8819      	ldrh	r1, [r3, #0]
 80003e6:	7bbb      	ldrb	r3, [r7, #14]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f000 fd5e 	bl	8000eb0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80003f4:	f7ff ff62 	bl	80002bc <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80003f8:	e05b      	b.n	80004b2 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <lcd16x2_write+0x1b0>)
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <lcd16x2_write+0x1b4>)
 8000400:	8819      	ldrh	r1, [r3, #0]
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	f000 fd50 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <lcd16x2_write+0x1b0>)
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <lcd16x2_write+0x1b8>)
 8000416:	8819      	ldrh	r1, [r3, #0]
 8000418:	7bbb      	ldrb	r3, [r7, #14]
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	f000 fd45 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000426:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <lcd16x2_write+0x1b0>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <lcd16x2_write+0x1bc>)
 800042c:	8819      	ldrh	r1, [r3, #0]
 800042e:	7bbb      	ldrb	r3, [r7, #14]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	f000 fd3a 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <lcd16x2_write+0x1b0>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <lcd16x2_write+0x1c0>)
 8000442:	8819      	ldrh	r1, [r3, #0]
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	f003 0308 	and.w	r3, r3, #8
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	f000 fd2f 	bl	8000eb0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000452:	f7ff ff33 	bl	80002bc <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <lcd16x2_write+0x1b0>)
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <lcd16x2_write+0x1b4>)
 800045c:	8819      	ldrh	r1, [r3, #0]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	f000 fd22 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <lcd16x2_write+0x1b0>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <lcd16x2_write+0x1b8>)
 8000472:	8819      	ldrh	r1, [r3, #0]
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	f000 fd17 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <lcd16x2_write+0x1b0>)
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <lcd16x2_write+0x1bc>)
 8000488:	8819      	ldrh	r1, [r3, #0]
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	f000 fd0c 	bl	8000eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <lcd16x2_write+0x1b0>)
 800049a:	6818      	ldr	r0, [r3, #0]
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <lcd16x2_write+0x1c0>)
 800049e:	8819      	ldrh	r1, [r3, #0]
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	f003 0308 	and.w	r3, r3, #8
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	461a      	mov	r2, r3
 80004aa:	f000 fd01 	bl	8000eb0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80004ae:	f7ff ff05 	bl	80002bc <lcd16x2_enablePulse>
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000098 	.word	0x20000098
 80004c4:	2000009c 	.word	0x2000009c
 80004c8:	2000009e 	.word	0x2000009e
 80004cc:	200000a0 	.word	0x200000a0
 80004d0:	200000a2 	.word	0x200000a2
 80004d4:	200000a4 	.word	0x200000a4
 80004d8:	200000a8 	.word	0x200000a8
 80004dc:	200000aa 	.word	0x200000aa
 80004e0:	200000ac 	.word	0x200000ac
 80004e4:	200000ae 	.word	0x200000ae

080004e8 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff ff00 	bl	80002f8 <lcd16x2_rs>
  lcd16x2_write(cmd);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff12 	bl	8000324 <lcd16x2_write>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fef0 	bl	80002f8 <lcd16x2_rs>
  lcd16x2_write(data);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff02 	bl	8000324 <lcd16x2_write>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f003 030f 	and.w	r3, r3, #15
 8000538:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff fedc 	bl	80002f8 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <lcd16x2_write4+0x7c>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <lcd16x2_write4+0x80>)
 8000546:	8819      	ldrh	r1, [r3, #0]
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f000 fcad 	bl	8000eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <lcd16x2_write4+0x7c>)
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <lcd16x2_write4+0x84>)
 800055c:	8819      	ldrh	r1, [r3, #0]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 0302 	and.w	r3, r3, #2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f000 fca2 	bl	8000eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <lcd16x2_write4+0x7c>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <lcd16x2_write4+0x88>)
 8000572:	8819      	ldrh	r1, [r3, #0]
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	f000 fc97 	bl	8000eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <lcd16x2_write4+0x7c>)
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <lcd16x2_write4+0x8c>)
 8000588:	8819      	ldrh	r1, [r3, #0]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f000 fc8c 	bl	8000eb0 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000598:	f7ff fe90 	bl	80002bc <lcd16x2_enablePulse>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	200000aa 	.word	0x200000aa
 80005b0:	200000ac 	.word	0x200000ac
 80005b4:	200000ae 	.word	0x200000ae

080005b8 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	817b      	strh	r3, [r7, #10]
 80005c6:	4613      	mov	r3, r2
 80005c8:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80005ca:	f7ff fe25 	bl	8000218 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <lcd16x2_init_4bits+0xa8>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80005d4:	4a23      	ldr	r2, [pc, #140]	; (8000664 <lcd16x2_init_4bits+0xac>)
 80005d6:	897b      	ldrh	r3, [r7, #10]
 80005d8:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <lcd16x2_init_4bits+0xb0>)
 80005dc:	893b      	ldrh	r3, [r7, #8]
 80005de:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <lcd16x2_init_4bits+0xb4>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80005e6:	4a22      	ldr	r2, [pc, #136]	; (8000670 <lcd16x2_init_4bits+0xb8>)
 80005e8:	8b3b      	ldrh	r3, [r7, #24]
 80005ea:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <lcd16x2_init_4bits+0xbc>)
 80005ee:	8bbb      	ldrh	r3, [r7, #28]
 80005f0:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <lcd16x2_init_4bits+0xc0>)
 80005f4:	8c3b      	ldrh	r3, [r7, #32]
 80005f6:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <lcd16x2_init_4bits+0xc4>)
 80005fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005fc:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <lcd16x2_init_4bits+0xc8>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <lcd16x2_init_4bits+0xcc>)
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800060a:	2014      	movs	r0, #20
 800060c:	f000 f9f0 	bl	80009f0 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000610:	2003      	movs	r0, #3
 8000612:	f7ff ff89 	bl	8000528 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000616:	2005      	movs	r0, #5
 8000618:	f000 f9ea 	bl	80009f0 <HAL_Delay>
  lcd16x2_write4(0x3);
 800061c:	2003      	movs	r0, #3
 800061e:	f7ff ff83 	bl	8000528 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f9e4 	bl	80009f0 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000628:	2003      	movs	r0, #3
 800062a:	f7ff ff7d 	bl	8000528 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 f9de 	bl	80009f0 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff ff77 	bl	8000528 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 f9d8 	bl	80009f0 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000640:	2028      	movs	r0, #40	; 0x28
 8000642:	f7ff ff51 	bl	80004e8 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000646:	200f      	movs	r0, #15
 8000648:	f7ff ff4e 	bl	80004e8 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff4b 	bl	80004e8 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 f9cc 	bl	80009f0 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000090 	.word	0x20000090
 8000664:	20000094 	.word	0x20000094
 8000668:	20000096 	.word	0x20000096
 800066c:	200000a4 	.word	0x200000a4
 8000670:	200000a8 	.word	0x200000a8
 8000674:	200000aa 	.word	0x200000aa
 8000678:	200000ac 	.word	0x200000ac
 800067c:	200000ae 	.word	0x200000ae
 8000680:	20000000 	.word	0x20000000
 8000684:	20000001 	.word	0x20000001

08000688 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8000688:	b40f      	push	{r0, r1, r2, r3}
 800068a:	b590      	push	{r4, r7, lr}
 800068c:	b089      	sub	sp, #36	; 0x24
 800068e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000694:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f85a 	bl	8001758 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	77fb      	strb	r3, [r7, #31]
 80006a8:	e00b      	b.n	80006c2 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	f107 0220 	add.w	r2, r7, #32
 80006b0:	4413      	add	r3, r2
 80006b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff26 	bl	8000508 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	3301      	adds	r3, #1
 80006c0:	77fb      	strb	r3, [r7, #31]
 80006c2:	7ffc      	ldrb	r4, [r7, #31]
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd3f 	bl	800014c <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	429c      	cmp	r4, r3
 80006d2:	d202      	bcs.n	80006da <lcd16x2_printf+0x52>
 80006d4:	7ffb      	ldrb	r3, [r7, #31]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d9e7      	bls.n	80006aa <lcd16x2_printf+0x22>
  }
}
 80006da:	bf00      	nop
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 f91d 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f81b 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f7ff fd31 	bl	800015c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	lcd16x2_init_4bits( GPIOB, RS_Pin, E_Pin,
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	9303      	str	r3, [sp, #12]
 80006fe:	2340      	movs	r3, #64	; 0x40
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2320      	movs	r3, #32
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2310      	movs	r3, #16
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <main+0x38>)
 800070c:	2202      	movs	r2, #2
 800070e:	2101      	movs	r1, #1
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <main+0x3c>)
 8000712:	f7ff ff51 	bl	80005b8 <lcd16x2_init_4bits>
						GPIOA, D4_Pin, D5_Pin, D6_Pin, D7_Pin);

	lcd16x2_printf("Hello world");
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <main+0x40>)
 8000718:	f7ff ffb6 	bl	8000688 <lcd16x2_printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800071c:	e7fe      	b.n	800071c <main+0x34>
 800071e:	bf00      	nop
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00
 8000728:	08001f68 	.word	0x08001f68

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	; 0x40
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f000 ffee 	bl	800171c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fbb3 	bl	8000ee0 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000780:	f000 f819 	bl	80007b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe1e 	bl	80013e0 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007aa:	f000 f804 	bl	80007b6 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3740      	adds	r7, #64	; 0x40
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_MspInit+0x5c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x5c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_MspInit+0x60>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_MspInit+0x60>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <HardFault_Handler+0x4>

0800083a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <BusFault_Handler+0x4>

08000846 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 f8a0 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <_sbrk>:
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x50>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x16>
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <_sbrk+0x50>)
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <_sbrk+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <_sbrk+0x50>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <_sbrk+0x50>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	466a      	mov	r2, sp
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d907      	bls.n	80008b6 <_sbrk+0x3a>
 80008a6:	f000 ff0f 	bl	80016c8 <__errno>
 80008aa:	4602      	mov	r2, r0
 80008ac:	230c      	movs	r3, #12
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b4:	e006      	b.n	80008c4 <_sbrk+0x48>
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <_sbrk+0x50>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a03      	ldr	r2, [pc, #12]	; (80008cc <_sbrk+0x50>)
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000b0 	.word	0x200000b0
 80008d0:	200000c8 	.word	0x200000c8

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008e2:	e003      	b.n	80008ec <LoopCopyDataInit>

080008e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ea:	3104      	adds	r1, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f4:	d3f6      	bcc.n	80008e4 <CopyDataInit>
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008f8:	e002      	b.n	8000900 <LoopFillZerobss>

080008fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008fc:	f842 3b04 	str.w	r3, [r2], #4

08000900 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000902:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000904:	d3f9      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000906:	f7ff ffe5 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f000 fee3 	bl	80016d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff feeb 	bl	80006e8 <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r3, =_sidata
 8000914:	08001fd4 	.word	0x08001fd4
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800091c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000920:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000924:	200000c4 	.word	0x200000c4

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f929 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff3c 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f933 	bl	8000be2 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 f909 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000004 	.word	0x20000004
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	200000bc 	.word	0x200000bc

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	200000bc 	.word	0x200000bc

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff0 	bl	80009dc <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_Delay+0x40>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffe0 	bl	80009dc <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	f7ff ff90 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff49 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff5e 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff90 	bl	8000aec <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5f 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb0 	bl	8000b50 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e127      	b.n	8000e60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c10:	2201      	movs	r2, #1
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8116 	bne.w	8000e5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d034      	beq.n	8000ca0 <HAL_GPIO_Init+0xa4>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d80d      	bhi.n	8000c56 <HAL_GPIO_Init+0x5a>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d02b      	beq.n	8000c96 <HAL_GPIO_Init+0x9a>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d804      	bhi.n	8000c4c <HAL_GPIO_Init+0x50>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d031      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d01c      	beq.n	8000c84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c4a:	e048      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d043      	beq.n	8000cd8 <HAL_GPIO_Init+0xdc>
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d01b      	beq.n	8000c8c <HAL_GPIO_Init+0x90>
          break;
 8000c54:	e043      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c56:	4a89      	ldr	r2, [pc, #548]	; (8000e7c <HAL_GPIO_Init+0x280>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d026      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c5c:	4a87      	ldr	r2, [pc, #540]	; (8000e7c <HAL_GPIO_Init+0x280>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d806      	bhi.n	8000c70 <HAL_GPIO_Init+0x74>
 8000c62:	4a87      	ldr	r2, [pc, #540]	; (8000e80 <HAL_GPIO_Init+0x284>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d020      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c68:	4a86      	ldr	r2, [pc, #536]	; (8000e84 <HAL_GPIO_Init+0x288>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d01d      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c6e:	e036      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c70:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <HAL_GPIO_Init+0x28c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d019      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c76:	4a85      	ldr	r2, [pc, #532]	; (8000e8c <HAL_GPIO_Init+0x290>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d016      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c7c:	4a84      	ldr	r2, [pc, #528]	; (8000e90 <HAL_GPIO_Init+0x294>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c82:	e02c      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e028      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	3304      	adds	r3, #4
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e023      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e01e      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e019      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e012      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d105      	bne.n	8000ccc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	611a      	str	r2, [r3, #16]
          break;
 8000cca:	e008      	b.n	8000cde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	615a      	str	r2, [r3, #20]
          break;
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	d801      	bhi.n	8000ce8 <HAL_GPIO_Init+0xec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	e001      	b.n	8000cec <HAL_GPIO_Init+0xf0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d802      	bhi.n	8000cfa <HAL_GPIO_Init+0xfe>
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	e002      	b.n	8000d00 <HAL_GPIO_Init+0x104>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	210f      	movs	r1, #15
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	6a39      	ldr	r1, [r7, #32]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 8096 	beq.w	8000e5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d46:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x29c>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_GPIO_Init+0x2a0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x19e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x2a4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x19a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2a8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x196>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2ac>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x192>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dac:	493a      	ldr	r1, [pc, #232]	; (8000e98 <HAL_GPIO_Init+0x29c>)
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4938      	ldr	r1, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4933      	ldr	r1, [pc, #204]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	492e      	ldr	r1, [pc, #184]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4929      	ldr	r1, [pc, #164]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	4924      	ldr	r1, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	491f      	ldr	r1, [pc, #124]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	491a      	ldr	r1, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60cb      	str	r3, [r1, #12]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4915      	ldr	r1, [pc, #84]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f47f aed0 	bne.w	8000c10 <HAL_GPIO_Init+0x14>
  }
}
 8000e70:	bf00      	nop
 8000e72:	372c      	adds	r7, #44	; 0x2c
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	10210000 	.word	0x10210000
 8000e80:	10110000 	.word	0x10110000
 8000e84:	10120000 	.word	0x10120000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10320000 	.word	0x10320000
 8000e90:	10220000 	.word	0x10220000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	611a      	str	r2, [r3, #16]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e26c      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8087 	beq.w	800100e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f00:	4b92      	ldr	r3, [pc, #584]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00c      	beq.n	8000f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0c:	4b8f      	ldr	r3, [pc, #572]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d112      	bne.n	8000f3e <HAL_RCC_OscConfig+0x5e>
 8000f18:	4b8c      	ldr	r3, [pc, #560]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d10b      	bne.n	8000f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	4b89      	ldr	r3, [pc, #548]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d06c      	beq.n	800100c <HAL_RCC_OscConfig+0x12c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d168      	bne.n	800100c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e246      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x76>
 8000f48:	4b80      	ldr	r3, [pc, #512]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a7f      	ldr	r2, [pc, #508]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e02e      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x98>
 8000f5e:	4b7b      	ldr	r3, [pc, #492]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7a      	ldr	r2, [pc, #488]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b78      	ldr	r3, [pc, #480]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a77      	ldr	r2, [pc, #476]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e01d      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0xbc>
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a71      	ldr	r2, [pc, #452]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b6f      	ldr	r3, [pc, #444]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6e      	ldr	r2, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f9c:	4b6b      	ldr	r3, [pc, #428]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a6a      	ldr	r2, [pc, #424]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b68      	ldr	r3, [pc, #416]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a67      	ldr	r2, [pc, #412]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fd0e 	bl	80009dc <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fd0a 	bl	80009dc <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e1fa      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe4>
 8000fe2:	e014      	b.n	800100e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fcfa 	bl	80009dc <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fcf6 	bl	80009dc <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1e6      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x10c>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d063      	beq.n	80010e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00b      	beq.n	800103e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001026:	4b49      	ldr	r3, [pc, #292]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b08      	cmp	r3, #8
 8001030:	d11c      	bne.n	800106c <HAL_RCC_OscConfig+0x18c>
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d116      	bne.n	800106c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x176>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e1ba      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4939      	ldr	r1, [pc, #228]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	e03a      	b.n	80010e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d020      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_RCC_OscConfig+0x270>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fcaf 	bl	80009dc <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fcab 	bl	80009dc <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e19b      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4927      	ldr	r1, [pc, #156]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_RCC_OscConfig+0x270>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc8e 	bl	80009dc <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc8a 	bl	80009dc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e17a      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03a      	beq.n	8001164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d019      	beq.n	800112a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_RCC_OscConfig+0x274>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fc6e 	bl	80009dc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fc6a 	bl	80009dc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e15a      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_RCC_OscConfig+0x26c>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fab2 	bl	800168c <RCC_Delay>
 8001128:	e01c      	b.n	8001164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_RCC_OscConfig+0x274>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc54 	bl	80009dc <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001136:	e00f      	b.n	8001158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fc50 	bl	80009dc <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d908      	bls.n	8001158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e140      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	42420000 	.word	0x42420000
 8001154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b9e      	ldr	r3, [pc, #632]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e9      	bne.n	8001138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a6 	beq.w	80012be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a93      	ldr	r2, [pc, #588]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b91      	ldr	r3, [pc, #580]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119a:	2301      	movs	r3, #1
 800119c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119e:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <HAL_RCC_OscConfig+0x4f8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d118      	bne.n	80011dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011aa:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <HAL_RCC_OscConfig+0x4f8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a8a      	ldr	r2, [pc, #552]	; (80013d8 <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fc11 	bl	80009dc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011be:	f7ff fc0d 	bl	80009dc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b64      	cmp	r3, #100	; 0x64
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0fd      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x4f8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x312>
 80011e4:	4b7b      	ldr	r3, [pc, #492]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a7a      	ldr	r2, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	e02d      	b.n	800124e <HAL_RCC_OscConfig+0x36e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x334>
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a75      	ldr	r2, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6213      	str	r3, [r2, #32]
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a72      	ldr	r2, [pc, #456]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	e01c      	b.n	800124e <HAL_RCC_OscConfig+0x36e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b05      	cmp	r3, #5
 800121a:	d10c      	bne.n	8001236 <HAL_RCC_OscConfig+0x356>
 800121c:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a6c      	ldr	r2, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a69      	ldr	r2, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	e00b      	b.n	800124e <HAL_RCC_OscConfig+0x36e>
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a66      	ldr	r2, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d015      	beq.n	8001282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fbc1 	bl	80009dc <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fbbd 	bl	80009dc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0ab      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0ee      	beq.n	800125e <HAL_RCC_OscConfig+0x37e>
 8001280:	e014      	b.n	80012ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fbab 	bl	80009dc <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff fba7 	bl	80009dc <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	4293      	cmp	r3, r2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e095      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ee      	bne.n	800128a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b2:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8081 	beq.w	80013ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d061      	beq.n	8001398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d146      	bne.n	800136a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012dc:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_OscConfig+0x4fc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb7b 	bl	80009dc <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fb77 	bl	80009dc <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e067      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d108      	bne.n	8001324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	492d      	ldr	r1, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a19      	ldr	r1, [r3, #32]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	430b      	orrs	r3, r1
 8001336:	4927      	ldr	r1, [pc, #156]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x4fc>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fb4b 	bl	80009dc <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134a:	f7ff fb47 	bl	80009dc <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e037      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x46a>
 8001368:	e02f      	b.n	80013ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_RCC_OscConfig+0x4fc>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fb34 	bl	80009dc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff fb30 	bl	80009dc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e020      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x498>
 8001396:	e018      	b.n	80013ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e013      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40007000 	.word	0x40007000
 80013dc:	42420060 	.word	0x42420060

080013e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0d0      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d910      	bls.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 0207 	bic.w	r2, r3, #7
 800140a:	4965      	ldr	r1, [pc, #404]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001446:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800145e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d040      	beq.n	8001500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d115      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e073      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e06b      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d0:	f7ff fa84 	bl	80009dc <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff fa80 	bl	80009dc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e053      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d210      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f821 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001572:	4601      	mov	r1, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	fa21 f303 	lsr.w	r3, r1, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1cc>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1d0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9e2 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08001f88 	.word	0x08001f88
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b490      	push	{r4, r7}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015bc:	1d3c      	adds	r4, r7, #4
 80015be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d002      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x40>
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x46>
 80015f2:	e02d      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f6:	623b      	str	r3, [r7, #32]
      break;
 80015f8:	e02d      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	0c9b      	lsrs	r3, r3, #18
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001606:	4413      	add	r3, r2
 8001608:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800160c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0c5b      	lsrs	r3, r3, #17
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001626:	4413      	add	r3, r2
 8001628:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800162c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	e004      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	623b      	str	r3, [r7, #32]
      break;
 800164e:	e002      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001652:	623b      	str	r3, [r7, #32]
      break;
 8001654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001656:	6a3b      	ldr	r3, [r7, #32]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bc90      	pop	{r4, r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	08001f74 	.word	0x08001f74
 8001668:	08001f84 	.word	0x08001f84
 800166c:	40021000 	.word	0x40021000
 8001670:	007a1200 	.word	0x007a1200
 8001674:	003d0900 	.word	0x003d0900

08001678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <HAL_RCC_GetHCLKFreq+0x10>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000004 	.word	0x20000004

0800168c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <RCC_Delay+0x34>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <RCC_Delay+0x38>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0a5b      	lsrs	r3, r3, #9
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a8:	bf00      	nop
  }
  while (Delay --);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	60fa      	str	r2, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <RCC_Delay+0x1c>
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000004 	.word	0x20000004
 80016c4:	10624dd3 	.word	0x10624dd3

080016c8 <__errno>:
 80016c8:	4b01      	ldr	r3, [pc, #4]	; (80016d0 <__errno+0x8>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000010 	.word	0x20000010

080016d4 <__libc_init_array>:
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	2500      	movs	r5, #0
 80016d8:	4e0c      	ldr	r6, [pc, #48]	; (800170c <__libc_init_array+0x38>)
 80016da:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <__libc_init_array+0x3c>)
 80016dc:	1ba4      	subs	r4, r4, r6
 80016de:	10a4      	asrs	r4, r4, #2
 80016e0:	42a5      	cmp	r5, r4
 80016e2:	d109      	bne.n	80016f8 <__libc_init_array+0x24>
 80016e4:	f000 fc34 	bl	8001f50 <_init>
 80016e8:	2500      	movs	r5, #0
 80016ea:	4e0a      	ldr	r6, [pc, #40]	; (8001714 <__libc_init_array+0x40>)
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <__libc_init_array+0x44>)
 80016ee:	1ba4      	subs	r4, r4, r6
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	42a5      	cmp	r5, r4
 80016f4:	d105      	bne.n	8001702 <__libc_init_array+0x2e>
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016fc:	4798      	blx	r3
 80016fe:	3501      	adds	r5, #1
 8001700:	e7ee      	b.n	80016e0 <__libc_init_array+0xc>
 8001702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001706:	4798      	blx	r3
 8001708:	3501      	adds	r5, #1
 800170a:	e7f2      	b.n	80016f2 <__libc_init_array+0x1e>
 800170c:	08001fcc 	.word	0x08001fcc
 8001710:	08001fcc 	.word	0x08001fcc
 8001714:	08001fcc 	.word	0x08001fcc
 8001718:	08001fd0 	.word	0x08001fd0

0800171c <memset>:
 800171c:	4603      	mov	r3, r0
 800171e:	4402      	add	r2, r0
 8001720:	4293      	cmp	r3, r2
 8001722:	d100      	bne.n	8001726 <memset+0xa>
 8001724:	4770      	bx	lr
 8001726:	f803 1b01 	strb.w	r1, [r3], #1
 800172a:	e7f9      	b.n	8001720 <memset+0x4>

0800172c <_vsiprintf_r>:
 800172c:	b500      	push	{lr}
 800172e:	b09b      	sub	sp, #108	; 0x6c
 8001730:	9100      	str	r1, [sp, #0]
 8001732:	9104      	str	r1, [sp, #16]
 8001734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001738:	9105      	str	r1, [sp, #20]
 800173a:	9102      	str	r1, [sp, #8]
 800173c:	4905      	ldr	r1, [pc, #20]	; (8001754 <_vsiprintf_r+0x28>)
 800173e:	9103      	str	r1, [sp, #12]
 8001740:	4669      	mov	r1, sp
 8001742:	f000 f86d 	bl	8001820 <_svfiprintf_r>
 8001746:	2200      	movs	r2, #0
 8001748:	9b00      	ldr	r3, [sp, #0]
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	b01b      	add	sp, #108	; 0x6c
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001752:	bf00      	nop
 8001754:	ffff0208 	.word	0xffff0208

08001758 <vsiprintf>:
 8001758:	4613      	mov	r3, r2
 800175a:	460a      	mov	r2, r1
 800175c:	4601      	mov	r1, r0
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <vsiprintf+0x10>)
 8001760:	6800      	ldr	r0, [r0, #0]
 8001762:	f7ff bfe3 	b.w	800172c <_vsiprintf_r>
 8001766:	bf00      	nop
 8001768:	20000010 	.word	0x20000010

0800176c <__ssputs_r>:
 800176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001770:	688e      	ldr	r6, [r1, #8]
 8001772:	4682      	mov	sl, r0
 8001774:	429e      	cmp	r6, r3
 8001776:	460c      	mov	r4, r1
 8001778:	4690      	mov	r8, r2
 800177a:	4699      	mov	r9, r3
 800177c:	d837      	bhi.n	80017ee <__ssputs_r+0x82>
 800177e:	898a      	ldrh	r2, [r1, #12]
 8001780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001784:	d031      	beq.n	80017ea <__ssputs_r+0x7e>
 8001786:	2302      	movs	r3, #2
 8001788:	6825      	ldr	r5, [r4, #0]
 800178a:	6909      	ldr	r1, [r1, #16]
 800178c:	1a6f      	subs	r7, r5, r1
 800178e:	6965      	ldr	r5, [r4, #20]
 8001790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001794:	fb95 f5f3 	sdiv	r5, r5, r3
 8001798:	f109 0301 	add.w	r3, r9, #1
 800179c:	443b      	add	r3, r7
 800179e:	429d      	cmp	r5, r3
 80017a0:	bf38      	it	cc
 80017a2:	461d      	movcc	r5, r3
 80017a4:	0553      	lsls	r3, r2, #21
 80017a6:	d530      	bpl.n	800180a <__ssputs_r+0x9e>
 80017a8:	4629      	mov	r1, r5
 80017aa:	f000 fb37 	bl	8001e1c <_malloc_r>
 80017ae:	4606      	mov	r6, r0
 80017b0:	b950      	cbnz	r0, 80017c8 <__ssputs_r+0x5c>
 80017b2:	230c      	movs	r3, #12
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b8:	f8ca 3000 	str.w	r3, [sl]
 80017bc:	89a3      	ldrh	r3, [r4, #12]
 80017be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c2:	81a3      	strh	r3, [r4, #12]
 80017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c8:	463a      	mov	r2, r7
 80017ca:	6921      	ldr	r1, [r4, #16]
 80017cc:	f000 fab6 	bl	8001d3c <memcpy>
 80017d0:	89a3      	ldrh	r3, [r4, #12]
 80017d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80017d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017da:	81a3      	strh	r3, [r4, #12]
 80017dc:	6126      	str	r6, [r4, #16]
 80017de:	443e      	add	r6, r7
 80017e0:	6026      	str	r6, [r4, #0]
 80017e2:	464e      	mov	r6, r9
 80017e4:	6165      	str	r5, [r4, #20]
 80017e6:	1bed      	subs	r5, r5, r7
 80017e8:	60a5      	str	r5, [r4, #8]
 80017ea:	454e      	cmp	r6, r9
 80017ec:	d900      	bls.n	80017f0 <__ssputs_r+0x84>
 80017ee:	464e      	mov	r6, r9
 80017f0:	4632      	mov	r2, r6
 80017f2:	4641      	mov	r1, r8
 80017f4:	6820      	ldr	r0, [r4, #0]
 80017f6:	f000 faac 	bl	8001d52 <memmove>
 80017fa:	68a3      	ldr	r3, [r4, #8]
 80017fc:	2000      	movs	r0, #0
 80017fe:	1b9b      	subs	r3, r3, r6
 8001800:	60a3      	str	r3, [r4, #8]
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	441e      	add	r6, r3
 8001806:	6026      	str	r6, [r4, #0]
 8001808:	e7dc      	b.n	80017c4 <__ssputs_r+0x58>
 800180a:	462a      	mov	r2, r5
 800180c:	f000 fb60 	bl	8001ed0 <_realloc_r>
 8001810:	4606      	mov	r6, r0
 8001812:	2800      	cmp	r0, #0
 8001814:	d1e2      	bne.n	80017dc <__ssputs_r+0x70>
 8001816:	6921      	ldr	r1, [r4, #16]
 8001818:	4650      	mov	r0, sl
 800181a:	f000 fab3 	bl	8001d84 <_free_r>
 800181e:	e7c8      	b.n	80017b2 <__ssputs_r+0x46>

08001820 <_svfiprintf_r>:
 8001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001824:	461d      	mov	r5, r3
 8001826:	898b      	ldrh	r3, [r1, #12]
 8001828:	b09d      	sub	sp, #116	; 0x74
 800182a:	061f      	lsls	r7, r3, #24
 800182c:	4680      	mov	r8, r0
 800182e:	460c      	mov	r4, r1
 8001830:	4616      	mov	r6, r2
 8001832:	d50f      	bpl.n	8001854 <_svfiprintf_r+0x34>
 8001834:	690b      	ldr	r3, [r1, #16]
 8001836:	b96b      	cbnz	r3, 8001854 <_svfiprintf_r+0x34>
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	f000 faef 	bl	8001e1c <_malloc_r>
 800183e:	6020      	str	r0, [r4, #0]
 8001840:	6120      	str	r0, [r4, #16]
 8001842:	b928      	cbnz	r0, 8001850 <_svfiprintf_r+0x30>
 8001844:	230c      	movs	r3, #12
 8001846:	f8c8 3000 	str.w	r3, [r8]
 800184a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184e:	e0c8      	b.n	80019e2 <_svfiprintf_r+0x1c2>
 8001850:	2340      	movs	r3, #64	; 0x40
 8001852:	6163      	str	r3, [r4, #20]
 8001854:	2300      	movs	r3, #0
 8001856:	9309      	str	r3, [sp, #36]	; 0x24
 8001858:	2320      	movs	r3, #32
 800185a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800185e:	2330      	movs	r3, #48	; 0x30
 8001860:	f04f 0b01 	mov.w	fp, #1
 8001864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001868:	9503      	str	r5, [sp, #12]
 800186a:	4637      	mov	r7, r6
 800186c:	463d      	mov	r5, r7
 800186e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001872:	b10b      	cbz	r3, 8001878 <_svfiprintf_r+0x58>
 8001874:	2b25      	cmp	r3, #37	; 0x25
 8001876:	d13e      	bne.n	80018f6 <_svfiprintf_r+0xd6>
 8001878:	ebb7 0a06 	subs.w	sl, r7, r6
 800187c:	d00b      	beq.n	8001896 <_svfiprintf_r+0x76>
 800187e:	4653      	mov	r3, sl
 8001880:	4632      	mov	r2, r6
 8001882:	4621      	mov	r1, r4
 8001884:	4640      	mov	r0, r8
 8001886:	f7ff ff71 	bl	800176c <__ssputs_r>
 800188a:	3001      	adds	r0, #1
 800188c:	f000 80a4 	beq.w	80019d8 <_svfiprintf_r+0x1b8>
 8001890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001892:	4453      	add	r3, sl
 8001894:	9309      	str	r3, [sp, #36]	; 0x24
 8001896:	783b      	ldrb	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 809d 	beq.w	80019d8 <_svfiprintf_r+0x1b8>
 800189e:	2300      	movs	r3, #0
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018a8:	9304      	str	r3, [sp, #16]
 80018aa:	9307      	str	r3, [sp, #28]
 80018ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018b0:	931a      	str	r3, [sp, #104]	; 0x68
 80018b2:	462f      	mov	r7, r5
 80018b4:	2205      	movs	r2, #5
 80018b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80018ba:	4850      	ldr	r0, [pc, #320]	; (80019fc <_svfiprintf_r+0x1dc>)
 80018bc:	f000 fa30 	bl	8001d20 <memchr>
 80018c0:	9b04      	ldr	r3, [sp, #16]
 80018c2:	b9d0      	cbnz	r0, 80018fa <_svfiprintf_r+0xda>
 80018c4:	06d9      	lsls	r1, r3, #27
 80018c6:	bf44      	itt	mi
 80018c8:	2220      	movmi	r2, #32
 80018ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018ce:	071a      	lsls	r2, r3, #28
 80018d0:	bf44      	itt	mi
 80018d2:	222b      	movmi	r2, #43	; 0x2b
 80018d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018d8:	782a      	ldrb	r2, [r5, #0]
 80018da:	2a2a      	cmp	r2, #42	; 0x2a
 80018dc:	d015      	beq.n	800190a <_svfiprintf_r+0xea>
 80018de:	462f      	mov	r7, r5
 80018e0:	2000      	movs	r0, #0
 80018e2:	250a      	movs	r5, #10
 80018e4:	9a07      	ldr	r2, [sp, #28]
 80018e6:	4639      	mov	r1, r7
 80018e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018ec:	3b30      	subs	r3, #48	; 0x30
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	d94d      	bls.n	800198e <_svfiprintf_r+0x16e>
 80018f2:	b1b8      	cbz	r0, 8001924 <_svfiprintf_r+0x104>
 80018f4:	e00f      	b.n	8001916 <_svfiprintf_r+0xf6>
 80018f6:	462f      	mov	r7, r5
 80018f8:	e7b8      	b.n	800186c <_svfiprintf_r+0x4c>
 80018fa:	4a40      	ldr	r2, [pc, #256]	; (80019fc <_svfiprintf_r+0x1dc>)
 80018fc:	463d      	mov	r5, r7
 80018fe:	1a80      	subs	r0, r0, r2
 8001900:	fa0b f000 	lsl.w	r0, fp, r0
 8001904:	4318      	orrs	r0, r3
 8001906:	9004      	str	r0, [sp, #16]
 8001908:	e7d3      	b.n	80018b2 <_svfiprintf_r+0x92>
 800190a:	9a03      	ldr	r2, [sp, #12]
 800190c:	1d11      	adds	r1, r2, #4
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	2a00      	cmp	r2, #0
 8001914:	db01      	blt.n	800191a <_svfiprintf_r+0xfa>
 8001916:	9207      	str	r2, [sp, #28]
 8001918:	e004      	b.n	8001924 <_svfiprintf_r+0x104>
 800191a:	4252      	negs	r2, r2
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	9207      	str	r2, [sp, #28]
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	783b      	ldrb	r3, [r7, #0]
 8001926:	2b2e      	cmp	r3, #46	; 0x2e
 8001928:	d10c      	bne.n	8001944 <_svfiprintf_r+0x124>
 800192a:	787b      	ldrb	r3, [r7, #1]
 800192c:	2b2a      	cmp	r3, #42	; 0x2a
 800192e:	d133      	bne.n	8001998 <_svfiprintf_r+0x178>
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	3702      	adds	r7, #2
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	9203      	str	r2, [sp, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001942:	9305      	str	r3, [sp, #20]
 8001944:	4d2e      	ldr	r5, [pc, #184]	; (8001a00 <_svfiprintf_r+0x1e0>)
 8001946:	2203      	movs	r2, #3
 8001948:	7839      	ldrb	r1, [r7, #0]
 800194a:	4628      	mov	r0, r5
 800194c:	f000 f9e8 	bl	8001d20 <memchr>
 8001950:	b138      	cbz	r0, 8001962 <_svfiprintf_r+0x142>
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	fa03 f000 	lsl.w	r0, r3, r0
 800195a:	9b04      	ldr	r3, [sp, #16]
 800195c:	3701      	adds	r7, #1
 800195e:	4303      	orrs	r3, r0
 8001960:	9304      	str	r3, [sp, #16]
 8001962:	7839      	ldrb	r1, [r7, #0]
 8001964:	2206      	movs	r2, #6
 8001966:	4827      	ldr	r0, [pc, #156]	; (8001a04 <_svfiprintf_r+0x1e4>)
 8001968:	1c7e      	adds	r6, r7, #1
 800196a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800196e:	f000 f9d7 	bl	8001d20 <memchr>
 8001972:	2800      	cmp	r0, #0
 8001974:	d038      	beq.n	80019e8 <_svfiprintf_r+0x1c8>
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <_svfiprintf_r+0x1e8>)
 8001978:	bb13      	cbnz	r3, 80019c0 <_svfiprintf_r+0x1a0>
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	3307      	adds	r3, #7
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	3308      	adds	r3, #8
 8001984:	9303      	str	r3, [sp, #12]
 8001986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001988:	444b      	add	r3, r9
 800198a:	9309      	str	r3, [sp, #36]	; 0x24
 800198c:	e76d      	b.n	800186a <_svfiprintf_r+0x4a>
 800198e:	fb05 3202 	mla	r2, r5, r2, r3
 8001992:	2001      	movs	r0, #1
 8001994:	460f      	mov	r7, r1
 8001996:	e7a6      	b.n	80018e6 <_svfiprintf_r+0xc6>
 8001998:	2300      	movs	r3, #0
 800199a:	250a      	movs	r5, #10
 800199c:	4619      	mov	r1, r3
 800199e:	3701      	adds	r7, #1
 80019a0:	9305      	str	r3, [sp, #20]
 80019a2:	4638      	mov	r0, r7
 80019a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019a8:	3a30      	subs	r2, #48	; 0x30
 80019aa:	2a09      	cmp	r2, #9
 80019ac:	d903      	bls.n	80019b6 <_svfiprintf_r+0x196>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0c8      	beq.n	8001944 <_svfiprintf_r+0x124>
 80019b2:	9105      	str	r1, [sp, #20]
 80019b4:	e7c6      	b.n	8001944 <_svfiprintf_r+0x124>
 80019b6:	fb05 2101 	mla	r1, r5, r1, r2
 80019ba:	2301      	movs	r3, #1
 80019bc:	4607      	mov	r7, r0
 80019be:	e7f0      	b.n	80019a2 <_svfiprintf_r+0x182>
 80019c0:	ab03      	add	r3, sp, #12
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4622      	mov	r2, r4
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_svfiprintf_r+0x1ec>)
 80019c8:	a904      	add	r1, sp, #16
 80019ca:	4640      	mov	r0, r8
 80019cc:	f3af 8000 	nop.w
 80019d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80019d4:	4681      	mov	r9, r0
 80019d6:	d1d6      	bne.n	8001986 <_svfiprintf_r+0x166>
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	065b      	lsls	r3, r3, #25
 80019dc:	f53f af35 	bmi.w	800184a <_svfiprintf_r+0x2a>
 80019e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019e2:	b01d      	add	sp, #116	; 0x74
 80019e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e8:	ab03      	add	r3, sp, #12
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4622      	mov	r2, r4
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_svfiprintf_r+0x1ec>)
 80019f0:	a904      	add	r1, sp, #16
 80019f2:	4640      	mov	r0, r8
 80019f4:	f000 f882 	bl	8001afc <_printf_i>
 80019f8:	e7ea      	b.n	80019d0 <_svfiprintf_r+0x1b0>
 80019fa:	bf00      	nop
 80019fc:	08001f98 	.word	0x08001f98
 8001a00:	08001f9e 	.word	0x08001f9e
 8001a04:	08001fa2 	.word	0x08001fa2
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	0800176d 	.word	0x0800176d

08001a10 <_printf_common>:
 8001a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a14:	4691      	mov	r9, r2
 8001a16:	461f      	mov	r7, r3
 8001a18:	688a      	ldr	r2, [r1, #8]
 8001a1a:	690b      	ldr	r3, [r1, #16]
 8001a1c:	4606      	mov	r6, r0
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	bfb8      	it	lt
 8001a22:	4613      	movlt	r3, r2
 8001a24:	f8c9 3000 	str.w	r3, [r9]
 8001a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a32:	b112      	cbz	r2, 8001a3a <_printf_common+0x2a>
 8001a34:	3301      	adds	r3, #1
 8001a36:	f8c9 3000 	str.w	r3, [r9]
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	0699      	lsls	r1, r3, #26
 8001a3e:	bf42      	ittt	mi
 8001a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a44:	3302      	addmi	r3, #2
 8001a46:	f8c9 3000 	strmi.w	r3, [r9]
 8001a4a:	6825      	ldr	r5, [r4, #0]
 8001a4c:	f015 0506 	ands.w	r5, r5, #6
 8001a50:	d107      	bne.n	8001a62 <_printf_common+0x52>
 8001a52:	f104 0a19 	add.w	sl, r4, #25
 8001a56:	68e3      	ldr	r3, [r4, #12]
 8001a58:	f8d9 2000 	ldr.w	r2, [r9]
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	42ab      	cmp	r3, r5
 8001a60:	dc29      	bgt.n	8001ab6 <_printf_common+0xa6>
 8001a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	3300      	adds	r3, #0
 8001a6a:	bf18      	it	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	0692      	lsls	r2, r2, #26
 8001a70:	d42e      	bmi.n	8001ad0 <_printf_common+0xc0>
 8001a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a76:	4639      	mov	r1, r7
 8001a78:	4630      	mov	r0, r6
 8001a7a:	47c0      	blx	r8
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d021      	beq.n	8001ac4 <_printf_common+0xb4>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	68e5      	ldr	r5, [r4, #12]
 8001a84:	f003 0306 	and.w	r3, r3, #6
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	bf18      	it	ne
 8001a8c:	2500      	movne	r5, #0
 8001a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8001a92:	f04f 0900 	mov.w	r9, #0
 8001a96:	bf08      	it	eq
 8001a98:	1aad      	subeq	r5, r5, r2
 8001a9a:	68a3      	ldr	r3, [r4, #8]
 8001a9c:	6922      	ldr	r2, [r4, #16]
 8001a9e:	bf08      	it	eq
 8001aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bfc4      	itt	gt
 8001aa8:	1a9b      	subgt	r3, r3, r2
 8001aaa:	18ed      	addgt	r5, r5, r3
 8001aac:	341a      	adds	r4, #26
 8001aae:	454d      	cmp	r5, r9
 8001ab0:	d11a      	bne.n	8001ae8 <_printf_common+0xd8>
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	e008      	b.n	8001ac8 <_printf_common+0xb8>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4652      	mov	r2, sl
 8001aba:	4639      	mov	r1, r7
 8001abc:	4630      	mov	r0, r6
 8001abe:	47c0      	blx	r8
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d103      	bne.n	8001acc <_printf_common+0xbc>
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001acc:	3501      	adds	r5, #1
 8001ace:	e7c2      	b.n	8001a56 <_printf_common+0x46>
 8001ad0:	2030      	movs	r0, #48	; 0x30
 8001ad2:	18e1      	adds	r1, r4, r3
 8001ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ade:	4422      	add	r2, r4
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ae6:	e7c4      	b.n	8001a72 <_printf_common+0x62>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	4622      	mov	r2, r4
 8001aec:	4639      	mov	r1, r7
 8001aee:	4630      	mov	r0, r6
 8001af0:	47c0      	blx	r8
 8001af2:	3001      	adds	r0, #1
 8001af4:	d0e6      	beq.n	8001ac4 <_printf_common+0xb4>
 8001af6:	f109 0901 	add.w	r9, r9, #1
 8001afa:	e7d8      	b.n	8001aae <_printf_common+0x9e>

08001afc <_printf_i>:
 8001afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b04:	460c      	mov	r4, r1
 8001b06:	7e09      	ldrb	r1, [r1, #24]
 8001b08:	b085      	sub	sp, #20
 8001b0a:	296e      	cmp	r1, #110	; 0x6e
 8001b0c:	4617      	mov	r7, r2
 8001b0e:	4606      	mov	r6, r0
 8001b10:	4698      	mov	r8, r3
 8001b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b14:	f000 80b3 	beq.w	8001c7e <_printf_i+0x182>
 8001b18:	d822      	bhi.n	8001b60 <_printf_i+0x64>
 8001b1a:	2963      	cmp	r1, #99	; 0x63
 8001b1c:	d036      	beq.n	8001b8c <_printf_i+0x90>
 8001b1e:	d80a      	bhi.n	8001b36 <_printf_i+0x3a>
 8001b20:	2900      	cmp	r1, #0
 8001b22:	f000 80b9 	beq.w	8001c98 <_printf_i+0x19c>
 8001b26:	2958      	cmp	r1, #88	; 0x58
 8001b28:	f000 8083 	beq.w	8001c32 <_printf_i+0x136>
 8001b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b34:	e032      	b.n	8001b9c <_printf_i+0xa0>
 8001b36:	2964      	cmp	r1, #100	; 0x64
 8001b38:	d001      	beq.n	8001b3e <_printf_i+0x42>
 8001b3a:	2969      	cmp	r1, #105	; 0x69
 8001b3c:	d1f6      	bne.n	8001b2c <_printf_i+0x30>
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	0605      	lsls	r5, r0, #24
 8001b44:	f103 0104 	add.w	r1, r3, #4
 8001b48:	d52a      	bpl.n	8001ba0 <_printf_i+0xa4>
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da03      	bge.n	8001b5a <_printf_i+0x5e>
 8001b52:	222d      	movs	r2, #45	; 0x2d
 8001b54:	425b      	negs	r3, r3
 8001b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b5a:	486f      	ldr	r0, [pc, #444]	; (8001d18 <_printf_i+0x21c>)
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	e039      	b.n	8001bd4 <_printf_i+0xd8>
 8001b60:	2973      	cmp	r1, #115	; 0x73
 8001b62:	f000 809d 	beq.w	8001ca0 <_printf_i+0x1a4>
 8001b66:	d808      	bhi.n	8001b7a <_printf_i+0x7e>
 8001b68:	296f      	cmp	r1, #111	; 0x6f
 8001b6a:	d020      	beq.n	8001bae <_printf_i+0xb2>
 8001b6c:	2970      	cmp	r1, #112	; 0x70
 8001b6e:	d1dd      	bne.n	8001b2c <_printf_i+0x30>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f043 0320 	orr.w	r3, r3, #32
 8001b76:	6023      	str	r3, [r4, #0]
 8001b78:	e003      	b.n	8001b82 <_printf_i+0x86>
 8001b7a:	2975      	cmp	r1, #117	; 0x75
 8001b7c:	d017      	beq.n	8001bae <_printf_i+0xb2>
 8001b7e:	2978      	cmp	r1, #120	; 0x78
 8001b80:	d1d4      	bne.n	8001b2c <_printf_i+0x30>
 8001b82:	2378      	movs	r3, #120	; 0x78
 8001b84:	4865      	ldr	r0, [pc, #404]	; (8001d1c <_printf_i+0x220>)
 8001b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b8a:	e055      	b.n	8001c38 <_printf_i+0x13c>
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b92:	1d19      	adds	r1, r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6011      	str	r1, [r2, #0]
 8001b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e08c      	b.n	8001cba <_printf_i+0x1be>
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	bf18      	it	ne
 8001baa:	b21b      	sxthne	r3, r3
 8001bac:	e7cf      	b.n	8001b4e <_printf_i+0x52>
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	6825      	ldr	r5, [r4, #0]
 8001bb2:	1d18      	adds	r0, r3, #4
 8001bb4:	6010      	str	r0, [r2, #0]
 8001bb6:	0628      	lsls	r0, r5, #24
 8001bb8:	d501      	bpl.n	8001bbe <_printf_i+0xc2>
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e002      	b.n	8001bc4 <_printf_i+0xc8>
 8001bbe:	0668      	lsls	r0, r5, #25
 8001bc0:	d5fb      	bpl.n	8001bba <_printf_i+0xbe>
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	296f      	cmp	r1, #111	; 0x6f
 8001bc6:	bf14      	ite	ne
 8001bc8:	220a      	movne	r2, #10
 8001bca:	2208      	moveq	r2, #8
 8001bcc:	4852      	ldr	r0, [pc, #328]	; (8001d18 <_printf_i+0x21c>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bd4:	6865      	ldr	r5, [r4, #4]
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	60a5      	str	r5, [r4, #8]
 8001bda:	f2c0 8095 	blt.w	8001d08 <_printf_i+0x20c>
 8001bde:	6821      	ldr	r1, [r4, #0]
 8001be0:	f021 0104 	bic.w	r1, r1, #4
 8001be4:	6021      	str	r1, [r4, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d13d      	bne.n	8001c66 <_printf_i+0x16a>
 8001bea:	2d00      	cmp	r5, #0
 8001bec:	f040 808e 	bne.w	8001d0c <_printf_i+0x210>
 8001bf0:	4665      	mov	r5, ip
 8001bf2:	2a08      	cmp	r2, #8
 8001bf4:	d10b      	bne.n	8001c0e <_printf_i+0x112>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	07db      	lsls	r3, r3, #31
 8001bfa:	d508      	bpl.n	8001c0e <_printf_i+0x112>
 8001bfc:	6923      	ldr	r3, [r4, #16]
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	bfde      	ittt	le
 8001c04:	2330      	movle	r3, #48	; 0x30
 8001c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001c0e:	ebac 0305 	sub.w	r3, ip, r5
 8001c12:	6123      	str	r3, [r4, #16]
 8001c14:	f8cd 8000 	str.w	r8, [sp]
 8001c18:	463b      	mov	r3, r7
 8001c1a:	aa03      	add	r2, sp, #12
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff fef6 	bl	8001a10 <_printf_common>
 8001c24:	3001      	adds	r0, #1
 8001c26:	d14d      	bne.n	8001cc4 <_printf_i+0x1c8>
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2c:	b005      	add	sp, #20
 8001c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c32:	4839      	ldr	r0, [pc, #228]	; (8001d18 <_printf_i+0x21c>)
 8001c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	6821      	ldr	r1, [r4, #0]
 8001c3c:	1d1d      	adds	r5, r3, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6015      	str	r5, [r2, #0]
 8001c42:	060a      	lsls	r2, r1, #24
 8001c44:	d50b      	bpl.n	8001c5e <_printf_i+0x162>
 8001c46:	07ca      	lsls	r2, r1, #31
 8001c48:	bf44      	itt	mi
 8001c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8001c4e:	6021      	strmi	r1, [r4, #0]
 8001c50:	b91b      	cbnz	r3, 8001c5a <_printf_i+0x15e>
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	f022 0220 	bic.w	r2, r2, #32
 8001c58:	6022      	str	r2, [r4, #0]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	e7b7      	b.n	8001bce <_printf_i+0xd2>
 8001c5e:	064d      	lsls	r5, r1, #25
 8001c60:	bf48      	it	mi
 8001c62:	b29b      	uxthmi	r3, r3
 8001c64:	e7ef      	b.n	8001c46 <_printf_i+0x14a>
 8001c66:	4665      	mov	r5, ip
 8001c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8001c70:	5cc3      	ldrb	r3, [r0, r3]
 8001c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c76:	460b      	mov	r3, r1
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d1f5      	bne.n	8001c68 <_printf_i+0x16c>
 8001c7c:	e7b9      	b.n	8001bf2 <_printf_i+0xf6>
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	6825      	ldr	r5, [r4, #0]
 8001c82:	1d18      	adds	r0, r3, #4
 8001c84:	6961      	ldr	r1, [r4, #20]
 8001c86:	6010      	str	r0, [r2, #0]
 8001c88:	0628      	lsls	r0, r5, #24
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	d501      	bpl.n	8001c92 <_printf_i+0x196>
 8001c8e:	6019      	str	r1, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <_printf_i+0x19c>
 8001c92:	066a      	lsls	r2, r5, #25
 8001c94:	d5fb      	bpl.n	8001c8e <_printf_i+0x192>
 8001c96:	8019      	strh	r1, [r3, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4665      	mov	r5, ip
 8001c9c:	6123      	str	r3, [r4, #16]
 8001c9e:	e7b9      	b.n	8001c14 <_printf_i+0x118>
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	1d19      	adds	r1, r3, #4
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	681d      	ldr	r5, [r3, #0]
 8001ca8:	6862      	ldr	r2, [r4, #4]
 8001caa:	2100      	movs	r1, #0
 8001cac:	4628      	mov	r0, r5
 8001cae:	f000 f837 	bl	8001d20 <memchr>
 8001cb2:	b108      	cbz	r0, 8001cb8 <_printf_i+0x1bc>
 8001cb4:	1b40      	subs	r0, r0, r5
 8001cb6:	6060      	str	r0, [r4, #4]
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	6123      	str	r3, [r4, #16]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cc2:	e7a7      	b.n	8001c14 <_printf_i+0x118>
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	4639      	mov	r1, r7
 8001cca:	4630      	mov	r0, r6
 8001ccc:	47c0      	blx	r8
 8001cce:	3001      	adds	r0, #1
 8001cd0:	d0aa      	beq.n	8001c28 <_printf_i+0x12c>
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	079b      	lsls	r3, r3, #30
 8001cd6:	d413      	bmi.n	8001d00 <_printf_i+0x204>
 8001cd8:	68e0      	ldr	r0, [r4, #12]
 8001cda:	9b03      	ldr	r3, [sp, #12]
 8001cdc:	4298      	cmp	r0, r3
 8001cde:	bfb8      	it	lt
 8001ce0:	4618      	movlt	r0, r3
 8001ce2:	e7a3      	b.n	8001c2c <_printf_i+0x130>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	464a      	mov	r2, r9
 8001ce8:	4639      	mov	r1, r7
 8001cea:	4630      	mov	r0, r6
 8001cec:	47c0      	blx	r8
 8001cee:	3001      	adds	r0, #1
 8001cf0:	d09a      	beq.n	8001c28 <_printf_i+0x12c>
 8001cf2:	3501      	adds	r5, #1
 8001cf4:	68e3      	ldr	r3, [r4, #12]
 8001cf6:	9a03      	ldr	r2, [sp, #12]
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	42ab      	cmp	r3, r5
 8001cfc:	dcf2      	bgt.n	8001ce4 <_printf_i+0x1e8>
 8001cfe:	e7eb      	b.n	8001cd8 <_printf_i+0x1dc>
 8001d00:	2500      	movs	r5, #0
 8001d02:	f104 0919 	add.w	r9, r4, #25
 8001d06:	e7f5      	b.n	8001cf4 <_printf_i+0x1f8>
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ac      	bne.n	8001c66 <_printf_i+0x16a>
 8001d0c:	7803      	ldrb	r3, [r0, #0]
 8001d0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d16:	e76c      	b.n	8001bf2 <_printf_i+0xf6>
 8001d18:	08001fa9 	.word	0x08001fa9
 8001d1c:	08001fba 	.word	0x08001fba

08001d20 <memchr>:
 8001d20:	b510      	push	{r4, lr}
 8001d22:	b2c9      	uxtb	r1, r1
 8001d24:	4402      	add	r2, r0
 8001d26:	4290      	cmp	r0, r2
 8001d28:	4603      	mov	r3, r0
 8001d2a:	d101      	bne.n	8001d30 <memchr+0x10>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e003      	b.n	8001d38 <memchr+0x18>
 8001d30:	781c      	ldrb	r4, [r3, #0]
 8001d32:	3001      	adds	r0, #1
 8001d34:	428c      	cmp	r4, r1
 8001d36:	d1f6      	bne.n	8001d26 <memchr+0x6>
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <memcpy>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	1e43      	subs	r3, r0, #1
 8001d40:	440a      	add	r2, r1
 8001d42:	4291      	cmp	r1, r2
 8001d44:	d100      	bne.n	8001d48 <memcpy+0xc>
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d50:	e7f7      	b.n	8001d42 <memcpy+0x6>

08001d52 <memmove>:
 8001d52:	4288      	cmp	r0, r1
 8001d54:	b510      	push	{r4, lr}
 8001d56:	eb01 0302 	add.w	r3, r1, r2
 8001d5a:	d807      	bhi.n	8001d6c <memmove+0x1a>
 8001d5c:	1e42      	subs	r2, r0, #1
 8001d5e:	4299      	cmp	r1, r3
 8001d60:	d00a      	beq.n	8001d78 <memmove+0x26>
 8001d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001d6a:	e7f8      	b.n	8001d5e <memmove+0xc>
 8001d6c:	4283      	cmp	r3, r0
 8001d6e:	d9f5      	bls.n	8001d5c <memmove+0xa>
 8001d70:	1881      	adds	r1, r0, r2
 8001d72:	1ad2      	subs	r2, r2, r3
 8001d74:	42d3      	cmn	r3, r2
 8001d76:	d100      	bne.n	8001d7a <memmove+0x28>
 8001d78:	bd10      	pop	{r4, pc}
 8001d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001d82:	e7f7      	b.n	8001d74 <memmove+0x22>

08001d84 <_free_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4605      	mov	r5, r0
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	d043      	beq.n	8001e14 <_free_r+0x90>
 8001d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d90:	1f0c      	subs	r4, r1, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bfb8      	it	lt
 8001d96:	18e4      	addlt	r4, r4, r3
 8001d98:	f000 f8d0 	bl	8001f3c <__malloc_lock>
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <_free_r+0x94>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	4610      	mov	r0, r2
 8001da2:	b933      	cbnz	r3, 8001db2 <_free_r+0x2e>
 8001da4:	6063      	str	r3, [r4, #4]
 8001da6:	6014      	str	r4, [r2, #0]
 8001da8:	4628      	mov	r0, r5
 8001daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dae:	f000 b8c6 	b.w	8001f3e <__malloc_unlock>
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	d90b      	bls.n	8001dce <_free_r+0x4a>
 8001db6:	6821      	ldr	r1, [r4, #0]
 8001db8:	1862      	adds	r2, r4, r1
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	bf01      	itttt	eq
 8001dbe:	681a      	ldreq	r2, [r3, #0]
 8001dc0:	685b      	ldreq	r3, [r3, #4]
 8001dc2:	1852      	addeq	r2, r2, r1
 8001dc4:	6022      	streq	r2, [r4, #0]
 8001dc6:	6063      	str	r3, [r4, #4]
 8001dc8:	6004      	str	r4, [r0, #0]
 8001dca:	e7ed      	b.n	8001da8 <_free_r+0x24>
 8001dcc:	4613      	mov	r3, r2
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	b10a      	cbz	r2, 8001dd6 <_free_r+0x52>
 8001dd2:	42a2      	cmp	r2, r4
 8001dd4:	d9fa      	bls.n	8001dcc <_free_r+0x48>
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	1858      	adds	r0, r3, r1
 8001dda:	42a0      	cmp	r0, r4
 8001ddc:	d10b      	bne.n	8001df6 <_free_r+0x72>
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	4401      	add	r1, r0
 8001de2:	1858      	adds	r0, r3, r1
 8001de4:	4282      	cmp	r2, r0
 8001de6:	6019      	str	r1, [r3, #0]
 8001de8:	d1de      	bne.n	8001da8 <_free_r+0x24>
 8001dea:	6810      	ldr	r0, [r2, #0]
 8001dec:	6852      	ldr	r2, [r2, #4]
 8001dee:	4401      	add	r1, r0
 8001df0:	6019      	str	r1, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	e7d8      	b.n	8001da8 <_free_r+0x24>
 8001df6:	d902      	bls.n	8001dfe <_free_r+0x7a>
 8001df8:	230c      	movs	r3, #12
 8001dfa:	602b      	str	r3, [r5, #0]
 8001dfc:	e7d4      	b.n	8001da8 <_free_r+0x24>
 8001dfe:	6820      	ldr	r0, [r4, #0]
 8001e00:	1821      	adds	r1, r4, r0
 8001e02:	428a      	cmp	r2, r1
 8001e04:	bf01      	itttt	eq
 8001e06:	6811      	ldreq	r1, [r2, #0]
 8001e08:	6852      	ldreq	r2, [r2, #4]
 8001e0a:	1809      	addeq	r1, r1, r0
 8001e0c:	6021      	streq	r1, [r4, #0]
 8001e0e:	6062      	str	r2, [r4, #4]
 8001e10:	605c      	str	r4, [r3, #4]
 8001e12:	e7c9      	b.n	8001da8 <_free_r+0x24>
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	200000b4 	.word	0x200000b4

08001e1c <_malloc_r>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	1ccd      	adds	r5, r1, #3
 8001e20:	f025 0503 	bic.w	r5, r5, #3
 8001e24:	3508      	adds	r5, #8
 8001e26:	2d0c      	cmp	r5, #12
 8001e28:	bf38      	it	cc
 8001e2a:	250c      	movcc	r5, #12
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	4606      	mov	r6, r0
 8001e30:	db01      	blt.n	8001e36 <_malloc_r+0x1a>
 8001e32:	42a9      	cmp	r1, r5
 8001e34:	d903      	bls.n	8001e3e <_malloc_r+0x22>
 8001e36:	230c      	movs	r3, #12
 8001e38:	6033      	str	r3, [r6, #0]
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
 8001e3e:	f000 f87d 	bl	8001f3c <__malloc_lock>
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <_malloc_r+0xac>)
 8001e44:	6814      	ldr	r4, [r2, #0]
 8001e46:	4621      	mov	r1, r4
 8001e48:	b991      	cbnz	r1, 8001e70 <_malloc_r+0x54>
 8001e4a:	4c20      	ldr	r4, [pc, #128]	; (8001ecc <_malloc_r+0xb0>)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	b91b      	cbnz	r3, 8001e58 <_malloc_r+0x3c>
 8001e50:	4630      	mov	r0, r6
 8001e52:	f000 f863 	bl	8001f1c <_sbrk_r>
 8001e56:	6020      	str	r0, [r4, #0]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f000 f85e 	bl	8001f1c <_sbrk_r>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d124      	bne.n	8001eae <_malloc_r+0x92>
 8001e64:	230c      	movs	r3, #12
 8001e66:	4630      	mov	r0, r6
 8001e68:	6033      	str	r3, [r6, #0]
 8001e6a:	f000 f868 	bl	8001f3e <__malloc_unlock>
 8001e6e:	e7e4      	b.n	8001e3a <_malloc_r+0x1e>
 8001e70:	680b      	ldr	r3, [r1, #0]
 8001e72:	1b5b      	subs	r3, r3, r5
 8001e74:	d418      	bmi.n	8001ea8 <_malloc_r+0x8c>
 8001e76:	2b0b      	cmp	r3, #11
 8001e78:	d90f      	bls.n	8001e9a <_malloc_r+0x7e>
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	18cc      	adds	r4, r1, r3
 8001e7e:	50cd      	str	r5, [r1, r3]
 8001e80:	4630      	mov	r0, r6
 8001e82:	f000 f85c 	bl	8001f3e <__malloc_unlock>
 8001e86:	f104 000b 	add.w	r0, r4, #11
 8001e8a:	1d23      	adds	r3, r4, #4
 8001e8c:	f020 0007 	bic.w	r0, r0, #7
 8001e90:	1ac3      	subs	r3, r0, r3
 8001e92:	d0d3      	beq.n	8001e3c <_malloc_r+0x20>
 8001e94:	425a      	negs	r2, r3
 8001e96:	50e2      	str	r2, [r4, r3]
 8001e98:	e7d0      	b.n	8001e3c <_malloc_r+0x20>
 8001e9a:	684b      	ldr	r3, [r1, #4]
 8001e9c:	428c      	cmp	r4, r1
 8001e9e:	bf16      	itet	ne
 8001ea0:	6063      	strne	r3, [r4, #4]
 8001ea2:	6013      	streq	r3, [r2, #0]
 8001ea4:	460c      	movne	r4, r1
 8001ea6:	e7eb      	b.n	8001e80 <_malloc_r+0x64>
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	6849      	ldr	r1, [r1, #4]
 8001eac:	e7cc      	b.n	8001e48 <_malloc_r+0x2c>
 8001eae:	1cc4      	adds	r4, r0, #3
 8001eb0:	f024 0403 	bic.w	r4, r4, #3
 8001eb4:	42a0      	cmp	r0, r4
 8001eb6:	d005      	beq.n	8001ec4 <_malloc_r+0xa8>
 8001eb8:	1a21      	subs	r1, r4, r0
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f000 f82e 	bl	8001f1c <_sbrk_r>
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	d0cf      	beq.n	8001e64 <_malloc_r+0x48>
 8001ec4:	6025      	str	r5, [r4, #0]
 8001ec6:	e7db      	b.n	8001e80 <_malloc_r+0x64>
 8001ec8:	200000b4 	.word	0x200000b4
 8001ecc:	200000b8 	.word	0x200000b8

08001ed0 <_realloc_r>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	4607      	mov	r7, r0
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	460e      	mov	r6, r1
 8001ed8:	b921      	cbnz	r1, 8001ee4 <_realloc_r+0x14>
 8001eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ede:	4611      	mov	r1, r2
 8001ee0:	f7ff bf9c 	b.w	8001e1c <_malloc_r>
 8001ee4:	b922      	cbnz	r2, 8001ef0 <_realloc_r+0x20>
 8001ee6:	f7ff ff4d 	bl	8001d84 <_free_r>
 8001eea:	4625      	mov	r5, r4
 8001eec:	4628      	mov	r0, r5
 8001eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef0:	f000 f826 	bl	8001f40 <_malloc_usable_size_r>
 8001ef4:	42a0      	cmp	r0, r4
 8001ef6:	d20f      	bcs.n	8001f18 <_realloc_r+0x48>
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4638      	mov	r0, r7
 8001efc:	f7ff ff8e 	bl	8001e1c <_malloc_r>
 8001f00:	4605      	mov	r5, r0
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d0f2      	beq.n	8001eec <_realloc_r+0x1c>
 8001f06:	4631      	mov	r1, r6
 8001f08:	4622      	mov	r2, r4
 8001f0a:	f7ff ff17 	bl	8001d3c <memcpy>
 8001f0e:	4631      	mov	r1, r6
 8001f10:	4638      	mov	r0, r7
 8001f12:	f7ff ff37 	bl	8001d84 <_free_r>
 8001f16:	e7e9      	b.n	8001eec <_realloc_r+0x1c>
 8001f18:	4635      	mov	r5, r6
 8001f1a:	e7e7      	b.n	8001eec <_realloc_r+0x1c>

08001f1c <_sbrk_r>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4c05      	ldr	r4, [pc, #20]	; (8001f38 <_sbrk_r+0x1c>)
 8001f22:	4605      	mov	r5, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	f7fe fca8 	bl	800087c <_sbrk>
 8001f2c:	1c43      	adds	r3, r0, #1
 8001f2e:	d102      	bne.n	8001f36 <_sbrk_r+0x1a>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	b103      	cbz	r3, 8001f36 <_sbrk_r+0x1a>
 8001f34:	602b      	str	r3, [r5, #0]
 8001f36:	bd38      	pop	{r3, r4, r5, pc}
 8001f38:	200000c0 	.word	0x200000c0

08001f3c <__malloc_lock>:
 8001f3c:	4770      	bx	lr

08001f3e <__malloc_unlock>:
 8001f3e:	4770      	bx	lr

08001f40 <_malloc_usable_size_r>:
 8001f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f44:	1f18      	subs	r0, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bfbc      	itt	lt
 8001f4a:	580b      	ldrlt	r3, [r1, r0]
 8001f4c:	18c0      	addlt	r0, r0, r3
 8001f4e:	4770      	bx	lr

08001f50 <_init>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr

08001f5c <_fini>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr
