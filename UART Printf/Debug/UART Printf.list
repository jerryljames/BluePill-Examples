
UART Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08004a78  08004a78  00014a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004da8  08004da8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da8  08004da8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001dc  08004f8c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004f8c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d1e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016d5  00000000  00000000  00026f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  000285f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  00028cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cf1  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000659a  00000000  00000000  00040f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082cf2  00000000  00000000  0004751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002790  00000000  00000000  000ca288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a5c 	.word	0x08004a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004a5c 	.word	0x08004a5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_GPIO_Init+0x90>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Out_GPIO_Port, LED_Out_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_GPIO_Init+0x94>)
 8000d08:	f000 fd02 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Out_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Out_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_GPIO_Init+0x94>)
 8000d26:	f000 fb99 	bl	800145c <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40011000 	.word	0x40011000

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int integer_variable = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  float float_variable = 0.0f;
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fa1e 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f82c 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f7ff ffa6 	bl	8000ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d58:	f000 f97e 	bl	8001058 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world\r\n");
 8000d5c:	480f      	ldr	r0, [pc, #60]	; (8000d9c <main+0x60>)
 8000d5e:	f001 ffb9 	bl	8002cd4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Integer value = %d\r\n",integer_variable);
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <main+0x64>)
 8000d66:	f001 ff41 	bl	8002bec <iprintf>
	  integer_variable++;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
	  printf("Float value = %.2f\r\n",float_variable);
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f7ff fb59 	bl	8000428 <__aeabi_f2d>
 8000d76:	4603      	mov	r3, r0
 8000d78:	460c      	mov	r4, r1
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <main+0x68>)
 8000d80:	f001 ff34 	bl	8002bec <iprintf>
	  float_variable += 1.345f;
 8000d84:	4908      	ldr	r1, [pc, #32]	; (8000da8 <main+0x6c>)
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff fe84 	bl	8000a94 <__addsf3>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	603b      	str	r3, [r7, #0]
	  HAL_Delay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f000 fa5c 	bl	8001250 <HAL_Delay>
	  printf("Integer value = %d\r\n",integer_variable);
 8000d98:	e7e3      	b.n	8000d62 <main+0x26>
 8000d9a:	bf00      	nop
 8000d9c:	08004a78 	.word	0x08004a78
 8000da0:	08004a88 	.word	0x08004a88
 8000da4:	08004aa0 	.word	0x08004aa0
 8000da8:	3fac28f6 	.word	0x3fac28f6

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fabe 	bl	800233c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fca3 	bl	8001740 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e00:	f000 f82c 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff0e 	bl	8001c40 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f817 	bl	8000e5c <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	2201      	movs	r2, #1
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <__io_putchar+0x20>)
 8000e4a:	f001 f8e2 	bl	8002012 <HAL_UART_Transmit>

  return ch;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000204 	.word	0x20000204

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x60>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_MspInit+0x60>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <HardFault_Handler+0x4>

08000ede <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f97e 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5f 	bl	8000e38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
	}
	return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb8:	605a      	str	r2, [r3, #4]
	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x50>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x16>
		heap_end = &end;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <_sbrk+0x50>)
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <_sbrk+0x54>)
 8001008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <_sbrk+0x50>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <_sbrk+0x50>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	466a      	mov	r2, sp
 800101a:	4293      	cmp	r3, r2
 800101c:	d907      	bls.n	800102e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800101e:	f001 f963 	bl	80022e8 <__errno>
 8001022:	4602      	mov	r2, r0
 8001024:	230c      	movs	r3, #12
 8001026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102c:	e006      	b.n	800103c <_sbrk+0x48>
	}

	heap_end += incr;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <_sbrk+0x50>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <_sbrk+0x50>)
 8001038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f8 	.word	0x200001f8
 8001048:	20000250 	.word	0x20000250

0800104c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART2_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001090:	f000 ff72 	bl	8001f78 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f7ff fedf 	bl	8000e5c <Error_Handler>
  }

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000204 	.word	0x20000204
 80010a8:	40004400 	.word	0x40004400

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d12f      	bne.n	800112c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d6:	61d3      	str	r3, [r2, #28]
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fc:	2304      	movs	r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_UART_MspInit+0x90>)
 8001110:	f000 f9a4 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001114:	2308      	movs	r3, #8
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0x90>)
 8001128:	f000 f998 	bl	800145c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40004400 	.word	0x40004400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800

08001140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001140:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800115c:	f842 3b04 	str.w	r3, [r2], #4

08001160 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001166:	f7ff ff71 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f001 f8c3 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116e:	f7ff fde5 	bl	8000d3c <main>
  bx lr
 8001172:	4770      	bx	lr
  ldr r3, =_sidata
 8001174:	08004db0 	.word	0x08004db0
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800117c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001180:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001184:	2000024c 	.word	0x2000024c

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x28>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x28>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f929 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe5e 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f933 	bl	8001442 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f000 f909 	bl	800140a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x1c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x20>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x20>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000008 	.word	0x20000008
 8001238:	20000244 	.word	0x20000244

0800123c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_GetTick+0x10>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000244 	.word	0x20000244

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff fff0 	bl	800123c <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_Delay+0x40>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffe0 	bl	800123c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f7ff ff90 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff49 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff5e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff90 	bl	800134c <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5f 	bl	80012f8 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffb0 	bl	80013b0 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b08b      	sub	sp, #44	; 0x2c
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e127      	b.n	80016c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001470:	2201      	movs	r2, #1
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8116 	bne.w	80016ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b12      	cmp	r3, #18
 8001494:	d034      	beq.n	8001500 <HAL_GPIO_Init+0xa4>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d80d      	bhi.n	80014b6 <HAL_GPIO_Init+0x5a>
 800149a:	2b02      	cmp	r3, #2
 800149c:	d02b      	beq.n	80014f6 <HAL_GPIO_Init+0x9a>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d804      	bhi.n	80014ac <HAL_GPIO_Init+0x50>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d031      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d01c      	beq.n	80014e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014aa:	e048      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d043      	beq.n	8001538 <HAL_GPIO_Init+0xdc>
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d01b      	beq.n	80014ec <HAL_GPIO_Init+0x90>
          break;
 80014b4:	e043      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b6:	4a89      	ldr	r2, [pc, #548]	; (80016dc <HAL_GPIO_Init+0x280>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d026      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014bc:	4a87      	ldr	r2, [pc, #540]	; (80016dc <HAL_GPIO_Init+0x280>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d806      	bhi.n	80014d0 <HAL_GPIO_Init+0x74>
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <HAL_GPIO_Init+0x284>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d020      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014c8:	4a86      	ldr	r2, [pc, #536]	; (80016e4 <HAL_GPIO_Init+0x288>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01d      	beq.n	800150a <HAL_GPIO_Init+0xae>
          break;
 80014ce:	e036      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014d0:	4a85      	ldr	r2, [pc, #532]	; (80016e8 <HAL_GPIO_Init+0x28c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014d6:	4a85      	ldr	r2, [pc, #532]	; (80016ec <HAL_GPIO_Init+0x290>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d016      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014dc:	4a84      	ldr	r2, [pc, #528]	; (80016f0 <HAL_GPIO_Init+0x294>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xae>
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e028      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e023      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01e      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e019      	b.n	800153e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e012      	b.n	800153e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e008      	b.n	800153e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d801      	bhi.n	8001548 <HAL_GPIO_Init+0xec>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e001      	b.n	800154c <HAL_GPIO_Init+0xf0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d802      	bhi.n	800155a <HAL_GPIO_Init+0xfe>
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x104>
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3b08      	subs	r3, #8
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	210f      	movs	r1, #15
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	401a      	ands	r2, r3
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8096 	beq.w	80016ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_GPIO_Init+0x298>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_GPIO_Init+0x298>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <HAL_GPIO_Init+0x298>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a6:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x29c>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x2a0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x19e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_GPIO_Init+0x2a4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x19a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x2a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x196>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2ac>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x192>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015fa:	2300      	movs	r3, #0
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160c:	493a      	ldr	r1, [pc, #232]	; (80016f8 <HAL_GPIO_Init+0x29c>)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4938      	ldr	r1, [pc, #224]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4933      	ldr	r1, [pc, #204]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800163e:	4013      	ands	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	492e      	ldr	r1, [pc, #184]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4929      	ldr	r1, [pc, #164]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001666:	4013      	ands	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4924      	ldr	r1, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	491f      	ldr	r1, [pc, #124]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800168e:	4013      	ands	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	491a      	ldr	r1, [pc, #104]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f47f aed0 	bne.w	8001470 <HAL_GPIO_Init+0x14>
  }
}
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10310000 	.word	0x10310000
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10220000 	.word	0x10220000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e26c      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8087 	beq.w	800186e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b04      	cmp	r3, #4
 800176a:	d00c      	beq.n	8001786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800176c:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d112      	bne.n	800179e <HAL_RCC_OscConfig+0x5e>
 8001778:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d10b      	bne.n	800179e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001786:	4b89      	ldr	r3, [pc, #548]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d06c      	beq.n	800186c <HAL_RCC_OscConfig+0x12c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d168      	bne.n	800186c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e246      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x76>
 80017a8:	4b80      	ldr	r3, [pc, #512]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a7f      	ldr	r2, [pc, #508]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e02e      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7a      	ldr	r2, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b78      	ldr	r3, [pc, #480]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a77      	ldr	r2, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xbc>
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a71      	ldr	r2, [pc, #452]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6e      	ldr	r2, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a67      	ldr	r2, [pc, #412]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fd0e 	bl	800123c <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fd0a 	bl	800123c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1fa      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xe4>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fcfa 	bl	800123c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fcf6 	bl	800123c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1e6      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x10c>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d063      	beq.n	8001942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x18c>
 8001892:	4b46      	ldr	r3, [pc, #280]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x176>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1ba      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4939      	ldr	r1, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	e03a      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fcaf 	bl	800123c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fcab 	bl	800123c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e19b      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fc8e 	bl	800123c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff fc8a 	bl	800123c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e17a      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d03a      	beq.n	80019c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d019      	beq.n	800198a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_RCC_OscConfig+0x274>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fc6e 	bl	800123c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff fc6a 	bl	800123c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e15a      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f000 fada 	bl	8001f3c <RCC_Delay>
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_OscConfig+0x274>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff fc54 	bl	800123c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fc50 	bl	800123c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d908      	bls.n	80019b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e140      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	42420000 	.word	0x42420000
 80019b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b9e      	ldr	r3, [pc, #632]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e9      	bne.n	8001998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80a6 	beq.w	8001b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b97      	ldr	r3, [pc, #604]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a93      	ldr	r2, [pc, #588]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b91      	ldr	r3, [pc, #580]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b8e      	ldr	r3, [pc, #568]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a8a      	ldr	r2, [pc, #552]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fc11 	bl	800123c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fc0d 	bl	800123c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	; 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0fd      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x312>
 8001a44:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e02d      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x334>
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a72      	ldr	r2, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	e01c      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x356>
 8001a7c:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a6c      	ldr	r2, [pc, #432]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a69      	ldr	r2, [pc, #420]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a66      	ldr	r2, [pc, #408]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fbc1 	bl	800123c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fbbd 	bl	800123c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0ab      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ee      	beq.n	8001abe <HAL_RCC_OscConfig+0x37e>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fbab 	bl	800123c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fba7 	bl	800123c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e095      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ee      	bne.n	8001aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d105      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8081 	beq.w	8001c2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d061      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d146      	bne.n	8001bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb7b 	bl	800123c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff fb77 	bl	800123c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e067      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	492d      	ldr	r1, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a19      	ldr	r1, [r3, #32]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	430b      	orrs	r3, r1
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb4b 	bl	800123c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb47 	bl	800123c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e037      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x46a>
 8001bc8:	e02f      	b.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb34 	bl	800123c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fb30 	bl	800123c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e020      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x498>
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e013      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	42420060 	.word	0x42420060

08001c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4965      	ldr	r1, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d040      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e073      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7ff fa84 	bl	800123c <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff fa80 	bl	800123c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e053      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d210      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	fa21 f303 	lsr.w	r3, r1, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1cc>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f9e2 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08004acc 	.word	0x08004acc
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b490      	push	{r4, r7}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e1c:	1d3c      	adds	r4, r7, #4
 8001e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x46>
 8001e52:	e02d      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e56:	623b      	str	r3, [r7, #32]
      break;
 8001e58:	e02d      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	0c9b      	lsrs	r3, r3, #18
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e66:	4413      	add	r3, r2
 8001e68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c5b      	lsrs	r3, r3, #17
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e86:	4413      	add	r3, r2
 8001e88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e92:	fb02 f203 	mul.w	r2, r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e004      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	623b      	str	r3, [r7, #32]
      break;
 8001eae:	e002      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb2:	623b      	str	r3, [r7, #32]
      break;
 8001eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc90      	pop	{r4, r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	08004ab8 	.word	0x08004ab8
 8001ec8:	08004ac8 	.word	0x08004ac8
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	003d0900 	.word	0x003d0900

08001ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff2 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08004adc 	.word	0x08004adc

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08004adc 	.word	0x08004adc

08001f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <RCC_Delay+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <RCC_Delay+0x38>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0a5b      	lsrs	r3, r3, #9
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f58:	bf00      	nop
  }
  while (Delay --);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	60fa      	str	r2, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f9      	bne.n	8001f58 <RCC_Delay+0x1c>
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e03f      	b.n	800200a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff f884 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f905 	bl	80021cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b08a      	sub	sp, #40	; 0x28
 8002016:	af02      	add	r7, sp, #8
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	d17c      	bne.n	800212c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_UART_Transmit+0x2c>
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e075      	b.n	800212e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_UART_Transmit+0x3e>
 800204c:	2302      	movs	r3, #2
 800204e:	e06e      	b.n	800212e <HAL_UART_Transmit+0x11c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2221      	movs	r2, #33	; 0x21
 8002062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002066:	f7ff f8e9 	bl	800123c <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d108      	bne.n	8002094 <HAL_UART_Transmit+0x82>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e003      	b.n	800209c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020a4:	e02a      	b.n	80020fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f840 	bl	8002136 <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e036      	b.n	800212e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3302      	adds	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e007      	b.n	80020ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1cf      	bne.n	80020a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f810 	bl	8002136 <UART_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002146:	e02c      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800214e:	d028      	beq.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <UART_WaitOnFlagUntilTimeout+0x30>
 8002156:	f7ff f871 	bl	800123c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d21d      	bcs.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002174:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4013      	ands	r3, r2
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d0c3      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002206:	f023 030c 	bic.w	r3, r3, #12
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	430b      	orrs	r3, r1
 8002212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <UART_SetConfig+0x114>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002234:	f7ff fe6e 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	e002      	b.n	8002242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800223c:	f7ff fe56 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <UART_SetConfig+0x118>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	0119      	lsls	r1, r3, #4
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fbb2 f2f3 	udiv	r2, r2, r3
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <UART_SetConfig+0x118>)
 800227a:	fba3 0302 	umull	r0, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <UART_SetConfig+0x118>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002298:	4419      	add	r1, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <UART_SetConfig+0x118>)
 80022b2:	fba3 0302 	umull	r0, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	fb00 f303 	mul.w	r3, r0, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	3332      	adds	r3, #50	; 0x32
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <UART_SetConfig+0x118>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	440a      	add	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40013800 	.word	0x40013800
 80022e4:	51eb851f 	.word	0x51eb851f

080022e8 <__errno>:
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <__errno+0x8>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000000c 	.word	0x2000000c

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2500      	movs	r5, #0
 80022f8:	4e0c      	ldr	r6, [pc, #48]	; (800232c <__libc_init_array+0x38>)
 80022fa:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fc:	1ba4      	subs	r4, r4, r6
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	42a5      	cmp	r5, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	f002 fbaa 	bl	8004a5c <_init>
 8002308:	2500      	movs	r5, #0
 800230a:	4e0a      	ldr	r6, [pc, #40]	; (8002334 <__libc_init_array+0x40>)
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <__libc_init_array+0x44>)
 800230e:	1ba4      	subs	r4, r4, r6
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	42a5      	cmp	r5, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800231c:	4798      	blx	r3
 800231e:	3501      	adds	r5, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002326:	4798      	blx	r3
 8002328:	3501      	adds	r5, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	08004da8 	.word	0x08004da8
 8002330:	08004da8 	.word	0x08004da8
 8002334:	08004da8 	.word	0x08004da8
 8002338:	08004dac 	.word	0x08004dac

0800233c <memset>:
 800233c:	4603      	mov	r3, r0
 800233e:	4402      	add	r2, r0
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	f803 1b01 	strb.w	r1, [r3], #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <__cvt>:
 800234c:	2b00      	cmp	r3, #0
 800234e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002352:	461e      	mov	r6, r3
 8002354:	bfbb      	ittet	lt
 8002356:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800235a:	461e      	movlt	r6, r3
 800235c:	2300      	movge	r3, #0
 800235e:	232d      	movlt	r3, #45	; 0x2d
 8002360:	b088      	sub	sp, #32
 8002362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002364:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002368:	f027 0720 	bic.w	r7, r7, #32
 800236c:	2f46      	cmp	r7, #70	; 0x46
 800236e:	4614      	mov	r4, r2
 8002370:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002372:	700b      	strb	r3, [r1, #0]
 8002374:	d004      	beq.n	8002380 <__cvt+0x34>
 8002376:	2f45      	cmp	r7, #69	; 0x45
 8002378:	d100      	bne.n	800237c <__cvt+0x30>
 800237a:	3501      	adds	r5, #1
 800237c:	2302      	movs	r3, #2
 800237e:	e000      	b.n	8002382 <__cvt+0x36>
 8002380:	2303      	movs	r3, #3
 8002382:	aa07      	add	r2, sp, #28
 8002384:	9204      	str	r2, [sp, #16]
 8002386:	aa06      	add	r2, sp, #24
 8002388:	e9cd a202 	strd	sl, r2, [sp, #8]
 800238c:	e9cd 3500 	strd	r3, r5, [sp]
 8002390:	4622      	mov	r2, r4
 8002392:	4633      	mov	r3, r6
 8002394:	f000 fdf4 	bl	8002f80 <_dtoa_r>
 8002398:	2f47      	cmp	r7, #71	; 0x47
 800239a:	4680      	mov	r8, r0
 800239c:	d102      	bne.n	80023a4 <__cvt+0x58>
 800239e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023a0:	07db      	lsls	r3, r3, #31
 80023a2:	d526      	bpl.n	80023f2 <__cvt+0xa6>
 80023a4:	2f46      	cmp	r7, #70	; 0x46
 80023a6:	eb08 0905 	add.w	r9, r8, r5
 80023aa:	d111      	bne.n	80023d0 <__cvt+0x84>
 80023ac:	f898 3000 	ldrb.w	r3, [r8]
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d10a      	bne.n	80023ca <__cvt+0x7e>
 80023b4:	2200      	movs	r2, #0
 80023b6:	2300      	movs	r3, #0
 80023b8:	4620      	mov	r0, r4
 80023ba:	4631      	mov	r1, r6
 80023bc:	f7fe faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80023c0:	b918      	cbnz	r0, 80023ca <__cvt+0x7e>
 80023c2:	f1c5 0501 	rsb	r5, r5, #1
 80023c6:	f8ca 5000 	str.w	r5, [sl]
 80023ca:	f8da 3000 	ldr.w	r3, [sl]
 80023ce:	4499      	add	r9, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	4620      	mov	r0, r4
 80023d6:	4631      	mov	r1, r6
 80023d8:	f7fe fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80023dc:	b938      	cbnz	r0, 80023ee <__cvt+0xa2>
 80023de:	2230      	movs	r2, #48	; 0x30
 80023e0:	9b07      	ldr	r3, [sp, #28]
 80023e2:	454b      	cmp	r3, r9
 80023e4:	d205      	bcs.n	80023f2 <__cvt+0xa6>
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	9107      	str	r1, [sp, #28]
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e7f8      	b.n	80023e0 <__cvt+0x94>
 80023ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80023f2:	4640      	mov	r0, r8
 80023f4:	9b07      	ldr	r3, [sp, #28]
 80023f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80023f8:	eba3 0308 	sub.w	r3, r3, r8
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	b008      	add	sp, #32
 8002400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002404 <__exponent>:
 8002404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002406:	2900      	cmp	r1, #0
 8002408:	bfb4      	ite	lt
 800240a:	232d      	movlt	r3, #45	; 0x2d
 800240c:	232b      	movge	r3, #43	; 0x2b
 800240e:	4604      	mov	r4, r0
 8002410:	bfb8      	it	lt
 8002412:	4249      	neglt	r1, r1
 8002414:	2909      	cmp	r1, #9
 8002416:	f804 2b02 	strb.w	r2, [r4], #2
 800241a:	7043      	strb	r3, [r0, #1]
 800241c:	dd21      	ble.n	8002462 <__exponent+0x5e>
 800241e:	f10d 0307 	add.w	r3, sp, #7
 8002422:	461f      	mov	r7, r3
 8002424:	260a      	movs	r6, #10
 8002426:	fb91 f5f6 	sdiv	r5, r1, r6
 800242a:	fb06 1115 	mls	r1, r6, r5, r1
 800242e:	2d09      	cmp	r5, #9
 8002430:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002434:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002438:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800243c:	4629      	mov	r1, r5
 800243e:	dc09      	bgt.n	8002454 <__exponent+0x50>
 8002440:	3130      	adds	r1, #48	; 0x30
 8002442:	3b02      	subs	r3, #2
 8002444:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002448:	42bb      	cmp	r3, r7
 800244a:	4622      	mov	r2, r4
 800244c:	d304      	bcc.n	8002458 <__exponent+0x54>
 800244e:	1a10      	subs	r0, r2, r0
 8002450:	b003      	add	sp, #12
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	4613      	mov	r3, r2
 8002456:	e7e6      	b.n	8002426 <__exponent+0x22>
 8002458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800245c:	f804 2b01 	strb.w	r2, [r4], #1
 8002460:	e7f2      	b.n	8002448 <__exponent+0x44>
 8002462:	2330      	movs	r3, #48	; 0x30
 8002464:	4419      	add	r1, r3
 8002466:	7083      	strb	r3, [r0, #2]
 8002468:	1d02      	adds	r2, r0, #4
 800246a:	70c1      	strb	r1, [r0, #3]
 800246c:	e7ef      	b.n	800244e <__exponent+0x4a>
	...

08002470 <_printf_float>:
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002474:	b091      	sub	sp, #68	; 0x44
 8002476:	460c      	mov	r4, r1
 8002478:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800247a:	4693      	mov	fp, r2
 800247c:	461e      	mov	r6, r3
 800247e:	4605      	mov	r5, r0
 8002480:	f001 fcac 	bl	8003ddc <_localeconv_r>
 8002484:	6803      	ldr	r3, [r0, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	9309      	str	r3, [sp, #36]	; 0x24
 800248a:	f7fd fe61 	bl	8000150 <strlen>
 800248e:	2300      	movs	r3, #0
 8002490:	930e      	str	r3, [sp, #56]	; 0x38
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	900a      	str	r0, [sp, #40]	; 0x28
 8002496:	3307      	adds	r3, #7
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	f103 0208 	add.w	r2, r3, #8
 80024a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80024a4:	f8d4 a000 	ldr.w	sl, [r4]
 80024a8:	603a      	str	r2, [r7, #0]
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80024b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80024b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80024ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	4ba6      	ldr	r3, [pc, #664]	; (800275c <_printf_float+0x2ec>)
 80024c2:	4638      	mov	r0, r7
 80024c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024c6:	f7fe faa1 	bl	8000a0c <__aeabi_dcmpun>
 80024ca:	bb68      	cbnz	r0, 8002528 <_printf_float+0xb8>
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d0:	4ba2      	ldr	r3, [pc, #648]	; (800275c <_printf_float+0x2ec>)
 80024d2:	4638      	mov	r0, r7
 80024d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024d6:	f7fe fa7b 	bl	80009d0 <__aeabi_dcmple>
 80024da:	bb28      	cbnz	r0, 8002528 <_printf_float+0xb8>
 80024dc:	2200      	movs	r2, #0
 80024de:	2300      	movs	r3, #0
 80024e0:	4638      	mov	r0, r7
 80024e2:	4649      	mov	r1, r9
 80024e4:	f7fe fa6a 	bl	80009bc <__aeabi_dcmplt>
 80024e8:	b110      	cbz	r0, 80024f0 <_printf_float+0x80>
 80024ea:	232d      	movs	r3, #45	; 0x2d
 80024ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024f0:	4f9b      	ldr	r7, [pc, #620]	; (8002760 <_printf_float+0x2f0>)
 80024f2:	4b9c      	ldr	r3, [pc, #624]	; (8002764 <_printf_float+0x2f4>)
 80024f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80024f8:	bf98      	it	ls
 80024fa:	461f      	movls	r7, r3
 80024fc:	2303      	movs	r3, #3
 80024fe:	f04f 0900 	mov.w	r9, #0
 8002502:	6123      	str	r3, [r4, #16]
 8002504:	f02a 0304 	bic.w	r3, sl, #4
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	9600      	str	r6, [sp, #0]
 800250c:	465b      	mov	r3, fp
 800250e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002510:	4621      	mov	r1, r4
 8002512:	4628      	mov	r0, r5
 8002514:	f000 f9e2 	bl	80028dc <_printf_common>
 8002518:	3001      	adds	r0, #1
 800251a:	f040 8090 	bne.w	800263e <_printf_float+0x1ce>
 800251e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002522:	b011      	add	sp, #68	; 0x44
 8002524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002528:	463a      	mov	r2, r7
 800252a:	464b      	mov	r3, r9
 800252c:	4638      	mov	r0, r7
 800252e:	4649      	mov	r1, r9
 8002530:	f7fe fa6c 	bl	8000a0c <__aeabi_dcmpun>
 8002534:	b110      	cbz	r0, 800253c <_printf_float+0xcc>
 8002536:	4f8c      	ldr	r7, [pc, #560]	; (8002768 <_printf_float+0x2f8>)
 8002538:	4b8c      	ldr	r3, [pc, #560]	; (800276c <_printf_float+0x2fc>)
 800253a:	e7db      	b.n	80024f4 <_printf_float+0x84>
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	a80d      	add	r0, sp, #52	; 0x34
 8002546:	a90e      	add	r1, sp, #56	; 0x38
 8002548:	d140      	bne.n	80025cc <_printf_float+0x15c>
 800254a:	2306      	movs	r3, #6
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	f04f 0c00 	mov.w	ip, #0
 8002552:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002556:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	6022      	str	r2, [r4, #0]
 800255e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	463a      	mov	r2, r7
 8002566:	464b      	mov	r3, r9
 8002568:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800256c:	4628      	mov	r0, r5
 800256e:	f7ff feed 	bl	800234c <__cvt>
 8002572:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002576:	2b47      	cmp	r3, #71	; 0x47
 8002578:	4607      	mov	r7, r0
 800257a:	d109      	bne.n	8002590 <_printf_float+0x120>
 800257c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800257e:	1cd8      	adds	r0, r3, #3
 8002580:	db02      	blt.n	8002588 <_printf_float+0x118>
 8002582:	6862      	ldr	r2, [r4, #4]
 8002584:	4293      	cmp	r3, r2
 8002586:	dd47      	ble.n	8002618 <_printf_float+0x1a8>
 8002588:	f1a8 0802 	sub.w	r8, r8, #2
 800258c:	fa5f f888 	uxtb.w	r8, r8
 8002590:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002594:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002596:	d824      	bhi.n	80025e2 <_printf_float+0x172>
 8002598:	3901      	subs	r1, #1
 800259a:	4642      	mov	r2, r8
 800259c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025a0:	910d      	str	r1, [sp, #52]	; 0x34
 80025a2:	f7ff ff2f 	bl	8002404 <__exponent>
 80025a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025a8:	4681      	mov	r9, r0
 80025aa:	1813      	adds	r3, r2, r0
 80025ac:	2a01      	cmp	r2, #1
 80025ae:	6123      	str	r3, [r4, #16]
 80025b0:	dc02      	bgt.n	80025b8 <_printf_float+0x148>
 80025b2:	6822      	ldr	r2, [r4, #0]
 80025b4:	07d1      	lsls	r1, r2, #31
 80025b6:	d501      	bpl.n	80025bc <_printf_float+0x14c>
 80025b8:	3301      	adds	r3, #1
 80025ba:	6123      	str	r3, [r4, #16]
 80025bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0a2      	beq.n	800250a <_printf_float+0x9a>
 80025c4:	232d      	movs	r3, #45	; 0x2d
 80025c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ca:	e79e      	b.n	800250a <_printf_float+0x9a>
 80025cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80025d0:	f000 816e 	beq.w	80028b0 <_printf_float+0x440>
 80025d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80025d8:	d1b9      	bne.n	800254e <_printf_float+0xde>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1b7      	bne.n	800254e <_printf_float+0xde>
 80025de:	2301      	movs	r3, #1
 80025e0:	e7b4      	b.n	800254c <_printf_float+0xdc>
 80025e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80025e6:	d119      	bne.n	800261c <_printf_float+0x1ac>
 80025e8:	2900      	cmp	r1, #0
 80025ea:	6863      	ldr	r3, [r4, #4]
 80025ec:	dd0c      	ble.n	8002608 <_printf_float+0x198>
 80025ee:	6121      	str	r1, [r4, #16]
 80025f0:	b913      	cbnz	r3, 80025f8 <_printf_float+0x188>
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	07d2      	lsls	r2, r2, #31
 80025f6:	d502      	bpl.n	80025fe <_printf_float+0x18e>
 80025f8:	3301      	adds	r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	6123      	str	r3, [r4, #16]
 80025fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002600:	f04f 0900 	mov.w	r9, #0
 8002604:	65a3      	str	r3, [r4, #88]	; 0x58
 8002606:	e7d9      	b.n	80025bc <_printf_float+0x14c>
 8002608:	b913      	cbnz	r3, 8002610 <_printf_float+0x1a0>
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	07d0      	lsls	r0, r2, #31
 800260e:	d501      	bpl.n	8002614 <_printf_float+0x1a4>
 8002610:	3302      	adds	r3, #2
 8002612:	e7f3      	b.n	80025fc <_printf_float+0x18c>
 8002614:	2301      	movs	r3, #1
 8002616:	e7f1      	b.n	80025fc <_printf_float+0x18c>
 8002618:	f04f 0867 	mov.w	r8, #103	; 0x67
 800261c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002620:	4293      	cmp	r3, r2
 8002622:	db05      	blt.n	8002630 <_printf_float+0x1c0>
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6123      	str	r3, [r4, #16]
 8002628:	07d1      	lsls	r1, r2, #31
 800262a:	d5e8      	bpl.n	80025fe <_printf_float+0x18e>
 800262c:	3301      	adds	r3, #1
 800262e:	e7e5      	b.n	80025fc <_printf_float+0x18c>
 8002630:	2b00      	cmp	r3, #0
 8002632:	bfcc      	ite	gt
 8002634:	2301      	movgt	r3, #1
 8002636:	f1c3 0302 	rsble	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	e7de      	b.n	80025fc <_printf_float+0x18c>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	055a      	lsls	r2, r3, #21
 8002642:	d407      	bmi.n	8002654 <_printf_float+0x1e4>
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	463a      	mov	r2, r7
 8002648:	4659      	mov	r1, fp
 800264a:	4628      	mov	r0, r5
 800264c:	47b0      	blx	r6
 800264e:	3001      	adds	r0, #1
 8002650:	d129      	bne.n	80026a6 <_printf_float+0x236>
 8002652:	e764      	b.n	800251e <_printf_float+0xae>
 8002654:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002658:	f240 80d7 	bls.w	800280a <_printf_float+0x39a>
 800265c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002660:	2200      	movs	r2, #0
 8002662:	2300      	movs	r3, #0
 8002664:	f7fe f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8002668:	b388      	cbz	r0, 80026ce <_printf_float+0x25e>
 800266a:	2301      	movs	r3, #1
 800266c:	4a40      	ldr	r2, [pc, #256]	; (8002770 <_printf_float+0x300>)
 800266e:	4659      	mov	r1, fp
 8002670:	4628      	mov	r0, r5
 8002672:	47b0      	blx	r6
 8002674:	3001      	adds	r0, #1
 8002676:	f43f af52 	beq.w	800251e <_printf_float+0xae>
 800267a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800267e:	429a      	cmp	r2, r3
 8002680:	db02      	blt.n	8002688 <_printf_float+0x218>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	07d8      	lsls	r0, r3, #31
 8002686:	d50e      	bpl.n	80026a6 <_printf_float+0x236>
 8002688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800268c:	4659      	mov	r1, fp
 800268e:	4628      	mov	r0, r5
 8002690:	47b0      	blx	r6
 8002692:	3001      	adds	r0, #1
 8002694:	f43f af43 	beq.w	800251e <_printf_float+0xae>
 8002698:	2700      	movs	r7, #0
 800269a:	f104 081a 	add.w	r8, r4, #26
 800269e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026a0:	3b01      	subs	r3, #1
 80026a2:	42bb      	cmp	r3, r7
 80026a4:	dc09      	bgt.n	80026ba <_printf_float+0x24a>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	079f      	lsls	r7, r3, #30
 80026aa:	f100 80fd 	bmi.w	80028a8 <_printf_float+0x438>
 80026ae:	68e0      	ldr	r0, [r4, #12]
 80026b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026b2:	4298      	cmp	r0, r3
 80026b4:	bfb8      	it	lt
 80026b6:	4618      	movlt	r0, r3
 80026b8:	e733      	b.n	8002522 <_printf_float+0xb2>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4642      	mov	r2, r8
 80026be:	4659      	mov	r1, fp
 80026c0:	4628      	mov	r0, r5
 80026c2:	47b0      	blx	r6
 80026c4:	3001      	adds	r0, #1
 80026c6:	f43f af2a 	beq.w	800251e <_printf_float+0xae>
 80026ca:	3701      	adds	r7, #1
 80026cc:	e7e7      	b.n	800269e <_printf_float+0x22e>
 80026ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	dc2b      	bgt.n	800272c <_printf_float+0x2bc>
 80026d4:	2301      	movs	r3, #1
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <_printf_float+0x300>)
 80026d8:	4659      	mov	r1, fp
 80026da:	4628      	mov	r0, r5
 80026dc:	47b0      	blx	r6
 80026de:	3001      	adds	r0, #1
 80026e0:	f43f af1d 	beq.w	800251e <_printf_float+0xae>
 80026e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026e6:	b923      	cbnz	r3, 80026f2 <_printf_float+0x282>
 80026e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ea:	b913      	cbnz	r3, 80026f2 <_printf_float+0x282>
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	07d9      	lsls	r1, r3, #31
 80026f0:	d5d9      	bpl.n	80026a6 <_printf_float+0x236>
 80026f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026f6:	4659      	mov	r1, fp
 80026f8:	4628      	mov	r0, r5
 80026fa:	47b0      	blx	r6
 80026fc:	3001      	adds	r0, #1
 80026fe:	f43f af0e 	beq.w	800251e <_printf_float+0xae>
 8002702:	f04f 0800 	mov.w	r8, #0
 8002706:	f104 091a 	add.w	r9, r4, #26
 800270a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800270c:	425b      	negs	r3, r3
 800270e:	4543      	cmp	r3, r8
 8002710:	dc01      	bgt.n	8002716 <_printf_float+0x2a6>
 8002712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002714:	e797      	b.n	8002646 <_printf_float+0x1d6>
 8002716:	2301      	movs	r3, #1
 8002718:	464a      	mov	r2, r9
 800271a:	4659      	mov	r1, fp
 800271c:	4628      	mov	r0, r5
 800271e:	47b0      	blx	r6
 8002720:	3001      	adds	r0, #1
 8002722:	f43f aefc 	beq.w	800251e <_printf_float+0xae>
 8002726:	f108 0801 	add.w	r8, r8, #1
 800272a:	e7ee      	b.n	800270a <_printf_float+0x29a>
 800272c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800272e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002730:	429a      	cmp	r2, r3
 8002732:	bfa8      	it	ge
 8002734:	461a      	movge	r2, r3
 8002736:	2a00      	cmp	r2, #0
 8002738:	4690      	mov	r8, r2
 800273a:	dd07      	ble.n	800274c <_printf_float+0x2dc>
 800273c:	4613      	mov	r3, r2
 800273e:	4659      	mov	r1, fp
 8002740:	463a      	mov	r2, r7
 8002742:	4628      	mov	r0, r5
 8002744:	47b0      	blx	r6
 8002746:	3001      	adds	r0, #1
 8002748:	f43f aee9 	beq.w	800251e <_printf_float+0xae>
 800274c:	f104 031a 	add.w	r3, r4, #26
 8002750:	f04f 0a00 	mov.w	sl, #0
 8002754:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002758:	930b      	str	r3, [sp, #44]	; 0x2c
 800275a:	e015      	b.n	8002788 <_printf_float+0x318>
 800275c:	7fefffff 	.word	0x7fefffff
 8002760:	08004aec 	.word	0x08004aec
 8002764:	08004ae8 	.word	0x08004ae8
 8002768:	08004af4 	.word	0x08004af4
 800276c:	08004af0 	.word	0x08004af0
 8002770:	08004af8 	.word	0x08004af8
 8002774:	2301      	movs	r3, #1
 8002776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002778:	4659      	mov	r1, fp
 800277a:	4628      	mov	r0, r5
 800277c:	47b0      	blx	r6
 800277e:	3001      	adds	r0, #1
 8002780:	f43f aecd 	beq.w	800251e <_printf_float+0xae>
 8002784:	f10a 0a01 	add.w	sl, sl, #1
 8002788:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800278c:	eba9 0308 	sub.w	r3, r9, r8
 8002790:	4553      	cmp	r3, sl
 8002792:	dcef      	bgt.n	8002774 <_printf_float+0x304>
 8002794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002798:	429a      	cmp	r2, r3
 800279a:	444f      	add	r7, r9
 800279c:	db14      	blt.n	80027c8 <_printf_float+0x358>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	07da      	lsls	r2, r3, #31
 80027a2:	d411      	bmi.n	80027c8 <_printf_float+0x358>
 80027a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027a8:	eba3 0209 	sub.w	r2, r3, r9
 80027ac:	eba3 0901 	sub.w	r9, r3, r1
 80027b0:	4591      	cmp	r9, r2
 80027b2:	bfa8      	it	ge
 80027b4:	4691      	movge	r9, r2
 80027b6:	f1b9 0f00 	cmp.w	r9, #0
 80027ba:	dc0d      	bgt.n	80027d8 <_printf_float+0x368>
 80027bc:	2700      	movs	r7, #0
 80027be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027c2:	f104 081a 	add.w	r8, r4, #26
 80027c6:	e018      	b.n	80027fa <_printf_float+0x38a>
 80027c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027cc:	4659      	mov	r1, fp
 80027ce:	4628      	mov	r0, r5
 80027d0:	47b0      	blx	r6
 80027d2:	3001      	adds	r0, #1
 80027d4:	d1e6      	bne.n	80027a4 <_printf_float+0x334>
 80027d6:	e6a2      	b.n	800251e <_printf_float+0xae>
 80027d8:	464b      	mov	r3, r9
 80027da:	463a      	mov	r2, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	4628      	mov	r0, r5
 80027e0:	47b0      	blx	r6
 80027e2:	3001      	adds	r0, #1
 80027e4:	d1ea      	bne.n	80027bc <_printf_float+0x34c>
 80027e6:	e69a      	b.n	800251e <_printf_float+0xae>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4642      	mov	r2, r8
 80027ec:	4659      	mov	r1, fp
 80027ee:	4628      	mov	r0, r5
 80027f0:	47b0      	blx	r6
 80027f2:	3001      	adds	r0, #1
 80027f4:	f43f ae93 	beq.w	800251e <_printf_float+0xae>
 80027f8:	3701      	adds	r7, #1
 80027fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	eba3 0309 	sub.w	r3, r3, r9
 8002804:	42bb      	cmp	r3, r7
 8002806:	dcef      	bgt.n	80027e8 <_printf_float+0x378>
 8002808:	e74d      	b.n	80026a6 <_printf_float+0x236>
 800280a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800280c:	2a01      	cmp	r2, #1
 800280e:	dc01      	bgt.n	8002814 <_printf_float+0x3a4>
 8002810:	07db      	lsls	r3, r3, #31
 8002812:	d538      	bpl.n	8002886 <_printf_float+0x416>
 8002814:	2301      	movs	r3, #1
 8002816:	463a      	mov	r2, r7
 8002818:	4659      	mov	r1, fp
 800281a:	4628      	mov	r0, r5
 800281c:	47b0      	blx	r6
 800281e:	3001      	adds	r0, #1
 8002820:	f43f ae7d 	beq.w	800251e <_printf_float+0xae>
 8002824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002828:	4659      	mov	r1, fp
 800282a:	4628      	mov	r0, r5
 800282c:	47b0      	blx	r6
 800282e:	3001      	adds	r0, #1
 8002830:	f107 0701 	add.w	r7, r7, #1
 8002834:	f43f ae73 	beq.w	800251e <_printf_float+0xae>
 8002838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800283c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800283e:	2200      	movs	r2, #0
 8002840:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002844:	2300      	movs	r3, #0
 8002846:	f7fe f8af 	bl	80009a8 <__aeabi_dcmpeq>
 800284a:	b9c0      	cbnz	r0, 800287e <_printf_float+0x40e>
 800284c:	4643      	mov	r3, r8
 800284e:	463a      	mov	r2, r7
 8002850:	4659      	mov	r1, fp
 8002852:	4628      	mov	r0, r5
 8002854:	47b0      	blx	r6
 8002856:	3001      	adds	r0, #1
 8002858:	d10d      	bne.n	8002876 <_printf_float+0x406>
 800285a:	e660      	b.n	800251e <_printf_float+0xae>
 800285c:	2301      	movs	r3, #1
 800285e:	4642      	mov	r2, r8
 8002860:	4659      	mov	r1, fp
 8002862:	4628      	mov	r0, r5
 8002864:	47b0      	blx	r6
 8002866:	3001      	adds	r0, #1
 8002868:	f43f ae59 	beq.w	800251e <_printf_float+0xae>
 800286c:	3701      	adds	r7, #1
 800286e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002870:	3b01      	subs	r3, #1
 8002872:	42bb      	cmp	r3, r7
 8002874:	dcf2      	bgt.n	800285c <_printf_float+0x3ec>
 8002876:	464b      	mov	r3, r9
 8002878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800287c:	e6e4      	b.n	8002648 <_printf_float+0x1d8>
 800287e:	2700      	movs	r7, #0
 8002880:	f104 081a 	add.w	r8, r4, #26
 8002884:	e7f3      	b.n	800286e <_printf_float+0x3fe>
 8002886:	2301      	movs	r3, #1
 8002888:	e7e1      	b.n	800284e <_printf_float+0x3de>
 800288a:	2301      	movs	r3, #1
 800288c:	4642      	mov	r2, r8
 800288e:	4659      	mov	r1, fp
 8002890:	4628      	mov	r0, r5
 8002892:	47b0      	blx	r6
 8002894:	3001      	adds	r0, #1
 8002896:	f43f ae42 	beq.w	800251e <_printf_float+0xae>
 800289a:	3701      	adds	r7, #1
 800289c:	68e3      	ldr	r3, [r4, #12]
 800289e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	42bb      	cmp	r3, r7
 80028a4:	dcf1      	bgt.n	800288a <_printf_float+0x41a>
 80028a6:	e702      	b.n	80026ae <_printf_float+0x23e>
 80028a8:	2700      	movs	r7, #0
 80028aa:	f104 0819 	add.w	r8, r4, #25
 80028ae:	e7f5      	b.n	800289c <_printf_float+0x42c>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f43f ae94 	beq.w	80025de <_printf_float+0x16e>
 80028b6:	f04f 0c00 	mov.w	ip, #0
 80028ba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80028be:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80028c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	463a      	mov	r2, r7
 80028d0:	464b      	mov	r3, r9
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7ff fd3a 	bl	800234c <__cvt>
 80028d8:	4607      	mov	r7, r0
 80028da:	e64f      	b.n	800257c <_printf_float+0x10c>

080028dc <_printf_common>:
 80028dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e0:	4691      	mov	r9, r2
 80028e2:	461f      	mov	r7, r3
 80028e4:	688a      	ldr	r2, [r1, #8]
 80028e6:	690b      	ldr	r3, [r1, #16]
 80028e8:	4606      	mov	r6, r0
 80028ea:	4293      	cmp	r3, r2
 80028ec:	bfb8      	it	lt
 80028ee:	4613      	movlt	r3, r2
 80028f0:	f8c9 3000 	str.w	r3, [r9]
 80028f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028f8:	460c      	mov	r4, r1
 80028fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028fe:	b112      	cbz	r2, 8002906 <_printf_common+0x2a>
 8002900:	3301      	adds	r3, #1
 8002902:	f8c9 3000 	str.w	r3, [r9]
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	0699      	lsls	r1, r3, #26
 800290a:	bf42      	ittt	mi
 800290c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002910:	3302      	addmi	r3, #2
 8002912:	f8c9 3000 	strmi.w	r3, [r9]
 8002916:	6825      	ldr	r5, [r4, #0]
 8002918:	f015 0506 	ands.w	r5, r5, #6
 800291c:	d107      	bne.n	800292e <_printf_common+0x52>
 800291e:	f104 0a19 	add.w	sl, r4, #25
 8002922:	68e3      	ldr	r3, [r4, #12]
 8002924:	f8d9 2000 	ldr.w	r2, [r9]
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	42ab      	cmp	r3, r5
 800292c:	dc29      	bgt.n	8002982 <_printf_common+0xa6>
 800292e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	3300      	adds	r3, #0
 8002936:	bf18      	it	ne
 8002938:	2301      	movne	r3, #1
 800293a:	0692      	lsls	r2, r2, #26
 800293c:	d42e      	bmi.n	800299c <_printf_common+0xc0>
 800293e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002942:	4639      	mov	r1, r7
 8002944:	4630      	mov	r0, r6
 8002946:	47c0      	blx	r8
 8002948:	3001      	adds	r0, #1
 800294a:	d021      	beq.n	8002990 <_printf_common+0xb4>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	68e5      	ldr	r5, [r4, #12]
 8002950:	f003 0306 	and.w	r3, r3, #6
 8002954:	2b04      	cmp	r3, #4
 8002956:	bf18      	it	ne
 8002958:	2500      	movne	r5, #0
 800295a:	f8d9 2000 	ldr.w	r2, [r9]
 800295e:	f04f 0900 	mov.w	r9, #0
 8002962:	bf08      	it	eq
 8002964:	1aad      	subeq	r5, r5, r2
 8002966:	68a3      	ldr	r3, [r4, #8]
 8002968:	6922      	ldr	r2, [r4, #16]
 800296a:	bf08      	it	eq
 800296c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002970:	4293      	cmp	r3, r2
 8002972:	bfc4      	itt	gt
 8002974:	1a9b      	subgt	r3, r3, r2
 8002976:	18ed      	addgt	r5, r5, r3
 8002978:	341a      	adds	r4, #26
 800297a:	454d      	cmp	r5, r9
 800297c:	d11a      	bne.n	80029b4 <_printf_common+0xd8>
 800297e:	2000      	movs	r0, #0
 8002980:	e008      	b.n	8002994 <_printf_common+0xb8>
 8002982:	2301      	movs	r3, #1
 8002984:	4652      	mov	r2, sl
 8002986:	4639      	mov	r1, r7
 8002988:	4630      	mov	r0, r6
 800298a:	47c0      	blx	r8
 800298c:	3001      	adds	r0, #1
 800298e:	d103      	bne.n	8002998 <_printf_common+0xbc>
 8002990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002998:	3501      	adds	r5, #1
 800299a:	e7c2      	b.n	8002922 <_printf_common+0x46>
 800299c:	2030      	movs	r0, #48	; 0x30
 800299e:	18e1      	adds	r1, r4, r3
 80029a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029aa:	4422      	add	r2, r4
 80029ac:	3302      	adds	r3, #2
 80029ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029b2:	e7c4      	b.n	800293e <_printf_common+0x62>
 80029b4:	2301      	movs	r3, #1
 80029b6:	4622      	mov	r2, r4
 80029b8:	4639      	mov	r1, r7
 80029ba:	4630      	mov	r0, r6
 80029bc:	47c0      	blx	r8
 80029be:	3001      	adds	r0, #1
 80029c0:	d0e6      	beq.n	8002990 <_printf_common+0xb4>
 80029c2:	f109 0901 	add.w	r9, r9, #1
 80029c6:	e7d8      	b.n	800297a <_printf_common+0x9e>

080029c8 <_printf_i>:
 80029c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80029d0:	460c      	mov	r4, r1
 80029d2:	7e09      	ldrb	r1, [r1, #24]
 80029d4:	b085      	sub	sp, #20
 80029d6:	296e      	cmp	r1, #110	; 0x6e
 80029d8:	4617      	mov	r7, r2
 80029da:	4606      	mov	r6, r0
 80029dc:	4698      	mov	r8, r3
 80029de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029e0:	f000 80b3 	beq.w	8002b4a <_printf_i+0x182>
 80029e4:	d822      	bhi.n	8002a2c <_printf_i+0x64>
 80029e6:	2963      	cmp	r1, #99	; 0x63
 80029e8:	d036      	beq.n	8002a58 <_printf_i+0x90>
 80029ea:	d80a      	bhi.n	8002a02 <_printf_i+0x3a>
 80029ec:	2900      	cmp	r1, #0
 80029ee:	f000 80b9 	beq.w	8002b64 <_printf_i+0x19c>
 80029f2:	2958      	cmp	r1, #88	; 0x58
 80029f4:	f000 8083 	beq.w	8002afe <_printf_i+0x136>
 80029f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a00:	e032      	b.n	8002a68 <_printf_i+0xa0>
 8002a02:	2964      	cmp	r1, #100	; 0x64
 8002a04:	d001      	beq.n	8002a0a <_printf_i+0x42>
 8002a06:	2969      	cmp	r1, #105	; 0x69
 8002a08:	d1f6      	bne.n	80029f8 <_printf_i+0x30>
 8002a0a:	6820      	ldr	r0, [r4, #0]
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	0605      	lsls	r5, r0, #24
 8002a10:	f103 0104 	add.w	r1, r3, #4
 8002a14:	d52a      	bpl.n	8002a6c <_printf_i+0xa4>
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da03      	bge.n	8002a26 <_printf_i+0x5e>
 8002a1e:	222d      	movs	r2, #45	; 0x2d
 8002a20:	425b      	negs	r3, r3
 8002a22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a26:	486f      	ldr	r0, [pc, #444]	; (8002be4 <_printf_i+0x21c>)
 8002a28:	220a      	movs	r2, #10
 8002a2a:	e039      	b.n	8002aa0 <_printf_i+0xd8>
 8002a2c:	2973      	cmp	r1, #115	; 0x73
 8002a2e:	f000 809d 	beq.w	8002b6c <_printf_i+0x1a4>
 8002a32:	d808      	bhi.n	8002a46 <_printf_i+0x7e>
 8002a34:	296f      	cmp	r1, #111	; 0x6f
 8002a36:	d020      	beq.n	8002a7a <_printf_i+0xb2>
 8002a38:	2970      	cmp	r1, #112	; 0x70
 8002a3a:	d1dd      	bne.n	80029f8 <_printf_i+0x30>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	e003      	b.n	8002a4e <_printf_i+0x86>
 8002a46:	2975      	cmp	r1, #117	; 0x75
 8002a48:	d017      	beq.n	8002a7a <_printf_i+0xb2>
 8002a4a:	2978      	cmp	r1, #120	; 0x78
 8002a4c:	d1d4      	bne.n	80029f8 <_printf_i+0x30>
 8002a4e:	2378      	movs	r3, #120	; 0x78
 8002a50:	4865      	ldr	r0, [pc, #404]	; (8002be8 <_printf_i+0x220>)
 8002a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a56:	e055      	b.n	8002b04 <_printf_i+0x13c>
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a5e:	1d19      	adds	r1, r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6011      	str	r1, [r2, #0]
 8002a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e08c      	b.n	8002b86 <_printf_i+0x1be>
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a72:	6011      	str	r1, [r2, #0]
 8002a74:	bf18      	it	ne
 8002a76:	b21b      	sxthne	r3, r3
 8002a78:	e7cf      	b.n	8002a1a <_printf_i+0x52>
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	6825      	ldr	r5, [r4, #0]
 8002a7e:	1d18      	adds	r0, r3, #4
 8002a80:	6010      	str	r0, [r2, #0]
 8002a82:	0628      	lsls	r0, r5, #24
 8002a84:	d501      	bpl.n	8002a8a <_printf_i+0xc2>
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e002      	b.n	8002a90 <_printf_i+0xc8>
 8002a8a:	0668      	lsls	r0, r5, #25
 8002a8c:	d5fb      	bpl.n	8002a86 <_printf_i+0xbe>
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	296f      	cmp	r1, #111	; 0x6f
 8002a92:	bf14      	ite	ne
 8002a94:	220a      	movne	r2, #10
 8002a96:	2208      	moveq	r2, #8
 8002a98:	4852      	ldr	r0, [pc, #328]	; (8002be4 <_printf_i+0x21c>)
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002aa0:	6865      	ldr	r5, [r4, #4]
 8002aa2:	2d00      	cmp	r5, #0
 8002aa4:	60a5      	str	r5, [r4, #8]
 8002aa6:	f2c0 8095 	blt.w	8002bd4 <_printf_i+0x20c>
 8002aaa:	6821      	ldr	r1, [r4, #0]
 8002aac:	f021 0104 	bic.w	r1, r1, #4
 8002ab0:	6021      	str	r1, [r4, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d13d      	bne.n	8002b32 <_printf_i+0x16a>
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	f040 808e 	bne.w	8002bd8 <_printf_i+0x210>
 8002abc:	4665      	mov	r5, ip
 8002abe:	2a08      	cmp	r2, #8
 8002ac0:	d10b      	bne.n	8002ada <_printf_i+0x112>
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	07db      	lsls	r3, r3, #31
 8002ac6:	d508      	bpl.n	8002ada <_printf_i+0x112>
 8002ac8:	6923      	ldr	r3, [r4, #16]
 8002aca:	6862      	ldr	r2, [r4, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	bfde      	ittt	le
 8002ad0:	2330      	movle	r3, #48	; 0x30
 8002ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ad6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ada:	ebac 0305 	sub.w	r3, ip, r5
 8002ade:	6123      	str	r3, [r4, #16]
 8002ae0:	f8cd 8000 	str.w	r8, [sp]
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	aa03      	add	r2, sp, #12
 8002ae8:	4621      	mov	r1, r4
 8002aea:	4630      	mov	r0, r6
 8002aec:	f7ff fef6 	bl	80028dc <_printf_common>
 8002af0:	3001      	adds	r0, #1
 8002af2:	d14d      	bne.n	8002b90 <_printf_i+0x1c8>
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002af8:	b005      	add	sp, #20
 8002afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002afe:	4839      	ldr	r0, [pc, #228]	; (8002be4 <_printf_i+0x21c>)
 8002b00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	6821      	ldr	r1, [r4, #0]
 8002b08:	1d1d      	adds	r5, r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6015      	str	r5, [r2, #0]
 8002b0e:	060a      	lsls	r2, r1, #24
 8002b10:	d50b      	bpl.n	8002b2a <_printf_i+0x162>
 8002b12:	07ca      	lsls	r2, r1, #31
 8002b14:	bf44      	itt	mi
 8002b16:	f041 0120 	orrmi.w	r1, r1, #32
 8002b1a:	6021      	strmi	r1, [r4, #0]
 8002b1c:	b91b      	cbnz	r3, 8002b26 <_printf_i+0x15e>
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	f022 0220 	bic.w	r2, r2, #32
 8002b24:	6022      	str	r2, [r4, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	e7b7      	b.n	8002a9a <_printf_i+0xd2>
 8002b2a:	064d      	lsls	r5, r1, #25
 8002b2c:	bf48      	it	mi
 8002b2e:	b29b      	uxthmi	r3, r3
 8002b30:	e7ef      	b.n	8002b12 <_printf_i+0x14a>
 8002b32:	4665      	mov	r5, ip
 8002b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b38:	fb02 3311 	mls	r3, r2, r1, r3
 8002b3c:	5cc3      	ldrb	r3, [r0, r3]
 8002b3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b42:	460b      	mov	r3, r1
 8002b44:	2900      	cmp	r1, #0
 8002b46:	d1f5      	bne.n	8002b34 <_printf_i+0x16c>
 8002b48:	e7b9      	b.n	8002abe <_printf_i+0xf6>
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	6825      	ldr	r5, [r4, #0]
 8002b4e:	1d18      	adds	r0, r3, #4
 8002b50:	6961      	ldr	r1, [r4, #20]
 8002b52:	6010      	str	r0, [r2, #0]
 8002b54:	0628      	lsls	r0, r5, #24
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	d501      	bpl.n	8002b5e <_printf_i+0x196>
 8002b5a:	6019      	str	r1, [r3, #0]
 8002b5c:	e002      	b.n	8002b64 <_printf_i+0x19c>
 8002b5e:	066a      	lsls	r2, r5, #25
 8002b60:	d5fb      	bpl.n	8002b5a <_printf_i+0x192>
 8002b62:	8019      	strh	r1, [r3, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	4665      	mov	r5, ip
 8002b68:	6123      	str	r3, [r4, #16]
 8002b6a:	e7b9      	b.n	8002ae0 <_printf_i+0x118>
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	1d19      	adds	r1, r3, #4
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	681d      	ldr	r5, [r3, #0]
 8002b74:	6862      	ldr	r2, [r4, #4]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f001 f9a9 	bl	8003ed0 <memchr>
 8002b7e:	b108      	cbz	r0, 8002b84 <_printf_i+0x1bc>
 8002b80:	1b40      	subs	r0, r0, r5
 8002b82:	6060      	str	r0, [r4, #4]
 8002b84:	6863      	ldr	r3, [r4, #4]
 8002b86:	6123      	str	r3, [r4, #16]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b8e:	e7a7      	b.n	8002ae0 <_printf_i+0x118>
 8002b90:	6923      	ldr	r3, [r4, #16]
 8002b92:	462a      	mov	r2, r5
 8002b94:	4639      	mov	r1, r7
 8002b96:	4630      	mov	r0, r6
 8002b98:	47c0      	blx	r8
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d0aa      	beq.n	8002af4 <_printf_i+0x12c>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	079b      	lsls	r3, r3, #30
 8002ba2:	d413      	bmi.n	8002bcc <_printf_i+0x204>
 8002ba4:	68e0      	ldr	r0, [r4, #12]
 8002ba6:	9b03      	ldr	r3, [sp, #12]
 8002ba8:	4298      	cmp	r0, r3
 8002baa:	bfb8      	it	lt
 8002bac:	4618      	movlt	r0, r3
 8002bae:	e7a3      	b.n	8002af8 <_printf_i+0x130>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	464a      	mov	r2, r9
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	47c0      	blx	r8
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d09a      	beq.n	8002af4 <_printf_i+0x12c>
 8002bbe:	3501      	adds	r5, #1
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	9a03      	ldr	r2, [sp, #12]
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	42ab      	cmp	r3, r5
 8002bc8:	dcf2      	bgt.n	8002bb0 <_printf_i+0x1e8>
 8002bca:	e7eb      	b.n	8002ba4 <_printf_i+0x1dc>
 8002bcc:	2500      	movs	r5, #0
 8002bce:	f104 0919 	add.w	r9, r4, #25
 8002bd2:	e7f5      	b.n	8002bc0 <_printf_i+0x1f8>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ac      	bne.n	8002b32 <_printf_i+0x16a>
 8002bd8:	7803      	ldrb	r3, [r0, #0]
 8002bda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be2:	e76c      	b.n	8002abe <_printf_i+0xf6>
 8002be4:	08004afa 	.word	0x08004afa
 8002be8:	08004b0b 	.word	0x08004b0b

08002bec <iprintf>:
 8002bec:	b40f      	push	{r0, r1, r2, r3}
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <iprintf+0x2c>)
 8002bf0:	b513      	push	{r0, r1, r4, lr}
 8002bf2:	681c      	ldr	r4, [r3, #0]
 8002bf4:	b124      	cbz	r4, 8002c00 <iprintf+0x14>
 8002bf6:	69a3      	ldr	r3, [r4, #24]
 8002bf8:	b913      	cbnz	r3, 8002c00 <iprintf+0x14>
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f001 f864 	bl	8003cc8 <__sinit>
 8002c00:	ab05      	add	r3, sp, #20
 8002c02:	9a04      	ldr	r2, [sp, #16]
 8002c04:	68a1      	ldr	r1, [r4, #8]
 8002c06:	4620      	mov	r0, r4
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	f001 fd33 	bl	8004674 <_vfiprintf_r>
 8002c0e:	b002      	add	sp, #8
 8002c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c14:	b004      	add	sp, #16
 8002c16:	4770      	bx	lr
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <_puts_r>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	460e      	mov	r6, r1
 8002c20:	4605      	mov	r5, r0
 8002c22:	b118      	cbz	r0, 8002c2c <_puts_r+0x10>
 8002c24:	6983      	ldr	r3, [r0, #24]
 8002c26:	b90b      	cbnz	r3, 8002c2c <_puts_r+0x10>
 8002c28:	f001 f84e 	bl	8003cc8 <__sinit>
 8002c2c:	69ab      	ldr	r3, [r5, #24]
 8002c2e:	68ac      	ldr	r4, [r5, #8]
 8002c30:	b913      	cbnz	r3, 8002c38 <_puts_r+0x1c>
 8002c32:	4628      	mov	r0, r5
 8002c34:	f001 f848 	bl	8003cc8 <__sinit>
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <_puts_r+0xac>)
 8002c3a:	429c      	cmp	r4, r3
 8002c3c:	d117      	bne.n	8002c6e <_puts_r+0x52>
 8002c3e:	686c      	ldr	r4, [r5, #4]
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	071b      	lsls	r3, r3, #28
 8002c44:	d51d      	bpl.n	8002c82 <_puts_r+0x66>
 8002c46:	6923      	ldr	r3, [r4, #16]
 8002c48:	b1db      	cbz	r3, 8002c82 <_puts_r+0x66>
 8002c4a:	3e01      	subs	r6, #1
 8002c4c:	68a3      	ldr	r3, [r4, #8]
 8002c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c52:	3b01      	subs	r3, #1
 8002c54:	60a3      	str	r3, [r4, #8]
 8002c56:	b9e9      	cbnz	r1, 8002c94 <_puts_r+0x78>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da2e      	bge.n	8002cba <_puts_r+0x9e>
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	210a      	movs	r1, #10
 8002c60:	4628      	mov	r0, r5
 8002c62:	f000 f83f 	bl	8002ce4 <__swbuf_r>
 8002c66:	3001      	adds	r0, #1
 8002c68:	d011      	beq.n	8002c8e <_puts_r+0x72>
 8002c6a:	200a      	movs	r0, #10
 8002c6c:	e011      	b.n	8002c92 <_puts_r+0x76>
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <_puts_r+0xb0>)
 8002c70:	429c      	cmp	r4, r3
 8002c72:	d101      	bne.n	8002c78 <_puts_r+0x5c>
 8002c74:	68ac      	ldr	r4, [r5, #8]
 8002c76:	e7e3      	b.n	8002c40 <_puts_r+0x24>
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <_puts_r+0xb4>)
 8002c7a:	429c      	cmp	r4, r3
 8002c7c:	bf08      	it	eq
 8002c7e:	68ec      	ldreq	r4, [r5, #12]
 8002c80:	e7de      	b.n	8002c40 <_puts_r+0x24>
 8002c82:	4621      	mov	r1, r4
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 f87f 	bl	8002d88 <__swsetup_r>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d0dd      	beq.n	8002c4a <_puts_r+0x2e>
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	da04      	bge.n	8002ca2 <_puts_r+0x86>
 8002c98:	69a2      	ldr	r2, [r4, #24]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dc06      	bgt.n	8002cac <_puts_r+0x90>
 8002c9e:	290a      	cmp	r1, #10
 8002ca0:	d004      	beq.n	8002cac <_puts_r+0x90>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	6022      	str	r2, [r4, #0]
 8002ca8:	7019      	strb	r1, [r3, #0]
 8002caa:	e7cf      	b.n	8002c4c <_puts_r+0x30>
 8002cac:	4622      	mov	r2, r4
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f000 f818 	bl	8002ce4 <__swbuf_r>
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d1c9      	bne.n	8002c4c <_puts_r+0x30>
 8002cb8:	e7e9      	b.n	8002c8e <_puts_r+0x72>
 8002cba:	200a      	movs	r0, #10
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	6022      	str	r2, [r4, #0]
 8002cc2:	7018      	strb	r0, [r3, #0]
 8002cc4:	e7e5      	b.n	8002c92 <_puts_r+0x76>
 8002cc6:	bf00      	nop
 8002cc8:	08004b4c 	.word	0x08004b4c
 8002ccc:	08004b6c 	.word	0x08004b6c
 8002cd0:	08004b2c 	.word	0x08004b2c

08002cd4 <puts>:
 8002cd4:	4b02      	ldr	r3, [pc, #8]	; (8002ce0 <puts+0xc>)
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	f7ff bf9f 	b.w	8002c1c <_puts_r>
 8002cde:	bf00      	nop
 8002ce0:	2000000c 	.word	0x2000000c

08002ce4 <__swbuf_r>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	460e      	mov	r6, r1
 8002ce8:	4614      	mov	r4, r2
 8002cea:	4605      	mov	r5, r0
 8002cec:	b118      	cbz	r0, 8002cf6 <__swbuf_r+0x12>
 8002cee:	6983      	ldr	r3, [r0, #24]
 8002cf0:	b90b      	cbnz	r3, 8002cf6 <__swbuf_r+0x12>
 8002cf2:	f000 ffe9 	bl	8003cc8 <__sinit>
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <__swbuf_r+0x98>)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	d12a      	bne.n	8002d52 <__swbuf_r+0x6e>
 8002cfc:	686c      	ldr	r4, [r5, #4]
 8002cfe:	69a3      	ldr	r3, [r4, #24]
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	071a      	lsls	r2, r3, #28
 8002d06:	d52e      	bpl.n	8002d66 <__swbuf_r+0x82>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	b363      	cbz	r3, 8002d66 <__swbuf_r+0x82>
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	b2f6      	uxtb	r6, r6
 8002d12:	1ac0      	subs	r0, r0, r3
 8002d14:	6963      	ldr	r3, [r4, #20]
 8002d16:	4637      	mov	r7, r6
 8002d18:	4283      	cmp	r3, r0
 8002d1a:	dc04      	bgt.n	8002d26 <__swbuf_r+0x42>
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f000 ff68 	bl	8003bf4 <_fflush_r>
 8002d24:	bb28      	cbnz	r0, 8002d72 <__swbuf_r+0x8e>
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	3001      	adds	r0, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	60a3      	str	r3, [r4, #8]
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	6022      	str	r2, [r4, #0]
 8002d34:	701e      	strb	r6, [r3, #0]
 8002d36:	6963      	ldr	r3, [r4, #20]
 8002d38:	4283      	cmp	r3, r0
 8002d3a:	d004      	beq.n	8002d46 <__swbuf_r+0x62>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	07db      	lsls	r3, r3, #31
 8002d40:	d519      	bpl.n	8002d76 <__swbuf_r+0x92>
 8002d42:	2e0a      	cmp	r6, #10
 8002d44:	d117      	bne.n	8002d76 <__swbuf_r+0x92>
 8002d46:	4621      	mov	r1, r4
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 ff53 	bl	8003bf4 <_fflush_r>
 8002d4e:	b190      	cbz	r0, 8002d76 <__swbuf_r+0x92>
 8002d50:	e00f      	b.n	8002d72 <__swbuf_r+0x8e>
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <__swbuf_r+0x9c>)
 8002d54:	429c      	cmp	r4, r3
 8002d56:	d101      	bne.n	8002d5c <__swbuf_r+0x78>
 8002d58:	68ac      	ldr	r4, [r5, #8]
 8002d5a:	e7d0      	b.n	8002cfe <__swbuf_r+0x1a>
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <__swbuf_r+0xa0>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	bf08      	it	eq
 8002d62:	68ec      	ldreq	r4, [r5, #12]
 8002d64:	e7cb      	b.n	8002cfe <__swbuf_r+0x1a>
 8002d66:	4621      	mov	r1, r4
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f000 f80d 	bl	8002d88 <__swsetup_r>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d0cc      	beq.n	8002d0c <__swbuf_r+0x28>
 8002d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d76:	4638      	mov	r0, r7
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	08004b4c 	.word	0x08004b4c
 8002d80:	08004b6c 	.word	0x08004b6c
 8002d84:	08004b2c 	.word	0x08004b2c

08002d88 <__swsetup_r>:
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <__swsetup_r+0xcc>)
 8002d8a:	b570      	push	{r4, r5, r6, lr}
 8002d8c:	681d      	ldr	r5, [r3, #0]
 8002d8e:	4606      	mov	r6, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	b125      	cbz	r5, 8002d9e <__swsetup_r+0x16>
 8002d94:	69ab      	ldr	r3, [r5, #24]
 8002d96:	b913      	cbnz	r3, 8002d9e <__swsetup_r+0x16>
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 ff95 	bl	8003cc8 <__sinit>
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <__swsetup_r+0xd0>)
 8002da0:	429c      	cmp	r4, r3
 8002da2:	d10f      	bne.n	8002dc4 <__swsetup_r+0x3c>
 8002da4:	686c      	ldr	r4, [r5, #4]
 8002da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	0715      	lsls	r5, r2, #28
 8002dae:	d42c      	bmi.n	8002e0a <__swsetup_r+0x82>
 8002db0:	06d0      	lsls	r0, r2, #27
 8002db2:	d411      	bmi.n	8002dd8 <__swsetup_r+0x50>
 8002db4:	2209      	movs	r2, #9
 8002db6:	6032      	str	r2, [r6, #0]
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc2:	e03e      	b.n	8002e42 <__swsetup_r+0xba>
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <__swsetup_r+0xd4>)
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d101      	bne.n	8002dce <__swsetup_r+0x46>
 8002dca:	68ac      	ldr	r4, [r5, #8]
 8002dcc:	e7eb      	b.n	8002da6 <__swsetup_r+0x1e>
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <__swsetup_r+0xd8>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	bf08      	it	eq
 8002dd4:	68ec      	ldreq	r4, [r5, #12]
 8002dd6:	e7e6      	b.n	8002da6 <__swsetup_r+0x1e>
 8002dd8:	0751      	lsls	r1, r2, #29
 8002dda:	d512      	bpl.n	8002e02 <__swsetup_r+0x7a>
 8002ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dde:	b141      	cbz	r1, 8002df2 <__swsetup_r+0x6a>
 8002de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de4:	4299      	cmp	r1, r3
 8002de6:	d002      	beq.n	8002dee <__swsetup_r+0x66>
 8002de8:	4630      	mov	r0, r6
 8002dea:	f001 fb75 	bl	80044d8 <_free_r>
 8002dee:	2300      	movs	r3, #0
 8002df0:	6363      	str	r3, [r4, #52]	; 0x34
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6923      	ldr	r3, [r4, #16]
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	b94b      	cbnz	r3, 8002e22 <__swsetup_r+0x9a>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d003      	beq.n	8002e22 <__swsetup_r+0x9a>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f001 f80f 	bl	8003e40 <__smakebuf_r>
 8002e22:	89a2      	ldrh	r2, [r4, #12]
 8002e24:	f012 0301 	ands.w	r3, r2, #1
 8002e28:	d00c      	beq.n	8002e44 <__swsetup_r+0xbc>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60a3      	str	r3, [r4, #8]
 8002e2e:	6963      	ldr	r3, [r4, #20]
 8002e30:	425b      	negs	r3, r3
 8002e32:	61a3      	str	r3, [r4, #24]
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	b953      	cbnz	r3, 8002e4e <__swsetup_r+0xc6>
 8002e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e40:	d1ba      	bne.n	8002db8 <__swsetup_r+0x30>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	0792      	lsls	r2, r2, #30
 8002e46:	bf58      	it	pl
 8002e48:	6963      	ldrpl	r3, [r4, #20]
 8002e4a:	60a3      	str	r3, [r4, #8]
 8002e4c:	e7f2      	b.n	8002e34 <__swsetup_r+0xac>
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e7f7      	b.n	8002e42 <__swsetup_r+0xba>
 8002e52:	bf00      	nop
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	08004b4c 	.word	0x08004b4c
 8002e5c:	08004b6c 	.word	0x08004b6c
 8002e60:	08004b2c 	.word	0x08004b2c

08002e64 <quorem>:
 8002e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e68:	6903      	ldr	r3, [r0, #16]
 8002e6a:	690c      	ldr	r4, [r1, #16]
 8002e6c:	4680      	mov	r8, r0
 8002e6e:	42a3      	cmp	r3, r4
 8002e70:	f2c0 8084 	blt.w	8002f7c <quorem+0x118>
 8002e74:	3c01      	subs	r4, #1
 8002e76:	f101 0714 	add.w	r7, r1, #20
 8002e7a:	f100 0614 	add.w	r6, r0, #20
 8002e7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002e82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002e86:	3501      	adds	r5, #1
 8002e88:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e8c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002e90:	eb06 030c 	add.w	r3, r6, ip
 8002e94:	eb07 090c 	add.w	r9, r7, ip
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	b39d      	cbz	r5, 8002f04 <quorem+0xa0>
 8002e9c:	f04f 0a00 	mov.w	sl, #0
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	46b6      	mov	lr, r6
 8002ea4:	46d3      	mov	fp, sl
 8002ea6:	f850 2b04 	ldr.w	r2, [r0], #4
 8002eaa:	b293      	uxth	r3, r2
 8002eac:	fb05 a303 	mla	r3, r5, r3, sl
 8002eb0:	0c12      	lsrs	r2, r2, #16
 8002eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002eb6:	fb05 a202 	mla	r2, r5, r2, sl
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	ebab 0303 	sub.w	r3, fp, r3
 8002ec0:	f8de b000 	ldr.w	fp, [lr]
 8002ec4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002ec8:	fa1f fb8b 	uxth.w	fp, fp
 8002ecc:	445b      	add	r3, fp
 8002ece:	fa1f fb82 	uxth.w	fp, r2
 8002ed2:	f8de 2000 	ldr.w	r2, [lr]
 8002ed6:	4581      	cmp	r9, r0
 8002ed8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ee6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002eea:	f84e 3b04 	str.w	r3, [lr], #4
 8002eee:	d2da      	bcs.n	8002ea6 <quorem+0x42>
 8002ef0:	f856 300c 	ldr.w	r3, [r6, ip]
 8002ef4:	b933      	cbnz	r3, 8002f04 <quorem+0xa0>
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	3b04      	subs	r3, #4
 8002efa:	429e      	cmp	r6, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	d331      	bcc.n	8002f64 <quorem+0x100>
 8002f00:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f04:	4640      	mov	r0, r8
 8002f06:	f001 fa11 	bl	800432c <__mcmp>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	db26      	blt.n	8002f5c <quorem+0xf8>
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f04f 0c00 	mov.w	ip, #0
 8002f14:	3501      	adds	r5, #1
 8002f16:	f857 1b04 	ldr.w	r1, [r7], #4
 8002f1a:	f8d0 e000 	ldr.w	lr, [r0]
 8002f1e:	b28b      	uxth	r3, r1
 8002f20:	ebac 0303 	sub.w	r3, ip, r3
 8002f24:	fa1f f28e 	uxth.w	r2, lr
 8002f28:	4413      	add	r3, r2
 8002f2a:	0c0a      	lsrs	r2, r1, #16
 8002f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f3a:	45b9      	cmp	r9, r7
 8002f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002f40:	f840 3b04 	str.w	r3, [r0], #4
 8002f44:	d2e7      	bcs.n	8002f16 <quorem+0xb2>
 8002f46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002f4a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002f4e:	b92a      	cbnz	r2, 8002f5c <quorem+0xf8>
 8002f50:	3b04      	subs	r3, #4
 8002f52:	429e      	cmp	r6, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	d30b      	bcc.n	8002f70 <quorem+0x10c>
 8002f58:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	b003      	add	sp, #12
 8002f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	3b04      	subs	r3, #4
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d1c9      	bne.n	8002f00 <quorem+0x9c>
 8002f6c:	3c01      	subs	r4, #1
 8002f6e:	e7c4      	b.n	8002efa <quorem+0x96>
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	3b04      	subs	r3, #4
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d1ef      	bne.n	8002f58 <quorem+0xf4>
 8002f78:	3c01      	subs	r4, #1
 8002f7a:	e7ea      	b.n	8002f52 <quorem+0xee>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	e7ee      	b.n	8002f5e <quorem+0xfa>

08002f80 <_dtoa_r>:
 8002f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f84:	4616      	mov	r6, r2
 8002f86:	461f      	mov	r7, r3
 8002f88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002f8a:	b095      	sub	sp, #84	; 0x54
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002f92:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002f96:	b93d      	cbnz	r5, 8002fa8 <_dtoa_r+0x28>
 8002f98:	2010      	movs	r0, #16
 8002f9a:	f000 ff91 	bl	8003ec0 <malloc>
 8002f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8002fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002fa4:	6005      	str	r5, [r0, #0]
 8002fa6:	60c5      	str	r5, [r0, #12]
 8002fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	b151      	cbz	r1, 8002fc4 <_dtoa_r+0x44>
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	604a      	str	r2, [r1, #4]
 8002fb6:	608b      	str	r3, [r1, #8]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 ffd6 	bl	8003f6a <_Bfree>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	1e3b      	subs	r3, r7, #0
 8002fc6:	bfaf      	iteee	ge
 8002fc8:	2300      	movge	r3, #0
 8002fca:	2201      	movlt	r2, #1
 8002fcc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	9303      	strlt	r3, [sp, #12]
 8002fd2:	bfac      	ite	ge
 8002fd4:	f8c8 3000 	strge.w	r3, [r8]
 8002fd8:	f8c8 2000 	strlt.w	r2, [r8]
 8002fdc:	4bae      	ldr	r3, [pc, #696]	; (8003298 <_dtoa_r+0x318>)
 8002fde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002fe2:	ea33 0308 	bics.w	r3, r3, r8
 8002fe6:	d11b      	bne.n	8003020 <_dtoa_r+0xa0>
 8002fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8002fec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	9b02      	ldr	r3, [sp, #8]
 8002ff2:	b923      	cbnz	r3, 8002ffe <_dtoa_r+0x7e>
 8002ff4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	f000 8545 	beq.w	8003a88 <_dtoa_r+0xb08>
 8002ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003000:	b953      	cbnz	r3, 8003018 <_dtoa_r+0x98>
 8003002:	4ba6      	ldr	r3, [pc, #664]	; (800329c <_dtoa_r+0x31c>)
 8003004:	e021      	b.n	800304a <_dtoa_r+0xca>
 8003006:	4ba6      	ldr	r3, [pc, #664]	; (80032a0 <_dtoa_r+0x320>)
 8003008:	9306      	str	r3, [sp, #24]
 800300a:	3308      	adds	r3, #8
 800300c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	9806      	ldr	r0, [sp, #24]
 8003012:	b015      	add	sp, #84	; 0x54
 8003014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003018:	4ba0      	ldr	r3, [pc, #640]	; (800329c <_dtoa_r+0x31c>)
 800301a:	9306      	str	r3, [sp, #24]
 800301c:	3303      	adds	r3, #3
 800301e:	e7f5      	b.n	800300c <_dtoa_r+0x8c>
 8003020:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	2300      	movs	r3, #0
 8003028:	4630      	mov	r0, r6
 800302a:	4639      	mov	r1, r7
 800302c:	f7fd fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8003030:	4682      	mov	sl, r0
 8003032:	b160      	cbz	r0, 800304e <_dtoa_r+0xce>
 8003034:	2301      	movs	r3, #1
 8003036:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8520 	beq.w	8003a82 <_dtoa_r+0xb02>
 8003042:	4b98      	ldr	r3, [pc, #608]	; (80032a4 <_dtoa_r+0x324>)
 8003044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	9306      	str	r3, [sp, #24]
 800304c:	e7e0      	b.n	8003010 <_dtoa_r+0x90>
 800304e:	ab12      	add	r3, sp, #72	; 0x48
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	ab13      	add	r3, sp, #76	; 0x4c
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4632      	mov	r2, r6
 8003058:	463b      	mov	r3, r7
 800305a:	4620      	mov	r0, r4
 800305c:	f001 f9de 	bl	800441c <__d2b>
 8003060:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003064:	4683      	mov	fp, r0
 8003066:	2d00      	cmp	r5, #0
 8003068:	d07d      	beq.n	8003166 <_dtoa_r+0x1e6>
 800306a:	46b0      	mov	r8, r6
 800306c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003070:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003074:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003078:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800307c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003080:	2200      	movs	r2, #0
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <_dtoa_r+0x328>)
 8003084:	4640      	mov	r0, r8
 8003086:	4649      	mov	r1, r9
 8003088:	f7fd f86e 	bl	8000168 <__aeabi_dsub>
 800308c:	a37c      	add	r3, pc, #496	; (adr r3, 8003280 <_dtoa_r+0x300>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fa21 	bl	80004d8 <__aeabi_dmul>
 8003096:	a37c      	add	r3, pc, #496	; (adr r3, 8003288 <_dtoa_r+0x308>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd f866 	bl	800016c <__adddf3>
 80030a0:	4606      	mov	r6, r0
 80030a2:	4628      	mov	r0, r5
 80030a4:	460f      	mov	r7, r1
 80030a6:	f7fd f9ad 	bl	8000404 <__aeabi_i2d>
 80030aa:	a379      	add	r3, pc, #484	; (adr r3, 8003290 <_dtoa_r+0x310>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fa12 	bl	80004d8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4630      	mov	r0, r6
 80030ba:	4639      	mov	r1, r7
 80030bc:	f7fd f856 	bl	800016c <__adddf3>
 80030c0:	4606      	mov	r6, r0
 80030c2:	460f      	mov	r7, r1
 80030c4:	f7fd fcb8 	bl	8000a38 <__aeabi_d2iz>
 80030c8:	2200      	movs	r2, #0
 80030ca:	4682      	mov	sl, r0
 80030cc:	2300      	movs	r3, #0
 80030ce:	4630      	mov	r0, r6
 80030d0:	4639      	mov	r1, r7
 80030d2:	f7fd fc73 	bl	80009bc <__aeabi_dcmplt>
 80030d6:	b148      	cbz	r0, 80030ec <_dtoa_r+0x16c>
 80030d8:	4650      	mov	r0, sl
 80030da:	f7fd f993 	bl	8000404 <__aeabi_i2d>
 80030de:	4632      	mov	r2, r6
 80030e0:	463b      	mov	r3, r7
 80030e2:	f7fd fc61 	bl	80009a8 <__aeabi_dcmpeq>
 80030e6:	b908      	cbnz	r0, 80030ec <_dtoa_r+0x16c>
 80030e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80030ec:	f1ba 0f16 	cmp.w	sl, #22
 80030f0:	d85a      	bhi.n	80031a8 <_dtoa_r+0x228>
 80030f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030f6:	496d      	ldr	r1, [pc, #436]	; (80032ac <_dtoa_r+0x32c>)
 80030f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80030fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003100:	f7fd fc7a 	bl	80009f8 <__aeabi_dcmpgt>
 8003104:	2800      	cmp	r0, #0
 8003106:	d051      	beq.n	80031ac <_dtoa_r+0x22c>
 8003108:	2300      	movs	r3, #0
 800310a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800310e:	930d      	str	r3, [sp, #52]	; 0x34
 8003110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003112:	1b5d      	subs	r5, r3, r5
 8003114:	1e6b      	subs	r3, r5, #1
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	bf43      	ittte	mi
 800311a:	2300      	movmi	r3, #0
 800311c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003120:	9307      	strmi	r3, [sp, #28]
 8003122:	f04f 0900 	movpl.w	r9, #0
 8003126:	f1ba 0f00 	cmp.w	sl, #0
 800312a:	db41      	blt.n	80031b0 <_dtoa_r+0x230>
 800312c:	9b07      	ldr	r3, [sp, #28]
 800312e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003132:	4453      	add	r3, sl
 8003134:	9307      	str	r3, [sp, #28]
 8003136:	2300      	movs	r3, #0
 8003138:	9308      	str	r3, [sp, #32]
 800313a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800313c:	2b09      	cmp	r3, #9
 800313e:	f200 808f 	bhi.w	8003260 <_dtoa_r+0x2e0>
 8003142:	2b05      	cmp	r3, #5
 8003144:	bfc4      	itt	gt
 8003146:	3b04      	subgt	r3, #4
 8003148:	931e      	strgt	r3, [sp, #120]	; 0x78
 800314a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800314c:	bfc8      	it	gt
 800314e:	2500      	movgt	r5, #0
 8003150:	f1a3 0302 	sub.w	r3, r3, #2
 8003154:	bfd8      	it	le
 8003156:	2501      	movle	r5, #1
 8003158:	2b03      	cmp	r3, #3
 800315a:	f200 808d 	bhi.w	8003278 <_dtoa_r+0x2f8>
 800315e:	e8df f003 	tbb	[pc, r3]
 8003162:	7d7b      	.short	0x7d7b
 8003164:	6f2f      	.short	0x6f2f
 8003166:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800316a:	441d      	add	r5, r3
 800316c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003170:	2820      	cmp	r0, #32
 8003172:	dd13      	ble.n	800319c <_dtoa_r+0x21c>
 8003174:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003178:	9b02      	ldr	r3, [sp, #8]
 800317a:	fa08 f800 	lsl.w	r8, r8, r0
 800317e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003182:	fa23 f000 	lsr.w	r0, r3, r0
 8003186:	ea48 0000 	orr.w	r0, r8, r0
 800318a:	f7fd f92b 	bl	80003e4 <__aeabi_ui2d>
 800318e:	2301      	movs	r3, #1
 8003190:	4680      	mov	r8, r0
 8003192:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003196:	3d01      	subs	r5, #1
 8003198:	9310      	str	r3, [sp, #64]	; 0x40
 800319a:	e771      	b.n	8003080 <_dtoa_r+0x100>
 800319c:	9b02      	ldr	r3, [sp, #8]
 800319e:	f1c0 0020 	rsb	r0, r0, #32
 80031a2:	fa03 f000 	lsl.w	r0, r3, r0
 80031a6:	e7f0      	b.n	800318a <_dtoa_r+0x20a>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e7b0      	b.n	800310e <_dtoa_r+0x18e>
 80031ac:	900d      	str	r0, [sp, #52]	; 0x34
 80031ae:	e7af      	b.n	8003110 <_dtoa_r+0x190>
 80031b0:	f1ca 0300 	rsb	r3, sl, #0
 80031b4:	9308      	str	r3, [sp, #32]
 80031b6:	2300      	movs	r3, #0
 80031b8:	eba9 090a 	sub.w	r9, r9, sl
 80031bc:	930c      	str	r3, [sp, #48]	; 0x30
 80031be:	e7bc      	b.n	800313a <_dtoa_r+0x1ba>
 80031c0:	2301      	movs	r3, #1
 80031c2:	9309      	str	r3, [sp, #36]	; 0x24
 80031c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dd74      	ble.n	80032b4 <_dtoa_r+0x334>
 80031ca:	4698      	mov	r8, r3
 80031cc:	9304      	str	r3, [sp, #16]
 80031ce:	2200      	movs	r2, #0
 80031d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80031d2:	6072      	str	r2, [r6, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	f102 0014 	add.w	r0, r2, #20
 80031da:	4298      	cmp	r0, r3
 80031dc:	6871      	ldr	r1, [r6, #4]
 80031de:	d96e      	bls.n	80032be <_dtoa_r+0x33e>
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fe8e 	bl	8003f02 <_Balloc>
 80031e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031e8:	6030      	str	r0, [r6, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b8 0f0e 	cmp.w	r8, #14
 80031f0:	9306      	str	r3, [sp, #24]
 80031f2:	f200 80ed 	bhi.w	80033d0 <_dtoa_r+0x450>
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	f000 80ea 	beq.w	80033d0 <_dtoa_r+0x450>
 80031fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003200:	f1ba 0f00 	cmp.w	sl, #0
 8003204:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003208:	dd77      	ble.n	80032fa <_dtoa_r+0x37a>
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <_dtoa_r+0x32c>)
 800320c:	f00a 030f 	and.w	r3, sl, #15
 8003210:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003218:	06f0      	lsls	r0, r6, #27
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003222:	d568      	bpl.n	80032f6 <_dtoa_r+0x376>
 8003224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <_dtoa_r+0x330>)
 800322a:	2503      	movs	r5, #3
 800322c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003230:	f7fd fa7c 	bl	800072c <__aeabi_ddiv>
 8003234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003238:	f006 060f 	and.w	r6, r6, #15
 800323c:	4f1c      	ldr	r7, [pc, #112]	; (80032b0 <_dtoa_r+0x330>)
 800323e:	e04f      	b.n	80032e0 <_dtoa_r+0x360>
 8003240:	2301      	movs	r3, #1
 8003242:	9309      	str	r3, [sp, #36]	; 0x24
 8003244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003246:	4453      	add	r3, sl
 8003248:	f103 0801 	add.w	r8, r3, #1
 800324c:	9304      	str	r3, [sp, #16]
 800324e:	4643      	mov	r3, r8
 8003250:	2b01      	cmp	r3, #1
 8003252:	bfb8      	it	lt
 8003254:	2301      	movlt	r3, #1
 8003256:	e7ba      	b.n	80031ce <_dtoa_r+0x24e>
 8003258:	2300      	movs	r3, #0
 800325a:	e7b2      	b.n	80031c2 <_dtoa_r+0x242>
 800325c:	2300      	movs	r3, #0
 800325e:	e7f0      	b.n	8003242 <_dtoa_r+0x2c2>
 8003260:	2501      	movs	r5, #1
 8003262:	2300      	movs	r3, #0
 8003264:	9509      	str	r5, [sp, #36]	; 0x24
 8003266:	931e      	str	r3, [sp, #120]	; 0x78
 8003268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800326c:	2200      	movs	r2, #0
 800326e:	9304      	str	r3, [sp, #16]
 8003270:	4698      	mov	r8, r3
 8003272:	2312      	movs	r3, #18
 8003274:	921f      	str	r2, [sp, #124]	; 0x7c
 8003276:	e7aa      	b.n	80031ce <_dtoa_r+0x24e>
 8003278:	2301      	movs	r3, #1
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	e7f4      	b.n	8003268 <_dtoa_r+0x2e8>
 800327e:	bf00      	nop
 8003280:	636f4361 	.word	0x636f4361
 8003284:	3fd287a7 	.word	0x3fd287a7
 8003288:	8b60c8b3 	.word	0x8b60c8b3
 800328c:	3fc68a28 	.word	0x3fc68a28
 8003290:	509f79fb 	.word	0x509f79fb
 8003294:	3fd34413 	.word	0x3fd34413
 8003298:	7ff00000 	.word	0x7ff00000
 800329c:	08004b25 	.word	0x08004b25
 80032a0:	08004b1c 	.word	0x08004b1c
 80032a4:	08004af9 	.word	0x08004af9
 80032a8:	3ff80000 	.word	0x3ff80000
 80032ac:	08004bb8 	.word	0x08004bb8
 80032b0:	08004b90 	.word	0x08004b90
 80032b4:	2301      	movs	r3, #1
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	4698      	mov	r8, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	e7da      	b.n	8003274 <_dtoa_r+0x2f4>
 80032be:	3101      	adds	r1, #1
 80032c0:	6071      	str	r1, [r6, #4]
 80032c2:	0052      	lsls	r2, r2, #1
 80032c4:	e787      	b.n	80031d6 <_dtoa_r+0x256>
 80032c6:	07f1      	lsls	r1, r6, #31
 80032c8:	d508      	bpl.n	80032dc <_dtoa_r+0x35c>
 80032ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d2:	f7fd f901 	bl	80004d8 <__aeabi_dmul>
 80032d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032da:	3501      	adds	r5, #1
 80032dc:	1076      	asrs	r6, r6, #1
 80032de:	3708      	adds	r7, #8
 80032e0:	2e00      	cmp	r6, #0
 80032e2:	d1f0      	bne.n	80032c6 <_dtoa_r+0x346>
 80032e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032ec:	f7fd fa1e 	bl	800072c <__aeabi_ddiv>
 80032f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032f4:	e01b      	b.n	800332e <_dtoa_r+0x3ae>
 80032f6:	2502      	movs	r5, #2
 80032f8:	e7a0      	b.n	800323c <_dtoa_r+0x2bc>
 80032fa:	f000 80a4 	beq.w	8003446 <_dtoa_r+0x4c6>
 80032fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003302:	f1ca 0600 	rsb	r6, sl, #0
 8003306:	4ba0      	ldr	r3, [pc, #640]	; (8003588 <_dtoa_r+0x608>)
 8003308:	f006 020f 	and.w	r2, r6, #15
 800330c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f7fd f8e0 	bl	80004d8 <__aeabi_dmul>
 8003318:	2502      	movs	r5, #2
 800331a:	2300      	movs	r3, #0
 800331c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003320:	4f9a      	ldr	r7, [pc, #616]	; (800358c <_dtoa_r+0x60c>)
 8003322:	1136      	asrs	r6, r6, #4
 8003324:	2e00      	cmp	r6, #0
 8003326:	f040 8083 	bne.w	8003430 <_dtoa_r+0x4b0>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e0      	bne.n	80032f0 <_dtoa_r+0x370>
 800332e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808a 	beq.w	800344a <_dtoa_r+0x4ca>
 8003336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800333a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800333e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003342:	2200      	movs	r2, #0
 8003344:	4b92      	ldr	r3, [pc, #584]	; (8003590 <_dtoa_r+0x610>)
 8003346:	f7fd fb39 	bl	80009bc <__aeabi_dcmplt>
 800334a:	2800      	cmp	r0, #0
 800334c:	d07d      	beq.n	800344a <_dtoa_r+0x4ca>
 800334e:	f1b8 0f00 	cmp.w	r8, #0
 8003352:	d07a      	beq.n	800344a <_dtoa_r+0x4ca>
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	dd36      	ble.n	80033c8 <_dtoa_r+0x448>
 800335a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800335e:	2200      	movs	r2, #0
 8003360:	4b8c      	ldr	r3, [pc, #560]	; (8003594 <_dtoa_r+0x614>)
 8003362:	f7fd f8b9 	bl	80004d8 <__aeabi_dmul>
 8003366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800336a:	9e04      	ldr	r6, [sp, #16]
 800336c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8003370:	3501      	adds	r5, #1
 8003372:	4628      	mov	r0, r5
 8003374:	f7fd f846 	bl	8000404 <__aeabi_i2d>
 8003378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800337c:	f7fd f8ac 	bl	80004d8 <__aeabi_dmul>
 8003380:	2200      	movs	r2, #0
 8003382:	4b85      	ldr	r3, [pc, #532]	; (8003598 <_dtoa_r+0x618>)
 8003384:	f7fc fef2 	bl	800016c <__adddf3>
 8003388:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800338c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003390:	950b      	str	r5, [sp, #44]	; 0x2c
 8003392:	2e00      	cmp	r6, #0
 8003394:	d15c      	bne.n	8003450 <_dtoa_r+0x4d0>
 8003396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	4b7f      	ldr	r3, [pc, #508]	; (800359c <_dtoa_r+0x61c>)
 800339e:	f7fc fee3 	bl	8000168 <__aeabi_dsub>
 80033a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033a4:	462b      	mov	r3, r5
 80033a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033aa:	f7fd fb25 	bl	80009f8 <__aeabi_dcmpgt>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f040 8281 	bne.w	80038b6 <_dtoa_r+0x936>
 80033b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80033be:	f7fd fafd 	bl	80009bc <__aeabi_dcmplt>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	f040 8275 	bne.w	80038b2 <_dtoa_r+0x932>
 80033c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80033cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f2c0 814b 	blt.w	800366e <_dtoa_r+0x6ee>
 80033d8:	f1ba 0f0e 	cmp.w	sl, #14
 80033dc:	f300 8147 	bgt.w	800366e <_dtoa_r+0x6ee>
 80033e0:	4b69      	ldr	r3, [pc, #420]	; (8003588 <_dtoa_r+0x608>)
 80033e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f280 80d7 	bge.w	80035a4 <_dtoa_r+0x624>
 80033f6:	f1b8 0f00 	cmp.w	r8, #0
 80033fa:	f300 80d3 	bgt.w	80035a4 <_dtoa_r+0x624>
 80033fe:	f040 8257 	bne.w	80038b0 <_dtoa_r+0x930>
 8003402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003406:	2200      	movs	r2, #0
 8003408:	4b64      	ldr	r3, [pc, #400]	; (800359c <_dtoa_r+0x61c>)
 800340a:	f7fd f865 	bl	80004d8 <__aeabi_dmul>
 800340e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003412:	f7fd fae7 	bl	80009e4 <__aeabi_dcmpge>
 8003416:	4646      	mov	r6, r8
 8003418:	4647      	mov	r7, r8
 800341a:	2800      	cmp	r0, #0
 800341c:	f040 822d 	bne.w	800387a <_dtoa_r+0x8fa>
 8003420:	9b06      	ldr	r3, [sp, #24]
 8003422:	9a06      	ldr	r2, [sp, #24]
 8003424:	1c5d      	adds	r5, r3, #1
 8003426:	2331      	movs	r3, #49	; 0x31
 8003428:	f10a 0a01 	add.w	sl, sl, #1
 800342c:	7013      	strb	r3, [r2, #0]
 800342e:	e228      	b.n	8003882 <_dtoa_r+0x902>
 8003430:	07f2      	lsls	r2, r6, #31
 8003432:	d505      	bpl.n	8003440 <_dtoa_r+0x4c0>
 8003434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003438:	f7fd f84e 	bl	80004d8 <__aeabi_dmul>
 800343c:	2301      	movs	r3, #1
 800343e:	3501      	adds	r5, #1
 8003440:	1076      	asrs	r6, r6, #1
 8003442:	3708      	adds	r7, #8
 8003444:	e76e      	b.n	8003324 <_dtoa_r+0x3a4>
 8003446:	2502      	movs	r5, #2
 8003448:	e771      	b.n	800332e <_dtoa_r+0x3ae>
 800344a:	4657      	mov	r7, sl
 800344c:	4646      	mov	r6, r8
 800344e:	e790      	b.n	8003372 <_dtoa_r+0x3f2>
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <_dtoa_r+0x608>)
 8003452:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003456:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800345a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d048      	beq.n	80034f2 <_dtoa_r+0x572>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	2000      	movs	r0, #0
 8003466:	494e      	ldr	r1, [pc, #312]	; (80035a0 <_dtoa_r+0x620>)
 8003468:	f7fd f960 	bl	800072c <__aeabi_ddiv>
 800346c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003470:	f7fc fe7a 	bl	8000168 <__aeabi_dsub>
 8003474:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003478:	9d06      	ldr	r5, [sp, #24]
 800347a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800347e:	f7fd fadb 	bl	8000a38 <__aeabi_d2iz>
 8003482:	9011      	str	r0, [sp, #68]	; 0x44
 8003484:	f7fc ffbe 	bl	8000404 <__aeabi_i2d>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003490:	f7fc fe6a 	bl	8000168 <__aeabi_dsub>
 8003494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800349a:	3330      	adds	r3, #48	; 0x30
 800349c:	f805 3b01 	strb.w	r3, [r5], #1
 80034a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034a4:	f7fd fa8a 	bl	80009bc <__aeabi_dcmplt>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d163      	bne.n	8003574 <_dtoa_r+0x5f4>
 80034ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034b0:	2000      	movs	r0, #0
 80034b2:	4937      	ldr	r1, [pc, #220]	; (8003590 <_dtoa_r+0x610>)
 80034b4:	f7fc fe58 	bl	8000168 <__aeabi_dsub>
 80034b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034bc:	f7fd fa7e 	bl	80009bc <__aeabi_dcmplt>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	f040 80b5 	bne.w	8003630 <_dtoa_r+0x6b0>
 80034c6:	9b06      	ldr	r3, [sp, #24]
 80034c8:	1aeb      	subs	r3, r5, r3
 80034ca:	429e      	cmp	r6, r3
 80034cc:	f77f af7c 	ble.w	80033c8 <_dtoa_r+0x448>
 80034d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80034d4:	2200      	movs	r2, #0
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <_dtoa_r+0x614>)
 80034d8:	f7fc fffe 	bl	80004d8 <__aeabi_dmul>
 80034dc:	2200      	movs	r2, #0
 80034de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e6:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <_dtoa_r+0x614>)
 80034e8:	f7fc fff6 	bl	80004d8 <__aeabi_dmul>
 80034ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034f0:	e7c3      	b.n	800347a <_dtoa_r+0x4fa>
 80034f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034f6:	f7fc ffef 	bl	80004d8 <__aeabi_dmul>
 80034fa:	9b06      	ldr	r3, [sp, #24]
 80034fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003500:	199d      	adds	r5, r3, r6
 8003502:	461e      	mov	r6, r3
 8003504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003508:	f7fd fa96 	bl	8000a38 <__aeabi_d2iz>
 800350c:	9011      	str	r0, [sp, #68]	; 0x44
 800350e:	f7fc ff79 	bl	8000404 <__aeabi_i2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800351a:	f7fc fe25 	bl	8000168 <__aeabi_dsub>
 800351e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003524:	3330      	adds	r3, #48	; 0x30
 8003526:	f806 3b01 	strb.w	r3, [r6], #1
 800352a:	42ae      	cmp	r6, r5
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	d124      	bne.n	800357c <_dtoa_r+0x5fc>
 8003532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <_dtoa_r+0x620>)
 8003538:	f7fc fe18 	bl	800016c <__adddf3>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003544:	f7fd fa58 	bl	80009f8 <__aeabi_dcmpgt>
 8003548:	2800      	cmp	r0, #0
 800354a:	d171      	bne.n	8003630 <_dtoa_r+0x6b0>
 800354c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003550:	2000      	movs	r0, #0
 8003552:	4913      	ldr	r1, [pc, #76]	; (80035a0 <_dtoa_r+0x620>)
 8003554:	f7fc fe08 	bl	8000168 <__aeabi_dsub>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003560:	f7fd fa2c 	bl	80009bc <__aeabi_dcmplt>
 8003564:	2800      	cmp	r0, #0
 8003566:	f43f af2f 	beq.w	80033c8 <_dtoa_r+0x448>
 800356a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800356e:	1e6a      	subs	r2, r5, #1
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d001      	beq.n	8003578 <_dtoa_r+0x5f8>
 8003574:	46ba      	mov	sl, r7
 8003576:	e04a      	b.n	800360e <_dtoa_r+0x68e>
 8003578:	4615      	mov	r5, r2
 800357a:	e7f6      	b.n	800356a <_dtoa_r+0x5ea>
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <_dtoa_r+0x614>)
 800357e:	f7fc ffab 	bl	80004d8 <__aeabi_dmul>
 8003582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003586:	e7bd      	b.n	8003504 <_dtoa_r+0x584>
 8003588:	08004bb8 	.word	0x08004bb8
 800358c:	08004b90 	.word	0x08004b90
 8003590:	3ff00000 	.word	0x3ff00000
 8003594:	40240000 	.word	0x40240000
 8003598:	401c0000 	.word	0x401c0000
 800359c:	40140000 	.word	0x40140000
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	9d06      	ldr	r5, [sp, #24]
 80035a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80035aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035ae:	4630      	mov	r0, r6
 80035b0:	4639      	mov	r1, r7
 80035b2:	f7fd f8bb 	bl	800072c <__aeabi_ddiv>
 80035b6:	f7fd fa3f 	bl	8000a38 <__aeabi_d2iz>
 80035ba:	4681      	mov	r9, r0
 80035bc:	f7fc ff22 	bl	8000404 <__aeabi_i2d>
 80035c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035c4:	f7fc ff88 	bl	80004d8 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4630      	mov	r0, r6
 80035ce:	4639      	mov	r1, r7
 80035d0:	f7fc fdca 	bl	8000168 <__aeabi_dsub>
 80035d4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80035d8:	f805 6b01 	strb.w	r6, [r5], #1
 80035dc:	9e06      	ldr	r6, [sp, #24]
 80035de:	4602      	mov	r2, r0
 80035e0:	1bae      	subs	r6, r5, r6
 80035e2:	45b0      	cmp	r8, r6
 80035e4:	460b      	mov	r3, r1
 80035e6:	d135      	bne.n	8003654 <_dtoa_r+0x6d4>
 80035e8:	f7fc fdc0 	bl	800016c <__adddf3>
 80035ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035f0:	4606      	mov	r6, r0
 80035f2:	460f      	mov	r7, r1
 80035f4:	f7fd fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80035f8:	b9c8      	cbnz	r0, 800362e <_dtoa_r+0x6ae>
 80035fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035fe:	4630      	mov	r0, r6
 8003600:	4639      	mov	r1, r7
 8003602:	f7fd f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8003606:	b110      	cbz	r0, 800360e <_dtoa_r+0x68e>
 8003608:	f019 0f01 	tst.w	r9, #1
 800360c:	d10f      	bne.n	800362e <_dtoa_r+0x6ae>
 800360e:	4659      	mov	r1, fp
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fcaa 	bl	8003f6a <_Bfree>
 8003616:	2300      	movs	r3, #0
 8003618:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800361a:	702b      	strb	r3, [r5, #0]
 800361c:	f10a 0301 	add.w	r3, sl, #1
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003624:	2b00      	cmp	r3, #0
 8003626:	f43f acf3 	beq.w	8003010 <_dtoa_r+0x90>
 800362a:	601d      	str	r5, [r3, #0]
 800362c:	e4f0      	b.n	8003010 <_dtoa_r+0x90>
 800362e:	4657      	mov	r7, sl
 8003630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003634:	1e6b      	subs	r3, r5, #1
 8003636:	2a39      	cmp	r2, #57	; 0x39
 8003638:	d106      	bne.n	8003648 <_dtoa_r+0x6c8>
 800363a:	9a06      	ldr	r2, [sp, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <_dtoa_r+0x6d0>
 8003640:	2330      	movs	r3, #48	; 0x30
 8003642:	7013      	strb	r3, [r2, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	3701      	adds	r7, #1
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	3201      	adds	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e791      	b.n	8003574 <_dtoa_r+0x5f4>
 8003650:	461d      	mov	r5, r3
 8003652:	e7ed      	b.n	8003630 <_dtoa_r+0x6b0>
 8003654:	2200      	movs	r2, #0
 8003656:	4b99      	ldr	r3, [pc, #612]	; (80038bc <_dtoa_r+0x93c>)
 8003658:	f7fc ff3e 	bl	80004d8 <__aeabi_dmul>
 800365c:	2200      	movs	r2, #0
 800365e:	2300      	movs	r3, #0
 8003660:	4606      	mov	r6, r0
 8003662:	460f      	mov	r7, r1
 8003664:	f7fd f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8003668:	2800      	cmp	r0, #0
 800366a:	d09e      	beq.n	80035aa <_dtoa_r+0x62a>
 800366c:	e7cf      	b.n	800360e <_dtoa_r+0x68e>
 800366e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003670:	2a00      	cmp	r2, #0
 8003672:	f000 8088 	beq.w	8003786 <_dtoa_r+0x806>
 8003676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003678:	2a01      	cmp	r2, #1
 800367a:	dc6d      	bgt.n	8003758 <_dtoa_r+0x7d8>
 800367c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800367e:	2a00      	cmp	r2, #0
 8003680:	d066      	beq.n	8003750 <_dtoa_r+0x7d0>
 8003682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003686:	464d      	mov	r5, r9
 8003688:	9e08      	ldr	r6, [sp, #32]
 800368a:	9a07      	ldr	r2, [sp, #28]
 800368c:	2101      	movs	r1, #1
 800368e:	441a      	add	r2, r3
 8003690:	4620      	mov	r0, r4
 8003692:	4499      	add	r9, r3
 8003694:	9207      	str	r2, [sp, #28]
 8003696:	f000 fd08 	bl	80040aa <__i2b>
 800369a:	4607      	mov	r7, r0
 800369c:	2d00      	cmp	r5, #0
 800369e:	dd0b      	ble.n	80036b8 <_dtoa_r+0x738>
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	dd08      	ble.n	80036b8 <_dtoa_r+0x738>
 80036a6:	42ab      	cmp	r3, r5
 80036a8:	bfa8      	it	ge
 80036aa:	462b      	movge	r3, r5
 80036ac:	9a07      	ldr	r2, [sp, #28]
 80036ae:	eba9 0903 	sub.w	r9, r9, r3
 80036b2:	1aed      	subs	r5, r5, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	9307      	str	r3, [sp, #28]
 80036b8:	9b08      	ldr	r3, [sp, #32]
 80036ba:	b1eb      	cbz	r3, 80036f8 <_dtoa_r+0x778>
 80036bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d065      	beq.n	800378e <_dtoa_r+0x80e>
 80036c2:	b18e      	cbz	r6, 80036e8 <_dtoa_r+0x768>
 80036c4:	4639      	mov	r1, r7
 80036c6:	4632      	mov	r2, r6
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 fd8d 	bl	80041e8 <__pow5mult>
 80036ce:	465a      	mov	r2, fp
 80036d0:	4601      	mov	r1, r0
 80036d2:	4607      	mov	r7, r0
 80036d4:	4620      	mov	r0, r4
 80036d6:	f000 fcf1 	bl	80040bc <__multiply>
 80036da:	4659      	mov	r1, fp
 80036dc:	900a      	str	r0, [sp, #40]	; 0x28
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 fc43 	bl	8003f6a <_Bfree>
 80036e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036e6:	469b      	mov	fp, r3
 80036e8:	9b08      	ldr	r3, [sp, #32]
 80036ea:	1b9a      	subs	r2, r3, r6
 80036ec:	d004      	beq.n	80036f8 <_dtoa_r+0x778>
 80036ee:	4659      	mov	r1, fp
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 fd79 	bl	80041e8 <__pow5mult>
 80036f6:	4683      	mov	fp, r0
 80036f8:	2101      	movs	r1, #1
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fcd5 	bl	80040aa <__i2b>
 8003700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003702:	4606      	mov	r6, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 81c6 	beq.w	8003a96 <_dtoa_r+0xb16>
 800370a:	461a      	mov	r2, r3
 800370c:	4601      	mov	r1, r0
 800370e:	4620      	mov	r0, r4
 8003710:	f000 fd6a 	bl	80041e8 <__pow5mult>
 8003714:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003716:	4606      	mov	r6, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	dc3e      	bgt.n	800379a <_dtoa_r+0x81a>
 800371c:	9b02      	ldr	r3, [sp, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d137      	bne.n	8003792 <_dtoa_r+0x812>
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003728:	2b00      	cmp	r3, #0
 800372a:	d134      	bne.n	8003796 <_dtoa_r+0x816>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003732:	0d1b      	lsrs	r3, r3, #20
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	b12b      	cbz	r3, 8003744 <_dtoa_r+0x7c4>
 8003738:	9b07      	ldr	r3, [sp, #28]
 800373a:	f109 0901 	add.w	r9, r9, #1
 800373e:	3301      	adds	r3, #1
 8003740:	9307      	str	r3, [sp, #28]
 8003742:	2301      	movs	r3, #1
 8003744:	9308      	str	r3, [sp, #32]
 8003746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d128      	bne.n	800379e <_dtoa_r+0x81e>
 800374c:	2001      	movs	r0, #1
 800374e:	e02e      	b.n	80037ae <_dtoa_r+0x82e>
 8003750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003752:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003756:	e796      	b.n	8003686 <_dtoa_r+0x706>
 8003758:	9b08      	ldr	r3, [sp, #32]
 800375a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800375e:	42b3      	cmp	r3, r6
 8003760:	bfb7      	itett	lt
 8003762:	9b08      	ldrlt	r3, [sp, #32]
 8003764:	1b9e      	subge	r6, r3, r6
 8003766:	1af2      	sublt	r2, r6, r3
 8003768:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800376a:	bfbf      	itttt	lt
 800376c:	9608      	strlt	r6, [sp, #32]
 800376e:	189b      	addlt	r3, r3, r2
 8003770:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003772:	2600      	movlt	r6, #0
 8003774:	f1b8 0f00 	cmp.w	r8, #0
 8003778:	bfb9      	ittee	lt
 800377a:	eba9 0508 	sublt.w	r5, r9, r8
 800377e:	2300      	movlt	r3, #0
 8003780:	464d      	movge	r5, r9
 8003782:	4643      	movge	r3, r8
 8003784:	e781      	b.n	800368a <_dtoa_r+0x70a>
 8003786:	9e08      	ldr	r6, [sp, #32]
 8003788:	464d      	mov	r5, r9
 800378a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800378c:	e786      	b.n	800369c <_dtoa_r+0x71c>
 800378e:	9a08      	ldr	r2, [sp, #32]
 8003790:	e7ad      	b.n	80036ee <_dtoa_r+0x76e>
 8003792:	2300      	movs	r3, #0
 8003794:	e7d6      	b.n	8003744 <_dtoa_r+0x7c4>
 8003796:	9b02      	ldr	r3, [sp, #8]
 8003798:	e7d4      	b.n	8003744 <_dtoa_r+0x7c4>
 800379a:	2300      	movs	r3, #0
 800379c:	9308      	str	r3, [sp, #32]
 800379e:	6933      	ldr	r3, [r6, #16]
 80037a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80037a4:	6918      	ldr	r0, [r3, #16]
 80037a6:	f000 fc32 	bl	800400e <__hi0bits>
 80037aa:	f1c0 0020 	rsb	r0, r0, #32
 80037ae:	9b07      	ldr	r3, [sp, #28]
 80037b0:	4418      	add	r0, r3
 80037b2:	f010 001f 	ands.w	r0, r0, #31
 80037b6:	d047      	beq.n	8003848 <_dtoa_r+0x8c8>
 80037b8:	f1c0 0320 	rsb	r3, r0, #32
 80037bc:	2b04      	cmp	r3, #4
 80037be:	dd3b      	ble.n	8003838 <_dtoa_r+0x8b8>
 80037c0:	9b07      	ldr	r3, [sp, #28]
 80037c2:	f1c0 001c 	rsb	r0, r0, #28
 80037c6:	4481      	add	r9, r0
 80037c8:	4405      	add	r5, r0
 80037ca:	4403      	add	r3, r0
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	f1b9 0f00 	cmp.w	r9, #0
 80037d2:	dd05      	ble.n	80037e0 <_dtoa_r+0x860>
 80037d4:	4659      	mov	r1, fp
 80037d6:	464a      	mov	r2, r9
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fd53 	bl	8004284 <__lshift>
 80037de:	4683      	mov	fp, r0
 80037e0:	9b07      	ldr	r3, [sp, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dd05      	ble.n	80037f2 <_dtoa_r+0x872>
 80037e6:	4631      	mov	r1, r6
 80037e8:	461a      	mov	r2, r3
 80037ea:	4620      	mov	r0, r4
 80037ec:	f000 fd4a 	bl	8004284 <__lshift>
 80037f0:	4606      	mov	r6, r0
 80037f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037f4:	b353      	cbz	r3, 800384c <_dtoa_r+0x8cc>
 80037f6:	4631      	mov	r1, r6
 80037f8:	4658      	mov	r0, fp
 80037fa:	f000 fd97 	bl	800432c <__mcmp>
 80037fe:	2800      	cmp	r0, #0
 8003800:	da24      	bge.n	800384c <_dtoa_r+0x8cc>
 8003802:	2300      	movs	r3, #0
 8003804:	4659      	mov	r1, fp
 8003806:	220a      	movs	r2, #10
 8003808:	4620      	mov	r0, r4
 800380a:	f000 fbc5 	bl	8003f98 <__multadd>
 800380e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003810:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003814:	4683      	mov	fp, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8144 	beq.w	8003aa4 <_dtoa_r+0xb24>
 800381c:	2300      	movs	r3, #0
 800381e:	4639      	mov	r1, r7
 8003820:	220a      	movs	r2, #10
 8003822:	4620      	mov	r0, r4
 8003824:	f000 fbb8 	bl	8003f98 <__multadd>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	4607      	mov	r7, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	dc4d      	bgt.n	80038cc <_dtoa_r+0x94c>
 8003830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003832:	2b02      	cmp	r3, #2
 8003834:	dd4a      	ble.n	80038cc <_dtoa_r+0x94c>
 8003836:	e011      	b.n	800385c <_dtoa_r+0x8dc>
 8003838:	d0c9      	beq.n	80037ce <_dtoa_r+0x84e>
 800383a:	9a07      	ldr	r2, [sp, #28]
 800383c:	331c      	adds	r3, #28
 800383e:	441a      	add	r2, r3
 8003840:	4499      	add	r9, r3
 8003842:	441d      	add	r5, r3
 8003844:	4613      	mov	r3, r2
 8003846:	e7c1      	b.n	80037cc <_dtoa_r+0x84c>
 8003848:	4603      	mov	r3, r0
 800384a:	e7f6      	b.n	800383a <_dtoa_r+0x8ba>
 800384c:	f1b8 0f00 	cmp.w	r8, #0
 8003850:	dc36      	bgt.n	80038c0 <_dtoa_r+0x940>
 8003852:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003854:	2b02      	cmp	r3, #2
 8003856:	dd33      	ble.n	80038c0 <_dtoa_r+0x940>
 8003858:	f8cd 8010 	str.w	r8, [sp, #16]
 800385c:	9b04      	ldr	r3, [sp, #16]
 800385e:	b963      	cbnz	r3, 800387a <_dtoa_r+0x8fa>
 8003860:	4631      	mov	r1, r6
 8003862:	2205      	movs	r2, #5
 8003864:	4620      	mov	r0, r4
 8003866:	f000 fb97 	bl	8003f98 <__multadd>
 800386a:	4601      	mov	r1, r0
 800386c:	4606      	mov	r6, r0
 800386e:	4658      	mov	r0, fp
 8003870:	f000 fd5c 	bl	800432c <__mcmp>
 8003874:	2800      	cmp	r0, #0
 8003876:	f73f add3 	bgt.w	8003420 <_dtoa_r+0x4a0>
 800387a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800387c:	9d06      	ldr	r5, [sp, #24]
 800387e:	ea6f 0a03 	mvn.w	sl, r3
 8003882:	f04f 0900 	mov.w	r9, #0
 8003886:	4631      	mov	r1, r6
 8003888:	4620      	mov	r0, r4
 800388a:	f000 fb6e 	bl	8003f6a <_Bfree>
 800388e:	2f00      	cmp	r7, #0
 8003890:	f43f aebd 	beq.w	800360e <_dtoa_r+0x68e>
 8003894:	f1b9 0f00 	cmp.w	r9, #0
 8003898:	d005      	beq.n	80038a6 <_dtoa_r+0x926>
 800389a:	45b9      	cmp	r9, r7
 800389c:	d003      	beq.n	80038a6 <_dtoa_r+0x926>
 800389e:	4649      	mov	r1, r9
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 fb62 	bl	8003f6a <_Bfree>
 80038a6:	4639      	mov	r1, r7
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fb5e 	bl	8003f6a <_Bfree>
 80038ae:	e6ae      	b.n	800360e <_dtoa_r+0x68e>
 80038b0:	2600      	movs	r6, #0
 80038b2:	4637      	mov	r7, r6
 80038b4:	e7e1      	b.n	800387a <_dtoa_r+0x8fa>
 80038b6:	46ba      	mov	sl, r7
 80038b8:	4637      	mov	r7, r6
 80038ba:	e5b1      	b.n	8003420 <_dtoa_r+0x4a0>
 80038bc:	40240000 	.word	0x40240000
 80038c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80f3 	beq.w	8003ab2 <_dtoa_r+0xb32>
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	dd05      	ble.n	80038dc <_dtoa_r+0x95c>
 80038d0:	4639      	mov	r1, r7
 80038d2:	462a      	mov	r2, r5
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 fcd5 	bl	8004284 <__lshift>
 80038da:	4607      	mov	r7, r0
 80038dc:	9b08      	ldr	r3, [sp, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d04c      	beq.n	800397c <_dtoa_r+0x9fc>
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 fb0c 	bl	8003f02 <_Balloc>
 80038ea:	4605      	mov	r5, r0
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	f107 010c 	add.w	r1, r7, #12
 80038f2:	3202      	adds	r2, #2
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	300c      	adds	r0, #12
 80038f8:	f000 faf8 	bl	8003eec <memcpy>
 80038fc:	2201      	movs	r2, #1
 80038fe:	4629      	mov	r1, r5
 8003900:	4620      	mov	r0, r4
 8003902:	f000 fcbf 	bl	8004284 <__lshift>
 8003906:	46b9      	mov	r9, r7
 8003908:	4607      	mov	r7, r0
 800390a:	9b06      	ldr	r3, [sp, #24]
 800390c:	9307      	str	r3, [sp, #28]
 800390e:	9b02      	ldr	r3, [sp, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	9308      	str	r3, [sp, #32]
 8003916:	4631      	mov	r1, r6
 8003918:	4658      	mov	r0, fp
 800391a:	f7ff faa3 	bl	8002e64 <quorem>
 800391e:	4649      	mov	r1, r9
 8003920:	4605      	mov	r5, r0
 8003922:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003926:	4658      	mov	r0, fp
 8003928:	f000 fd00 	bl	800432c <__mcmp>
 800392c:	463a      	mov	r2, r7
 800392e:	9002      	str	r0, [sp, #8]
 8003930:	4631      	mov	r1, r6
 8003932:	4620      	mov	r0, r4
 8003934:	f000 fd14 	bl	8004360 <__mdiff>
 8003938:	68c3      	ldr	r3, [r0, #12]
 800393a:	4602      	mov	r2, r0
 800393c:	bb03      	cbnz	r3, 8003980 <_dtoa_r+0xa00>
 800393e:	4601      	mov	r1, r0
 8003940:	9009      	str	r0, [sp, #36]	; 0x24
 8003942:	4658      	mov	r0, fp
 8003944:	f000 fcf2 	bl	800432c <__mcmp>
 8003948:	4603      	mov	r3, r0
 800394a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800394c:	4611      	mov	r1, r2
 800394e:	4620      	mov	r0, r4
 8003950:	9309      	str	r3, [sp, #36]	; 0x24
 8003952:	f000 fb0a 	bl	8003f6a <_Bfree>
 8003956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003958:	b9a3      	cbnz	r3, 8003984 <_dtoa_r+0xa04>
 800395a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800395c:	b992      	cbnz	r2, 8003984 <_dtoa_r+0xa04>
 800395e:	9a08      	ldr	r2, [sp, #32]
 8003960:	b982      	cbnz	r2, 8003984 <_dtoa_r+0xa04>
 8003962:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003966:	d029      	beq.n	80039bc <_dtoa_r+0xa3c>
 8003968:	9b02      	ldr	r3, [sp, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	dd01      	ble.n	8003972 <_dtoa_r+0x9f2>
 800396e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003972:	9b07      	ldr	r3, [sp, #28]
 8003974:	1c5d      	adds	r5, r3, #1
 8003976:	f883 8000 	strb.w	r8, [r3]
 800397a:	e784      	b.n	8003886 <_dtoa_r+0x906>
 800397c:	4638      	mov	r0, r7
 800397e:	e7c2      	b.n	8003906 <_dtoa_r+0x986>
 8003980:	2301      	movs	r3, #1
 8003982:	e7e3      	b.n	800394c <_dtoa_r+0x9cc>
 8003984:	9a02      	ldr	r2, [sp, #8]
 8003986:	2a00      	cmp	r2, #0
 8003988:	db04      	blt.n	8003994 <_dtoa_r+0xa14>
 800398a:	d123      	bne.n	80039d4 <_dtoa_r+0xa54>
 800398c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800398e:	bb0a      	cbnz	r2, 80039d4 <_dtoa_r+0xa54>
 8003990:	9a08      	ldr	r2, [sp, #32]
 8003992:	b9fa      	cbnz	r2, 80039d4 <_dtoa_r+0xa54>
 8003994:	2b00      	cmp	r3, #0
 8003996:	ddec      	ble.n	8003972 <_dtoa_r+0x9f2>
 8003998:	4659      	mov	r1, fp
 800399a:	2201      	movs	r2, #1
 800399c:	4620      	mov	r0, r4
 800399e:	f000 fc71 	bl	8004284 <__lshift>
 80039a2:	4631      	mov	r1, r6
 80039a4:	4683      	mov	fp, r0
 80039a6:	f000 fcc1 	bl	800432c <__mcmp>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	dc03      	bgt.n	80039b6 <_dtoa_r+0xa36>
 80039ae:	d1e0      	bne.n	8003972 <_dtoa_r+0x9f2>
 80039b0:	f018 0f01 	tst.w	r8, #1
 80039b4:	d0dd      	beq.n	8003972 <_dtoa_r+0x9f2>
 80039b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80039ba:	d1d8      	bne.n	800396e <_dtoa_r+0x9ee>
 80039bc:	9b07      	ldr	r3, [sp, #28]
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	1c5d      	adds	r5, r3, #1
 80039c2:	2339      	movs	r3, #57	; 0x39
 80039c4:	7013      	strb	r3, [r2, #0]
 80039c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039ca:	1e6a      	subs	r2, r5, #1
 80039cc:	2b39      	cmp	r3, #57	; 0x39
 80039ce:	d04d      	beq.n	8003a6c <_dtoa_r+0xaec>
 80039d0:	3301      	adds	r3, #1
 80039d2:	e052      	b.n	8003a7a <_dtoa_r+0xafa>
 80039d4:	9a07      	ldr	r2, [sp, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f102 0501 	add.w	r5, r2, #1
 80039dc:	dd06      	ble.n	80039ec <_dtoa_r+0xa6c>
 80039de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80039e2:	d0eb      	beq.n	80039bc <_dtoa_r+0xa3c>
 80039e4:	f108 0801 	add.w	r8, r8, #1
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	e7c4      	b.n	8003976 <_dtoa_r+0x9f6>
 80039ec:	9b06      	ldr	r3, [sp, #24]
 80039ee:	9a04      	ldr	r2, [sp, #16]
 80039f0:	1aeb      	subs	r3, r5, r3
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80039f8:	d021      	beq.n	8003a3e <_dtoa_r+0xabe>
 80039fa:	4659      	mov	r1, fp
 80039fc:	2300      	movs	r3, #0
 80039fe:	220a      	movs	r2, #10
 8003a00:	4620      	mov	r0, r4
 8003a02:	f000 fac9 	bl	8003f98 <__multadd>
 8003a06:	45b9      	cmp	r9, r7
 8003a08:	4683      	mov	fp, r0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	f04f 020a 	mov.w	r2, #10
 8003a12:	4649      	mov	r1, r9
 8003a14:	4620      	mov	r0, r4
 8003a16:	d105      	bne.n	8003a24 <_dtoa_r+0xaa4>
 8003a18:	f000 fabe 	bl	8003f98 <__multadd>
 8003a1c:	4681      	mov	r9, r0
 8003a1e:	4607      	mov	r7, r0
 8003a20:	9507      	str	r5, [sp, #28]
 8003a22:	e778      	b.n	8003916 <_dtoa_r+0x996>
 8003a24:	f000 fab8 	bl	8003f98 <__multadd>
 8003a28:	4639      	mov	r1, r7
 8003a2a:	4681      	mov	r9, r0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	220a      	movs	r2, #10
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 fab1 	bl	8003f98 <__multadd>
 8003a36:	4607      	mov	r7, r0
 8003a38:	e7f2      	b.n	8003a20 <_dtoa_r+0xaa0>
 8003a3a:	f04f 0900 	mov.w	r9, #0
 8003a3e:	4659      	mov	r1, fp
 8003a40:	2201      	movs	r2, #1
 8003a42:	4620      	mov	r0, r4
 8003a44:	f000 fc1e 	bl	8004284 <__lshift>
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4683      	mov	fp, r0
 8003a4c:	f000 fc6e 	bl	800432c <__mcmp>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	dcb8      	bgt.n	80039c6 <_dtoa_r+0xa46>
 8003a54:	d102      	bne.n	8003a5c <_dtoa_r+0xadc>
 8003a56:	f018 0f01 	tst.w	r8, #1
 8003a5a:	d1b4      	bne.n	80039c6 <_dtoa_r+0xa46>
 8003a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a60:	1e6a      	subs	r2, r5, #1
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	f47f af0f 	bne.w	8003886 <_dtoa_r+0x906>
 8003a68:	4615      	mov	r5, r2
 8003a6a:	e7f7      	b.n	8003a5c <_dtoa_r+0xadc>
 8003a6c:	9b06      	ldr	r3, [sp, #24]
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d105      	bne.n	8003a7e <_dtoa_r+0xafe>
 8003a72:	2331      	movs	r3, #49	; 0x31
 8003a74:	9a06      	ldr	r2, [sp, #24]
 8003a76:	f10a 0a01 	add.w	sl, sl, #1
 8003a7a:	7013      	strb	r3, [r2, #0]
 8003a7c:	e703      	b.n	8003886 <_dtoa_r+0x906>
 8003a7e:	4615      	mov	r5, r2
 8003a80:	e7a1      	b.n	80039c6 <_dtoa_r+0xa46>
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <_dtoa_r+0xb60>)
 8003a84:	f7ff bae1 	b.w	800304a <_dtoa_r+0xca>
 8003a88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f47f aabb 	bne.w	8003006 <_dtoa_r+0x86>
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <_dtoa_r+0xb64>)
 8003a92:	f7ff bada 	b.w	800304a <_dtoa_r+0xca>
 8003a96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f77f ae3f 	ble.w	800371c <_dtoa_r+0x79c>
 8003a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aa0:	9308      	str	r3, [sp, #32]
 8003aa2:	e653      	b.n	800374c <_dtoa_r+0x7cc>
 8003aa4:	9b04      	ldr	r3, [sp, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	dc03      	bgt.n	8003ab2 <_dtoa_r+0xb32>
 8003aaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f73f aed5 	bgt.w	800385c <_dtoa_r+0x8dc>
 8003ab2:	9d06      	ldr	r5, [sp, #24]
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4658      	mov	r0, fp
 8003ab8:	f7ff f9d4 	bl	8002e64 <quorem>
 8003abc:	9b06      	ldr	r3, [sp, #24]
 8003abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003ac2:	f805 8b01 	strb.w	r8, [r5], #1
 8003ac6:	9a04      	ldr	r2, [sp, #16]
 8003ac8:	1aeb      	subs	r3, r5, r3
 8003aca:	429a      	cmp	r2, r3
 8003acc:	ddb5      	ble.n	8003a3a <_dtoa_r+0xaba>
 8003ace:	4659      	mov	r1, fp
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	220a      	movs	r2, #10
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 fa5f 	bl	8003f98 <__multadd>
 8003ada:	4683      	mov	fp, r0
 8003adc:	e7ea      	b.n	8003ab4 <_dtoa_r+0xb34>
 8003ade:	bf00      	nop
 8003ae0:	08004af8 	.word	0x08004af8
 8003ae4:	08004b1c 	.word	0x08004b1c

08003ae8 <__sflush_r>:
 8003ae8:	898a      	ldrh	r2, [r1, #12]
 8003aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aee:	4605      	mov	r5, r0
 8003af0:	0710      	lsls	r0, r2, #28
 8003af2:	460c      	mov	r4, r1
 8003af4:	d458      	bmi.n	8003ba8 <__sflush_r+0xc0>
 8003af6:	684b      	ldr	r3, [r1, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dc05      	bgt.n	8003b08 <__sflush_r+0x20>
 8003afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dc02      	bgt.n	8003b08 <__sflush_r+0x20>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	d0f9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b14:	682f      	ldr	r7, [r5, #0]
 8003b16:	6a21      	ldr	r1, [r4, #32]
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	d032      	beq.n	8003b82 <__sflush_r+0x9a>
 8003b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	075a      	lsls	r2, r3, #29
 8003b22:	d505      	bpl.n	8003b30 <__sflush_r+0x48>
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b2a:	b10b      	cbz	r3, 8003b30 <__sflush_r+0x48>
 8003b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b2e:	1ac0      	subs	r0, r0, r3
 8003b30:	2300      	movs	r3, #0
 8003b32:	4602      	mov	r2, r0
 8003b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b36:	6a21      	ldr	r1, [r4, #32]
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47b0      	blx	r6
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	d106      	bne.n	8003b50 <__sflush_r+0x68>
 8003b42:	6829      	ldr	r1, [r5, #0]
 8003b44:	291d      	cmp	r1, #29
 8003b46:	d848      	bhi.n	8003bda <__sflush_r+0xf2>
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <__sflush_r+0x108>)
 8003b4a:	40ca      	lsrs	r2, r1
 8003b4c:	07d6      	lsls	r6, r2, #31
 8003b4e:	d544      	bpl.n	8003bda <__sflush_r+0xf2>
 8003b50:	2200      	movs	r2, #0
 8003b52:	6062      	str	r2, [r4, #4]
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	04d9      	lsls	r1, r3, #19
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	d504      	bpl.n	8003b66 <__sflush_r+0x7e>
 8003b5c:	1c42      	adds	r2, r0, #1
 8003b5e:	d101      	bne.n	8003b64 <__sflush_r+0x7c>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b903      	cbnz	r3, 8003b66 <__sflush_r+0x7e>
 8003b64:	6560      	str	r0, [r4, #84]	; 0x54
 8003b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b68:	602f      	str	r7, [r5, #0]
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d0c9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b72:	4299      	cmp	r1, r3
 8003b74:	d002      	beq.n	8003b7c <__sflush_r+0x94>
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 fcae 	bl	80044d8 <_free_r>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b80:	e7c0      	b.n	8003b04 <__sflush_r+0x1c>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b0      	blx	r6
 8003b88:	1c41      	adds	r1, r0, #1
 8003b8a:	d1c8      	bne.n	8003b1e <__sflush_r+0x36>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0c5      	beq.n	8003b1e <__sflush_r+0x36>
 8003b92:	2b1d      	cmp	r3, #29
 8003b94:	d001      	beq.n	8003b9a <__sflush_r+0xb2>
 8003b96:	2b16      	cmp	r3, #22
 8003b98:	d101      	bne.n	8003b9e <__sflush_r+0xb6>
 8003b9a:	602f      	str	r7, [r5, #0]
 8003b9c:	e7b1      	b.n	8003b02 <__sflush_r+0x1a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	e7ad      	b.n	8003b04 <__sflush_r+0x1c>
 8003ba8:	690f      	ldr	r7, [r1, #16]
 8003baa:	2f00      	cmp	r7, #0
 8003bac:	d0a9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003bae:	0793      	lsls	r3, r2, #30
 8003bb0:	bf18      	it	ne
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	680e      	ldr	r6, [r1, #0]
 8003bb6:	bf08      	it	eq
 8003bb8:	694b      	ldreq	r3, [r1, #20]
 8003bba:	eba6 0807 	sub.w	r8, r6, r7
 8003bbe:	600f      	str	r7, [r1, #0]
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	f1b8 0f00 	cmp.w	r8, #0
 8003bc6:	dd9c      	ble.n	8003b02 <__sflush_r+0x1a>
 8003bc8:	4643      	mov	r3, r8
 8003bca:	463a      	mov	r2, r7
 8003bcc:	6a21      	ldr	r1, [r4, #32]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bd2:	47b0      	blx	r6
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	dc06      	bgt.n	8003be6 <__sflush_r+0xfe>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be4:	e78e      	b.n	8003b04 <__sflush_r+0x1c>
 8003be6:	4407      	add	r7, r0
 8003be8:	eba8 0800 	sub.w	r8, r8, r0
 8003bec:	e7e9      	b.n	8003bc2 <__sflush_r+0xda>
 8003bee:	bf00      	nop
 8003bf0:	20400001 	.word	0x20400001

08003bf4 <_fflush_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	b1db      	cbz	r3, 8003c36 <_fflush_r+0x42>
 8003bfe:	b118      	cbz	r0, 8003c08 <_fflush_r+0x14>
 8003c00:	6983      	ldr	r3, [r0, #24]
 8003c02:	b90b      	cbnz	r3, 8003c08 <_fflush_r+0x14>
 8003c04:	f000 f860 	bl	8003cc8 <__sinit>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <_fflush_r+0x48>)
 8003c0a:	429c      	cmp	r4, r3
 8003c0c:	d109      	bne.n	8003c22 <_fflush_r+0x2e>
 8003c0e:	686c      	ldr	r4, [r5, #4]
 8003c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c14:	b17b      	cbz	r3, 8003c36 <_fflush_r+0x42>
 8003c16:	4621      	mov	r1, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c1e:	f7ff bf63 	b.w	8003ae8 <__sflush_r>
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <_fflush_r+0x4c>)
 8003c24:	429c      	cmp	r4, r3
 8003c26:	d101      	bne.n	8003c2c <_fflush_r+0x38>
 8003c28:	68ac      	ldr	r4, [r5, #8]
 8003c2a:	e7f1      	b.n	8003c10 <_fflush_r+0x1c>
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <_fflush_r+0x50>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	bf08      	it	eq
 8003c32:	68ec      	ldreq	r4, [r5, #12]
 8003c34:	e7ec      	b.n	8003c10 <_fflush_r+0x1c>
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd38      	pop	{r3, r4, r5, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08004b4c 	.word	0x08004b4c
 8003c40:	08004b6c 	.word	0x08004b6c
 8003c44:	08004b2c 	.word	0x08004b2c

08003c48 <std>:
 8003c48:	2300      	movs	r3, #0
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c52:	6083      	str	r3, [r0, #8]
 8003c54:	8181      	strh	r1, [r0, #12]
 8003c56:	6643      	str	r3, [r0, #100]	; 0x64
 8003c58:	81c2      	strh	r2, [r0, #14]
 8003c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c5e:	6183      	str	r3, [r0, #24]
 8003c60:	4619      	mov	r1, r3
 8003c62:	2208      	movs	r2, #8
 8003c64:	305c      	adds	r0, #92	; 0x5c
 8003c66:	f7fe fb69 	bl	800233c <memset>
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <std+0x38>)
 8003c6c:	6224      	str	r4, [r4, #32]
 8003c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <std+0x3c>)
 8003c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <std+0x40>)
 8003c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <std+0x44>)
 8003c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	080048c1 	.word	0x080048c1
 8003c84:	080048e3 	.word	0x080048e3
 8003c88:	0800491b 	.word	0x0800491b
 8003c8c:	0800493f 	.word	0x0800493f

08003c90 <_cleanup_r>:
 8003c90:	4901      	ldr	r1, [pc, #4]	; (8003c98 <_cleanup_r+0x8>)
 8003c92:	f000 b885 	b.w	8003da0 <_fwalk_reent>
 8003c96:	bf00      	nop
 8003c98:	08003bf5 	.word	0x08003bf5

08003c9c <__sfmoreglue>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2568      	movs	r5, #104	; 0x68
 8003ca0:	1e4a      	subs	r2, r1, #1
 8003ca2:	4355      	muls	r5, r2
 8003ca4:	460e      	mov	r6, r1
 8003ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003caa:	f000 fc61 	bl	8004570 <_malloc_r>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	b140      	cbz	r0, 8003cc4 <__sfmoreglue+0x28>
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8003cb8:	300c      	adds	r0, #12
 8003cba:	60a0      	str	r0, [r4, #8]
 8003cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cc0:	f7fe fb3c 	bl	800233c <memset>
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}

08003cc8 <__sinit>:
 8003cc8:	6983      	ldr	r3, [r0, #24]
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	4604      	mov	r4, r0
 8003cce:	bb33      	cbnz	r3, 8003d1e <__sinit+0x56>
 8003cd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003cd4:	6503      	str	r3, [r0, #80]	; 0x50
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <__sinit+0x58>)
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <__sinit+0x5c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6282      	str	r2, [r0, #40]	; 0x28
 8003cde:	4298      	cmp	r0, r3
 8003ce0:	bf04      	itt	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	6183      	streq	r3, [r0, #24]
 8003ce6:	f000 f81f 	bl	8003d28 <__sfp>
 8003cea:	6060      	str	r0, [r4, #4]
 8003cec:	4620      	mov	r0, r4
 8003cee:	f000 f81b 	bl	8003d28 <__sfp>
 8003cf2:	60a0      	str	r0, [r4, #8]
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 f817 	bl	8003d28 <__sfp>
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60e0      	str	r0, [r4, #12]
 8003cfe:	2104      	movs	r1, #4
 8003d00:	6860      	ldr	r0, [r4, #4]
 8003d02:	f7ff ffa1 	bl	8003c48 <std>
 8003d06:	2201      	movs	r2, #1
 8003d08:	2109      	movs	r1, #9
 8003d0a:	68a0      	ldr	r0, [r4, #8]
 8003d0c:	f7ff ff9c 	bl	8003c48 <std>
 8003d10:	2202      	movs	r2, #2
 8003d12:	2112      	movs	r1, #18
 8003d14:	68e0      	ldr	r0, [r4, #12]
 8003d16:	f7ff ff97 	bl	8003c48 <std>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61a3      	str	r3, [r4, #24]
 8003d1e:	bd10      	pop	{r4, pc}
 8003d20:	08004ae4 	.word	0x08004ae4
 8003d24:	08003c91 	.word	0x08003c91

08003d28 <__sfp>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <__sfp+0x70>)
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	681e      	ldr	r6, [r3, #0]
 8003d30:	69b3      	ldr	r3, [r6, #24]
 8003d32:	b913      	cbnz	r3, 8003d3a <__sfp+0x12>
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7ff ffc7 	bl	8003cc8 <__sinit>
 8003d3a:	3648      	adds	r6, #72	; 0x48
 8003d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	d503      	bpl.n	8003d4c <__sfp+0x24>
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	b133      	cbz	r3, 8003d56 <__sfp+0x2e>
 8003d48:	6836      	ldr	r6, [r6, #0]
 8003d4a:	e7f7      	b.n	8003d3c <__sfp+0x14>
 8003d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d50:	b16d      	cbz	r5, 8003d6e <__sfp+0x46>
 8003d52:	3468      	adds	r4, #104	; 0x68
 8003d54:	e7f4      	b.n	8003d40 <__sfp+0x18>
 8003d56:	2104      	movs	r1, #4
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff9f 	bl	8003c9c <__sfmoreglue>
 8003d5e:	6030      	str	r0, [r6, #0]
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d1f1      	bne.n	8003d48 <__sfp+0x20>
 8003d64:	230c      	movs	r3, #12
 8003d66:	4604      	mov	r4, r0
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <__sfp+0x74>)
 8003d70:	6665      	str	r5, [r4, #100]	; 0x64
 8003d72:	e9c4 5500 	strd	r5, r5, [r4]
 8003d76:	60a5      	str	r5, [r4, #8]
 8003d78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d80:	2208      	movs	r2, #8
 8003d82:	4629      	mov	r1, r5
 8003d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d88:	f7fe fad8 	bl	800233c <memset>
 8003d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d94:	e7e9      	b.n	8003d6a <__sfp+0x42>
 8003d96:	bf00      	nop
 8003d98:	08004ae4 	.word	0x08004ae4
 8003d9c:	ffff0001 	.word	0xffff0001

08003da0 <_fwalk_reent>:
 8003da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	4680      	mov	r8, r0
 8003da6:	4689      	mov	r9, r1
 8003da8:	2600      	movs	r6, #0
 8003daa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dae:	b914      	cbnz	r4, 8003db6 <_fwalk_reent+0x16>
 8003db0:	4630      	mov	r0, r6
 8003db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003db6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003dba:	3f01      	subs	r7, #1
 8003dbc:	d501      	bpl.n	8003dc2 <_fwalk_reent+0x22>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	e7f5      	b.n	8003dae <_fwalk_reent+0xe>
 8003dc2:	89ab      	ldrh	r3, [r5, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d907      	bls.n	8003dd8 <_fwalk_reent+0x38>
 8003dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	d003      	beq.n	8003dd8 <_fwalk_reent+0x38>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	47c8      	blx	r9
 8003dd6:	4306      	orrs	r6, r0
 8003dd8:	3568      	adds	r5, #104	; 0x68
 8003dda:	e7ee      	b.n	8003dba <_fwalk_reent+0x1a>

08003ddc <_localeconv_r>:
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <_localeconv_r+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a18      	ldr	r0, [r3, #32]
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <_localeconv_r+0x18>)
 8003de4:	2800      	cmp	r0, #0
 8003de6:	bf08      	it	eq
 8003de8:	4618      	moveq	r0, r3
 8003dea:	30f0      	adds	r0, #240	; 0xf0
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c
 8003df4:	20000070 	.word	0x20000070

08003df8 <__swhatbuf_r>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	460e      	mov	r6, r1
 8003dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e00:	b096      	sub	sp, #88	; 0x58
 8003e02:	2900      	cmp	r1, #0
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	da07      	bge.n	8003e1a <__swhatbuf_r+0x22>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	89b3      	ldrh	r3, [r6, #12]
 8003e10:	061a      	lsls	r2, r3, #24
 8003e12:	d410      	bmi.n	8003e36 <__swhatbuf_r+0x3e>
 8003e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e18:	e00e      	b.n	8003e38 <__swhatbuf_r+0x40>
 8003e1a:	466a      	mov	r2, sp
 8003e1c:	f000 fdb6 	bl	800498c <_fstat_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	dbf2      	blt.n	8003e0a <__swhatbuf_r+0x12>
 8003e24:	9a01      	ldr	r2, [sp, #4]
 8003e26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e2e:	425a      	negs	r2, r3
 8003e30:	415a      	adcs	r2, r3
 8003e32:	602a      	str	r2, [r5, #0]
 8003e34:	e7ee      	b.n	8003e14 <__swhatbuf_r+0x1c>
 8003e36:	2340      	movs	r3, #64	; 0x40
 8003e38:	2000      	movs	r0, #0
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	b016      	add	sp, #88	; 0x58
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}

08003e40 <__smakebuf_r>:
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e44:	079d      	lsls	r5, r3, #30
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	d507      	bpl.n	8003e5c <__smakebuf_r+0x1c>
 8003e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	2301      	movs	r3, #1
 8003e56:	6163      	str	r3, [r4, #20]
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	ab01      	add	r3, sp, #4
 8003e5e:	466a      	mov	r2, sp
 8003e60:	f7ff ffca 	bl	8003df8 <__swhatbuf_r>
 8003e64:	9900      	ldr	r1, [sp, #0]
 8003e66:	4605      	mov	r5, r0
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f000 fb81 	bl	8004570 <_malloc_r>
 8003e6e:	b948      	cbnz	r0, 8003e84 <__smakebuf_r+0x44>
 8003e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e74:	059a      	lsls	r2, r3, #22
 8003e76:	d4ef      	bmi.n	8003e58 <__smakebuf_r+0x18>
 8003e78:	f023 0303 	bic.w	r3, r3, #3
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	e7e3      	b.n	8003e4c <__smakebuf_r+0xc>
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <__smakebuf_r+0x7c>)
 8003e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	6020      	str	r0, [r4, #0]
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	9b00      	ldr	r3, [sp, #0]
 8003e94:	6120      	str	r0, [r4, #16]
 8003e96:	6163      	str	r3, [r4, #20]
 8003e98:	9b01      	ldr	r3, [sp, #4]
 8003e9a:	b15b      	cbz	r3, 8003eb4 <__smakebuf_r+0x74>
 8003e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 fd85 	bl	80049b0 <_isatty_r>
 8003ea6:	b128      	cbz	r0, 8003eb4 <__smakebuf_r+0x74>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	431d      	orrs	r5, r3
 8003eb8:	81a5      	strh	r5, [r4, #12]
 8003eba:	e7cd      	b.n	8003e58 <__smakebuf_r+0x18>
 8003ebc:	08003c91 	.word	0x08003c91

08003ec0 <malloc>:
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <malloc+0xc>)
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	f000 bb53 	b.w	8004570 <_malloc_r>
 8003eca:	bf00      	nop
 8003ecc:	2000000c 	.word	0x2000000c

08003ed0 <memchr>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	b2c9      	uxtb	r1, r1
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4290      	cmp	r0, r2
 8003ed8:	4603      	mov	r3, r0
 8003eda:	d101      	bne.n	8003ee0 <memchr+0x10>
 8003edc:	2300      	movs	r3, #0
 8003ede:	e003      	b.n	8003ee8 <memchr+0x18>
 8003ee0:	781c      	ldrb	r4, [r3, #0]
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	428c      	cmp	r4, r1
 8003ee6:	d1f6      	bne.n	8003ed6 <memchr+0x6>
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memcpy>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	1e43      	subs	r3, r0, #1
 8003ef0:	440a      	add	r2, r1
 8003ef2:	4291      	cmp	r1, r2
 8003ef4:	d100      	bne.n	8003ef8 <memcpy+0xc>
 8003ef6:	bd10      	pop	{r4, pc}
 8003ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f00:	e7f7      	b.n	8003ef2 <memcpy+0x6>

08003f02 <_Balloc>:
 8003f02:	b570      	push	{r4, r5, r6, lr}
 8003f04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003f06:	4604      	mov	r4, r0
 8003f08:	460e      	mov	r6, r1
 8003f0a:	b93d      	cbnz	r5, 8003f1c <_Balloc+0x1a>
 8003f0c:	2010      	movs	r0, #16
 8003f0e:	f7ff ffd7 	bl	8003ec0 <malloc>
 8003f12:	6260      	str	r0, [r4, #36]	; 0x24
 8003f14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f18:	6005      	str	r5, [r0, #0]
 8003f1a:	60c5      	str	r5, [r0, #12]
 8003f1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003f1e:	68eb      	ldr	r3, [r5, #12]
 8003f20:	b183      	cbz	r3, 8003f44 <_Balloc+0x42>
 8003f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003f2a:	b9b8      	cbnz	r0, 8003f5c <_Balloc+0x5a>
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f506 	lsl.w	r5, r1, r6
 8003f32:	1d6a      	adds	r2, r5, #5
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 fabf 	bl	80044ba <_calloc_r>
 8003f3c:	b160      	cbz	r0, 8003f58 <_Balloc+0x56>
 8003f3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003f42:	e00e      	b.n	8003f62 <_Balloc+0x60>
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	2104      	movs	r1, #4
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f000 fab6 	bl	80044ba <_calloc_r>
 8003f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f50:	60e8      	str	r0, [r5, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e4      	bne.n	8003f22 <_Balloc+0x20>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003f62:	2300      	movs	r3, #0
 8003f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f68:	e7f7      	b.n	8003f5a <_Balloc+0x58>

08003f6a <_Bfree>:
 8003f6a:	b570      	push	{r4, r5, r6, lr}
 8003f6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003f6e:	4606      	mov	r6, r0
 8003f70:	460d      	mov	r5, r1
 8003f72:	b93c      	cbnz	r4, 8003f84 <_Bfree+0x1a>
 8003f74:	2010      	movs	r0, #16
 8003f76:	f7ff ffa3 	bl	8003ec0 <malloc>
 8003f7a:	6270      	str	r0, [r6, #36]	; 0x24
 8003f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f80:	6004      	str	r4, [r0, #0]
 8003f82:	60c4      	str	r4, [r0, #12]
 8003f84:	b13d      	cbz	r5, 8003f96 <_Bfree+0x2c>
 8003f86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f88:	686a      	ldr	r2, [r5, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f90:	6029      	str	r1, [r5, #0]
 8003f92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003f96:	bd70      	pop	{r4, r5, r6, pc}

08003f98 <__multadd>:
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	461f      	mov	r7, r3
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	690d      	ldr	r5, [r1, #16]
 8003fa6:	f101 0c14 	add.w	ip, r1, #20
 8003faa:	f8dc 0000 	ldr.w	r0, [ip]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b281      	uxth	r1, r0
 8003fb2:	fb02 7101 	mla	r1, r2, r1, r7
 8003fb6:	0c00      	lsrs	r0, r0, #16
 8003fb8:	0c0f      	lsrs	r7, r1, #16
 8003fba:	fb02 7000 	mla	r0, r2, r0, r7
 8003fbe:	b289      	uxth	r1, r1
 8003fc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003fc4:	429d      	cmp	r5, r3
 8003fc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003fca:	f84c 1b04 	str.w	r1, [ip], #4
 8003fce:	dcec      	bgt.n	8003faa <__multadd+0x12>
 8003fd0:	b1d7      	cbz	r7, 8004008 <__multadd+0x70>
 8003fd2:	68a3      	ldr	r3, [r4, #8]
 8003fd4:	42ab      	cmp	r3, r5
 8003fd6:	dc12      	bgt.n	8003ffe <__multadd+0x66>
 8003fd8:	6861      	ldr	r1, [r4, #4]
 8003fda:	4630      	mov	r0, r6
 8003fdc:	3101      	adds	r1, #1
 8003fde:	f7ff ff90 	bl	8003f02 <_Balloc>
 8003fe2:	4680      	mov	r8, r0
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	f104 010c 	add.w	r1, r4, #12
 8003fea:	3202      	adds	r2, #2
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	300c      	adds	r0, #12
 8003ff0:	f7ff ff7c 	bl	8003eec <memcpy>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ffb7 	bl	8003f6a <_Bfree>
 8003ffc:	4644      	mov	r4, r8
 8003ffe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004002:	3501      	adds	r5, #1
 8004004:	615f      	str	r7, [r3, #20]
 8004006:	6125      	str	r5, [r4, #16]
 8004008:	4620      	mov	r0, r4
 800400a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800400e <__hi0bits>:
 800400e:	0c02      	lsrs	r2, r0, #16
 8004010:	0412      	lsls	r2, r2, #16
 8004012:	4603      	mov	r3, r0
 8004014:	b9b2      	cbnz	r2, 8004044 <__hi0bits+0x36>
 8004016:	0403      	lsls	r3, r0, #16
 8004018:	2010      	movs	r0, #16
 800401a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800401e:	bf04      	itt	eq
 8004020:	021b      	lsleq	r3, r3, #8
 8004022:	3008      	addeq	r0, #8
 8004024:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004028:	bf04      	itt	eq
 800402a:	011b      	lsleq	r3, r3, #4
 800402c:	3004      	addeq	r0, #4
 800402e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004032:	bf04      	itt	eq
 8004034:	009b      	lsleq	r3, r3, #2
 8004036:	3002      	addeq	r0, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	db06      	blt.n	800404a <__hi0bits+0x3c>
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	d503      	bpl.n	8004048 <__hi0bits+0x3a>
 8004040:	3001      	adds	r0, #1
 8004042:	4770      	bx	lr
 8004044:	2000      	movs	r0, #0
 8004046:	e7e8      	b.n	800401a <__hi0bits+0xc>
 8004048:	2020      	movs	r0, #32
 800404a:	4770      	bx	lr

0800404c <__lo0bits>:
 800404c:	6803      	ldr	r3, [r0, #0]
 800404e:	4601      	mov	r1, r0
 8004050:	f013 0207 	ands.w	r2, r3, #7
 8004054:	d00b      	beq.n	800406e <__lo0bits+0x22>
 8004056:	07da      	lsls	r2, r3, #31
 8004058:	d423      	bmi.n	80040a2 <__lo0bits+0x56>
 800405a:	0798      	lsls	r0, r3, #30
 800405c:	bf49      	itett	mi
 800405e:	085b      	lsrmi	r3, r3, #1
 8004060:	089b      	lsrpl	r3, r3, #2
 8004062:	2001      	movmi	r0, #1
 8004064:	600b      	strmi	r3, [r1, #0]
 8004066:	bf5c      	itt	pl
 8004068:	600b      	strpl	r3, [r1, #0]
 800406a:	2002      	movpl	r0, #2
 800406c:	4770      	bx	lr
 800406e:	b298      	uxth	r0, r3
 8004070:	b9a8      	cbnz	r0, 800409e <__lo0bits+0x52>
 8004072:	2010      	movs	r0, #16
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f013 0fff 	tst.w	r3, #255	; 0xff
 800407a:	bf04      	itt	eq
 800407c:	0a1b      	lsreq	r3, r3, #8
 800407e:	3008      	addeq	r0, #8
 8004080:	071a      	lsls	r2, r3, #28
 8004082:	bf04      	itt	eq
 8004084:	091b      	lsreq	r3, r3, #4
 8004086:	3004      	addeq	r0, #4
 8004088:	079a      	lsls	r2, r3, #30
 800408a:	bf04      	itt	eq
 800408c:	089b      	lsreq	r3, r3, #2
 800408e:	3002      	addeq	r0, #2
 8004090:	07da      	lsls	r2, r3, #31
 8004092:	d402      	bmi.n	800409a <__lo0bits+0x4e>
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	d006      	beq.n	80040a6 <__lo0bits+0x5a>
 8004098:	3001      	adds	r0, #1
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	4770      	bx	lr
 800409e:	4610      	mov	r0, r2
 80040a0:	e7e9      	b.n	8004076 <__lo0bits+0x2a>
 80040a2:	2000      	movs	r0, #0
 80040a4:	4770      	bx	lr
 80040a6:	2020      	movs	r0, #32
 80040a8:	4770      	bx	lr

080040aa <__i2b>:
 80040aa:	b510      	push	{r4, lr}
 80040ac:	460c      	mov	r4, r1
 80040ae:	2101      	movs	r1, #1
 80040b0:	f7ff ff27 	bl	8003f02 <_Balloc>
 80040b4:	2201      	movs	r2, #1
 80040b6:	6144      	str	r4, [r0, #20]
 80040b8:	6102      	str	r2, [r0, #16]
 80040ba:	bd10      	pop	{r4, pc}

080040bc <__multiply>:
 80040bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	4614      	mov	r4, r2
 80040c2:	690a      	ldr	r2, [r1, #16]
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	4688      	mov	r8, r1
 80040c8:	429a      	cmp	r2, r3
 80040ca:	bfbe      	ittt	lt
 80040cc:	460b      	movlt	r3, r1
 80040ce:	46a0      	movlt	r8, r4
 80040d0:	461c      	movlt	r4, r3
 80040d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80040d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80040da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80040de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80040e2:	eb07 0609 	add.w	r6, r7, r9
 80040e6:	42b3      	cmp	r3, r6
 80040e8:	bfb8      	it	lt
 80040ea:	3101      	addlt	r1, #1
 80040ec:	f7ff ff09 	bl	8003f02 <_Balloc>
 80040f0:	f100 0514 	add.w	r5, r0, #20
 80040f4:	462b      	mov	r3, r5
 80040f6:	2200      	movs	r2, #0
 80040f8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80040fc:	4573      	cmp	r3, lr
 80040fe:	d316      	bcc.n	800412e <__multiply+0x72>
 8004100:	f104 0214 	add.w	r2, r4, #20
 8004104:	f108 0114 	add.w	r1, r8, #20
 8004108:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800410c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	9b00      	ldr	r3, [sp, #0]
 8004114:	9201      	str	r2, [sp, #4]
 8004116:	4293      	cmp	r3, r2
 8004118:	d80c      	bhi.n	8004134 <__multiply+0x78>
 800411a:	2e00      	cmp	r6, #0
 800411c:	dd03      	ble.n	8004126 <__multiply+0x6a>
 800411e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004122:	2b00      	cmp	r3, #0
 8004124:	d05d      	beq.n	80041e2 <__multiply+0x126>
 8004126:	6106      	str	r6, [r0, #16]
 8004128:	b003      	add	sp, #12
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412e:	f843 2b04 	str.w	r2, [r3], #4
 8004132:	e7e3      	b.n	80040fc <__multiply+0x40>
 8004134:	f8b2 b000 	ldrh.w	fp, [r2]
 8004138:	f1bb 0f00 	cmp.w	fp, #0
 800413c:	d023      	beq.n	8004186 <__multiply+0xca>
 800413e:	4689      	mov	r9, r1
 8004140:	46ac      	mov	ip, r5
 8004142:	f04f 0800 	mov.w	r8, #0
 8004146:	f859 4b04 	ldr.w	r4, [r9], #4
 800414a:	f8dc a000 	ldr.w	sl, [ip]
 800414e:	b2a3      	uxth	r3, r4
 8004150:	fa1f fa8a 	uxth.w	sl, sl
 8004154:	fb0b a303 	mla	r3, fp, r3, sl
 8004158:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800415c:	f8dc 4000 	ldr.w	r4, [ip]
 8004160:	4443      	add	r3, r8
 8004162:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004166:	fb0b 840a 	mla	r4, fp, sl, r8
 800416a:	46e2      	mov	sl, ip
 800416c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004176:	454f      	cmp	r7, r9
 8004178:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800417c:	f84a 3b04 	str.w	r3, [sl], #4
 8004180:	d82b      	bhi.n	80041da <__multiply+0x11e>
 8004182:	f8cc 8004 	str.w	r8, [ip, #4]
 8004186:	9b01      	ldr	r3, [sp, #4]
 8004188:	3204      	adds	r2, #4
 800418a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800418e:	f1ba 0f00 	cmp.w	sl, #0
 8004192:	d020      	beq.n	80041d6 <__multiply+0x11a>
 8004194:	4689      	mov	r9, r1
 8004196:	46a8      	mov	r8, r5
 8004198:	f04f 0b00 	mov.w	fp, #0
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	f8b9 c000 	ldrh.w	ip, [r9]
 80041a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80041ac:	46c4      	mov	ip, r8
 80041ae:	445c      	add	r4, fp
 80041b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80041b4:	f84c 3b04 	str.w	r3, [ip], #4
 80041b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80041bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	fb0a b303 	mla	r3, sl, r3, fp
 80041c6:	454f      	cmp	r7, r9
 80041c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80041cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80041d0:	d805      	bhi.n	80041de <__multiply+0x122>
 80041d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80041d6:	3504      	adds	r5, #4
 80041d8:	e79b      	b.n	8004112 <__multiply+0x56>
 80041da:	46d4      	mov	ip, sl
 80041dc:	e7b3      	b.n	8004146 <__multiply+0x8a>
 80041de:	46e0      	mov	r8, ip
 80041e0:	e7dd      	b.n	800419e <__multiply+0xe2>
 80041e2:	3e01      	subs	r6, #1
 80041e4:	e799      	b.n	800411a <__multiply+0x5e>
	...

080041e8 <__pow5mult>:
 80041e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ec:	4615      	mov	r5, r2
 80041ee:	f012 0203 	ands.w	r2, r2, #3
 80041f2:	4606      	mov	r6, r0
 80041f4:	460f      	mov	r7, r1
 80041f6:	d007      	beq.n	8004208 <__pow5mult+0x20>
 80041f8:	4c21      	ldr	r4, [pc, #132]	; (8004280 <__pow5mult+0x98>)
 80041fa:	3a01      	subs	r2, #1
 80041fc:	2300      	movs	r3, #0
 80041fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004202:	f7ff fec9 	bl	8003f98 <__multadd>
 8004206:	4607      	mov	r7, r0
 8004208:	10ad      	asrs	r5, r5, #2
 800420a:	d035      	beq.n	8004278 <__pow5mult+0x90>
 800420c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800420e:	b93c      	cbnz	r4, 8004220 <__pow5mult+0x38>
 8004210:	2010      	movs	r0, #16
 8004212:	f7ff fe55 	bl	8003ec0 <malloc>
 8004216:	6270      	str	r0, [r6, #36]	; 0x24
 8004218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800421c:	6004      	str	r4, [r0, #0]
 800421e:	60c4      	str	r4, [r0, #12]
 8004220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004228:	b94c      	cbnz	r4, 800423e <__pow5mult+0x56>
 800422a:	f240 2171 	movw	r1, #625	; 0x271
 800422e:	4630      	mov	r0, r6
 8004230:	f7ff ff3b 	bl	80040aa <__i2b>
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	f8c8 0008 	str.w	r0, [r8, #8]
 800423c:	6003      	str	r3, [r0, #0]
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	07eb      	lsls	r3, r5, #31
 8004244:	d50a      	bpl.n	800425c <__pow5mult+0x74>
 8004246:	4639      	mov	r1, r7
 8004248:	4622      	mov	r2, r4
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff ff36 	bl	80040bc <__multiply>
 8004250:	4681      	mov	r9, r0
 8004252:	4639      	mov	r1, r7
 8004254:	4630      	mov	r0, r6
 8004256:	f7ff fe88 	bl	8003f6a <_Bfree>
 800425a:	464f      	mov	r7, r9
 800425c:	106d      	asrs	r5, r5, #1
 800425e:	d00b      	beq.n	8004278 <__pow5mult+0x90>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	b938      	cbnz	r0, 8004274 <__pow5mult+0x8c>
 8004264:	4622      	mov	r2, r4
 8004266:	4621      	mov	r1, r4
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff ff27 	bl	80040bc <__multiply>
 800426e:	6020      	str	r0, [r4, #0]
 8004270:	f8c0 8000 	str.w	r8, [r0]
 8004274:	4604      	mov	r4, r0
 8004276:	e7e4      	b.n	8004242 <__pow5mult+0x5a>
 8004278:	4638      	mov	r0, r7
 800427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427e:	bf00      	nop
 8004280:	08004c80 	.word	0x08004c80

08004284 <__lshift>:
 8004284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	460c      	mov	r4, r1
 800428a:	4607      	mov	r7, r0
 800428c:	4616      	mov	r6, r2
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004294:	eb0a 0903 	add.w	r9, sl, r3
 8004298:	6849      	ldr	r1, [r1, #4]
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	f109 0501 	add.w	r5, r9, #1
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	db32      	blt.n	800430a <__lshift+0x86>
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff fe2c 	bl	8003f02 <_Balloc>
 80042aa:	2300      	movs	r3, #0
 80042ac:	4680      	mov	r8, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	f100 0114 	add.w	r1, r0, #20
 80042b4:	4553      	cmp	r3, sl
 80042b6:	db2b      	blt.n	8004310 <__lshift+0x8c>
 80042b8:	6920      	ldr	r0, [r4, #16]
 80042ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80042be:	f104 0314 	add.w	r3, r4, #20
 80042c2:	f016 021f 	ands.w	r2, r6, #31
 80042c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80042ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80042ce:	d025      	beq.n	800431c <__lshift+0x98>
 80042d0:	2000      	movs	r0, #0
 80042d2:	f1c2 0e20 	rsb	lr, r2, #32
 80042d6:	468a      	mov	sl, r1
 80042d8:	681e      	ldr	r6, [r3, #0]
 80042da:	4096      	lsls	r6, r2
 80042dc:	4330      	orrs	r0, r6
 80042de:	f84a 0b04 	str.w	r0, [sl], #4
 80042e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80042e6:	459c      	cmp	ip, r3
 80042e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80042ec:	d814      	bhi.n	8004318 <__lshift+0x94>
 80042ee:	6048      	str	r0, [r1, #4]
 80042f0:	b108      	cbz	r0, 80042f6 <__lshift+0x72>
 80042f2:	f109 0502 	add.w	r5, r9, #2
 80042f6:	3d01      	subs	r5, #1
 80042f8:	4638      	mov	r0, r7
 80042fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80042fe:	4621      	mov	r1, r4
 8004300:	f7ff fe33 	bl	8003f6a <_Bfree>
 8004304:	4640      	mov	r0, r8
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430a:	3101      	adds	r1, #1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	e7c7      	b.n	80042a0 <__lshift+0x1c>
 8004310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004314:	3301      	adds	r3, #1
 8004316:	e7cd      	b.n	80042b4 <__lshift+0x30>
 8004318:	4651      	mov	r1, sl
 800431a:	e7dc      	b.n	80042d6 <__lshift+0x52>
 800431c:	3904      	subs	r1, #4
 800431e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004322:	459c      	cmp	ip, r3
 8004324:	f841 2f04 	str.w	r2, [r1, #4]!
 8004328:	d8f9      	bhi.n	800431e <__lshift+0x9a>
 800432a:	e7e4      	b.n	80042f6 <__lshift+0x72>

0800432c <__mcmp>:
 800432c:	6903      	ldr	r3, [r0, #16]
 800432e:	690a      	ldr	r2, [r1, #16]
 8004330:	b530      	push	{r4, r5, lr}
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	d10c      	bne.n	8004350 <__mcmp+0x24>
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	3014      	adds	r0, #20
 800433a:	3114      	adds	r1, #20
 800433c:	1884      	adds	r4, r0, r2
 800433e:	4411      	add	r1, r2
 8004340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004348:	4295      	cmp	r5, r2
 800434a:	d003      	beq.n	8004354 <__mcmp+0x28>
 800434c:	d305      	bcc.n	800435a <__mcmp+0x2e>
 800434e:	2301      	movs	r3, #1
 8004350:	4618      	mov	r0, r3
 8004352:	bd30      	pop	{r4, r5, pc}
 8004354:	42a0      	cmp	r0, r4
 8004356:	d3f3      	bcc.n	8004340 <__mcmp+0x14>
 8004358:	e7fa      	b.n	8004350 <__mcmp+0x24>
 800435a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800435e:	e7f7      	b.n	8004350 <__mcmp+0x24>

08004360 <__mdiff>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	460d      	mov	r5, r1
 8004366:	4607      	mov	r7, r0
 8004368:	4611      	mov	r1, r2
 800436a:	4628      	mov	r0, r5
 800436c:	4614      	mov	r4, r2
 800436e:	f7ff ffdd 	bl	800432c <__mcmp>
 8004372:	1e06      	subs	r6, r0, #0
 8004374:	d108      	bne.n	8004388 <__mdiff+0x28>
 8004376:	4631      	mov	r1, r6
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff fdc2 	bl	8003f02 <_Balloc>
 800437e:	2301      	movs	r3, #1
 8004380:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004388:	bfa4      	itt	ge
 800438a:	4623      	movge	r3, r4
 800438c:	462c      	movge	r4, r5
 800438e:	4638      	mov	r0, r7
 8004390:	6861      	ldr	r1, [r4, #4]
 8004392:	bfa6      	itte	ge
 8004394:	461d      	movge	r5, r3
 8004396:	2600      	movge	r6, #0
 8004398:	2601      	movlt	r6, #1
 800439a:	f7ff fdb2 	bl	8003f02 <_Balloc>
 800439e:	f04f 0e00 	mov.w	lr, #0
 80043a2:	60c6      	str	r6, [r0, #12]
 80043a4:	692b      	ldr	r3, [r5, #16]
 80043a6:	6926      	ldr	r6, [r4, #16]
 80043a8:	f104 0214 	add.w	r2, r4, #20
 80043ac:	f105 0914 	add.w	r9, r5, #20
 80043b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80043b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80043b8:	f100 0114 	add.w	r1, r0, #20
 80043bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80043c0:	f859 5b04 	ldr.w	r5, [r9], #4
 80043c4:	fa1f f38a 	uxth.w	r3, sl
 80043c8:	4473      	add	r3, lr
 80043ca:	b2ac      	uxth	r4, r5
 80043cc:	1b1b      	subs	r3, r3, r4
 80043ce:	0c2c      	lsrs	r4, r5, #16
 80043d0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80043d4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80043d8:	b29b      	uxth	r3, r3
 80043da:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80043de:	45c8      	cmp	r8, r9
 80043e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80043e4:	4694      	mov	ip, r2
 80043e6:	f841 4b04 	str.w	r4, [r1], #4
 80043ea:	d8e7      	bhi.n	80043bc <__mdiff+0x5c>
 80043ec:	45bc      	cmp	ip, r7
 80043ee:	d304      	bcc.n	80043fa <__mdiff+0x9a>
 80043f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80043f4:	b183      	cbz	r3, 8004418 <__mdiff+0xb8>
 80043f6:	6106      	str	r6, [r0, #16]
 80043f8:	e7c4      	b.n	8004384 <__mdiff+0x24>
 80043fa:	f85c 4b04 	ldr.w	r4, [ip], #4
 80043fe:	b2a2      	uxth	r2, r4
 8004400:	4472      	add	r2, lr
 8004402:	1413      	asrs	r3, r2, #16
 8004404:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004408:	b292      	uxth	r2, r2
 800440a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800440e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004412:	f841 2b04 	str.w	r2, [r1], #4
 8004416:	e7e9      	b.n	80043ec <__mdiff+0x8c>
 8004418:	3e01      	subs	r6, #1
 800441a:	e7e9      	b.n	80043f0 <__mdiff+0x90>

0800441c <__d2b>:
 800441c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004420:	461c      	mov	r4, r3
 8004422:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004426:	2101      	movs	r1, #1
 8004428:	4690      	mov	r8, r2
 800442a:	f7ff fd6a 	bl	8003f02 <_Balloc>
 800442e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004432:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004436:	4607      	mov	r7, r0
 8004438:	bb34      	cbnz	r4, 8004488 <__d2b+0x6c>
 800443a:	9201      	str	r2, [sp, #4]
 800443c:	f1b8 0200 	subs.w	r2, r8, #0
 8004440:	d027      	beq.n	8004492 <__d2b+0x76>
 8004442:	a802      	add	r0, sp, #8
 8004444:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004448:	f7ff fe00 	bl	800404c <__lo0bits>
 800444c:	9900      	ldr	r1, [sp, #0]
 800444e:	b1f0      	cbz	r0, 800448e <__d2b+0x72>
 8004450:	9a01      	ldr	r2, [sp, #4]
 8004452:	f1c0 0320 	rsb	r3, r0, #32
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	430b      	orrs	r3, r1
 800445c:	40c2      	lsrs	r2, r0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	9b01      	ldr	r3, [sp, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2102      	movne	r1, #2
 800446a:	2101      	moveq	r1, #1
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	6139      	str	r1, [r7, #16]
 8004470:	b1c4      	cbz	r4, 80044a4 <__d2b+0x88>
 8004472:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004476:	4404      	add	r4, r0
 8004478:	6034      	str	r4, [r6, #0]
 800447a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800447e:	6028      	str	r0, [r5, #0]
 8004480:	4638      	mov	r0, r7
 8004482:	b002      	add	sp, #8
 8004484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004488:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800448c:	e7d5      	b.n	800443a <__d2b+0x1e>
 800448e:	6179      	str	r1, [r7, #20]
 8004490:	e7e7      	b.n	8004462 <__d2b+0x46>
 8004492:	a801      	add	r0, sp, #4
 8004494:	f7ff fdda 	bl	800404c <__lo0bits>
 8004498:	2101      	movs	r1, #1
 800449a:	9b01      	ldr	r3, [sp, #4]
 800449c:	6139      	str	r1, [r7, #16]
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	3020      	adds	r0, #32
 80044a2:	e7e5      	b.n	8004470 <__d2b+0x54>
 80044a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80044a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80044ac:	6030      	str	r0, [r6, #0]
 80044ae:	6918      	ldr	r0, [r3, #16]
 80044b0:	f7ff fdad 	bl	800400e <__hi0bits>
 80044b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80044b8:	e7e1      	b.n	800447e <__d2b+0x62>

080044ba <_calloc_r>:
 80044ba:	b538      	push	{r3, r4, r5, lr}
 80044bc:	fb02 f401 	mul.w	r4, r2, r1
 80044c0:	4621      	mov	r1, r4
 80044c2:	f000 f855 	bl	8004570 <_malloc_r>
 80044c6:	4605      	mov	r5, r0
 80044c8:	b118      	cbz	r0, 80044d2 <_calloc_r+0x18>
 80044ca:	4622      	mov	r2, r4
 80044cc:	2100      	movs	r1, #0
 80044ce:	f7fd ff35 	bl	800233c <memset>
 80044d2:	4628      	mov	r0, r5
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080044d8 <_free_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4605      	mov	r5, r0
 80044dc:	2900      	cmp	r1, #0
 80044de:	d043      	beq.n	8004568 <_free_r+0x90>
 80044e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e4:	1f0c      	subs	r4, r1, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfb8      	it	lt
 80044ea:	18e4      	addlt	r4, r4, r3
 80044ec:	f000 fa94 	bl	8004a18 <__malloc_lock>
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <_free_r+0x94>)
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	4610      	mov	r0, r2
 80044f6:	b933      	cbnz	r3, 8004506 <_free_r+0x2e>
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6014      	str	r4, [r2, #0]
 80044fc:	4628      	mov	r0, r5
 80044fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004502:	f000 ba8a 	b.w	8004a1a <__malloc_unlock>
 8004506:	42a3      	cmp	r3, r4
 8004508:	d90b      	bls.n	8004522 <_free_r+0x4a>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	1862      	adds	r2, r4, r1
 800450e:	4293      	cmp	r3, r2
 8004510:	bf01      	itttt	eq
 8004512:	681a      	ldreq	r2, [r3, #0]
 8004514:	685b      	ldreq	r3, [r3, #4]
 8004516:	1852      	addeq	r2, r2, r1
 8004518:	6022      	streq	r2, [r4, #0]
 800451a:	6063      	str	r3, [r4, #4]
 800451c:	6004      	str	r4, [r0, #0]
 800451e:	e7ed      	b.n	80044fc <_free_r+0x24>
 8004520:	4613      	mov	r3, r2
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	b10a      	cbz	r2, 800452a <_free_r+0x52>
 8004526:	42a2      	cmp	r2, r4
 8004528:	d9fa      	bls.n	8004520 <_free_r+0x48>
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	1858      	adds	r0, r3, r1
 800452e:	42a0      	cmp	r0, r4
 8004530:	d10b      	bne.n	800454a <_free_r+0x72>
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	4401      	add	r1, r0
 8004536:	1858      	adds	r0, r3, r1
 8004538:	4282      	cmp	r2, r0
 800453a:	6019      	str	r1, [r3, #0]
 800453c:	d1de      	bne.n	80044fc <_free_r+0x24>
 800453e:	6810      	ldr	r0, [r2, #0]
 8004540:	6852      	ldr	r2, [r2, #4]
 8004542:	4401      	add	r1, r0
 8004544:	6019      	str	r1, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	e7d8      	b.n	80044fc <_free_r+0x24>
 800454a:	d902      	bls.n	8004552 <_free_r+0x7a>
 800454c:	230c      	movs	r3, #12
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	e7d4      	b.n	80044fc <_free_r+0x24>
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1821      	adds	r1, r4, r0
 8004556:	428a      	cmp	r2, r1
 8004558:	bf01      	itttt	eq
 800455a:	6811      	ldreq	r1, [r2, #0]
 800455c:	6852      	ldreq	r2, [r2, #4]
 800455e:	1809      	addeq	r1, r1, r0
 8004560:	6021      	streq	r1, [r4, #0]
 8004562:	6062      	str	r2, [r4, #4]
 8004564:	605c      	str	r4, [r3, #4]
 8004566:	e7c9      	b.n	80044fc <_free_r+0x24>
 8004568:	bd38      	pop	{r3, r4, r5, pc}
 800456a:	bf00      	nop
 800456c:	200001fc 	.word	0x200001fc

08004570 <_malloc_r>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	1ccd      	adds	r5, r1, #3
 8004574:	f025 0503 	bic.w	r5, r5, #3
 8004578:	3508      	adds	r5, #8
 800457a:	2d0c      	cmp	r5, #12
 800457c:	bf38      	it	cc
 800457e:	250c      	movcc	r5, #12
 8004580:	2d00      	cmp	r5, #0
 8004582:	4606      	mov	r6, r0
 8004584:	db01      	blt.n	800458a <_malloc_r+0x1a>
 8004586:	42a9      	cmp	r1, r5
 8004588:	d903      	bls.n	8004592 <_malloc_r+0x22>
 800458a:	230c      	movs	r3, #12
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	2000      	movs	r0, #0
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	f000 fa41 	bl	8004a18 <__malloc_lock>
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <_malloc_r+0xac>)
 8004598:	6814      	ldr	r4, [r2, #0]
 800459a:	4621      	mov	r1, r4
 800459c:	b991      	cbnz	r1, 80045c4 <_malloc_r+0x54>
 800459e:	4c20      	ldr	r4, [pc, #128]	; (8004620 <_malloc_r+0xb0>)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	b91b      	cbnz	r3, 80045ac <_malloc_r+0x3c>
 80045a4:	4630      	mov	r0, r6
 80045a6:	f000 f97b 	bl	80048a0 <_sbrk_r>
 80045aa:	6020      	str	r0, [r4, #0]
 80045ac:	4629      	mov	r1, r5
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 f976 	bl	80048a0 <_sbrk_r>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d124      	bne.n	8004602 <_malloc_r+0x92>
 80045b8:	230c      	movs	r3, #12
 80045ba:	4630      	mov	r0, r6
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	f000 fa2c 	bl	8004a1a <__malloc_unlock>
 80045c2:	e7e4      	b.n	800458e <_malloc_r+0x1e>
 80045c4:	680b      	ldr	r3, [r1, #0]
 80045c6:	1b5b      	subs	r3, r3, r5
 80045c8:	d418      	bmi.n	80045fc <_malloc_r+0x8c>
 80045ca:	2b0b      	cmp	r3, #11
 80045cc:	d90f      	bls.n	80045ee <_malloc_r+0x7e>
 80045ce:	600b      	str	r3, [r1, #0]
 80045d0:	18cc      	adds	r4, r1, r3
 80045d2:	50cd      	str	r5, [r1, r3]
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 fa20 	bl	8004a1a <__malloc_unlock>
 80045da:	f104 000b 	add.w	r0, r4, #11
 80045de:	1d23      	adds	r3, r4, #4
 80045e0:	f020 0007 	bic.w	r0, r0, #7
 80045e4:	1ac3      	subs	r3, r0, r3
 80045e6:	d0d3      	beq.n	8004590 <_malloc_r+0x20>
 80045e8:	425a      	negs	r2, r3
 80045ea:	50e2      	str	r2, [r4, r3]
 80045ec:	e7d0      	b.n	8004590 <_malloc_r+0x20>
 80045ee:	684b      	ldr	r3, [r1, #4]
 80045f0:	428c      	cmp	r4, r1
 80045f2:	bf16      	itet	ne
 80045f4:	6063      	strne	r3, [r4, #4]
 80045f6:	6013      	streq	r3, [r2, #0]
 80045f8:	460c      	movne	r4, r1
 80045fa:	e7eb      	b.n	80045d4 <_malloc_r+0x64>
 80045fc:	460c      	mov	r4, r1
 80045fe:	6849      	ldr	r1, [r1, #4]
 8004600:	e7cc      	b.n	800459c <_malloc_r+0x2c>
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d005      	beq.n	8004618 <_malloc_r+0xa8>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4630      	mov	r0, r6
 8004610:	f000 f946 	bl	80048a0 <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d0cf      	beq.n	80045b8 <_malloc_r+0x48>
 8004618:	6025      	str	r5, [r4, #0]
 800461a:	e7db      	b.n	80045d4 <_malloc_r+0x64>
 800461c:	200001fc 	.word	0x200001fc
 8004620:	20000200 	.word	0x20000200

08004624 <__sfputc_r>:
 8004624:	6893      	ldr	r3, [r2, #8]
 8004626:	b410      	push	{r4}
 8004628:	3b01      	subs	r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	6093      	str	r3, [r2, #8]
 800462e:	da07      	bge.n	8004640 <__sfputc_r+0x1c>
 8004630:	6994      	ldr	r4, [r2, #24]
 8004632:	42a3      	cmp	r3, r4
 8004634:	db01      	blt.n	800463a <__sfputc_r+0x16>
 8004636:	290a      	cmp	r1, #10
 8004638:	d102      	bne.n	8004640 <__sfputc_r+0x1c>
 800463a:	bc10      	pop	{r4}
 800463c:	f7fe bb52 	b.w	8002ce4 <__swbuf_r>
 8004640:	6813      	ldr	r3, [r2, #0]
 8004642:	1c58      	adds	r0, r3, #1
 8004644:	6010      	str	r0, [r2, #0]
 8004646:	7019      	strb	r1, [r3, #0]
 8004648:	4608      	mov	r0, r1
 800464a:	bc10      	pop	{r4}
 800464c:	4770      	bx	lr

0800464e <__sfputs_r>:
 800464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004650:	4606      	mov	r6, r0
 8004652:	460f      	mov	r7, r1
 8004654:	4614      	mov	r4, r2
 8004656:	18d5      	adds	r5, r2, r3
 8004658:	42ac      	cmp	r4, r5
 800465a:	d101      	bne.n	8004660 <__sfputs_r+0x12>
 800465c:	2000      	movs	r0, #0
 800465e:	e007      	b.n	8004670 <__sfputs_r+0x22>
 8004660:	463a      	mov	r2, r7
 8004662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff ffdc 	bl	8004624 <__sfputc_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d1f3      	bne.n	8004658 <__sfputs_r+0xa>
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004674 <_vfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	460c      	mov	r4, r1
 800467a:	b09d      	sub	sp, #116	; 0x74
 800467c:	4617      	mov	r7, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4606      	mov	r6, r0
 8004682:	b118      	cbz	r0, 800468c <_vfiprintf_r+0x18>
 8004684:	6983      	ldr	r3, [r0, #24]
 8004686:	b90b      	cbnz	r3, 800468c <_vfiprintf_r+0x18>
 8004688:	f7ff fb1e 	bl	8003cc8 <__sinit>
 800468c:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <_vfiprintf_r+0x20c>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d158      	bne.n	8004744 <_vfiprintf_r+0xd0>
 8004692:	6874      	ldr	r4, [r6, #4]
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	0718      	lsls	r0, r3, #28
 8004698:	d55e      	bpl.n	8004758 <_vfiprintf_r+0xe4>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05b      	beq.n	8004758 <_vfiprintf_r+0xe4>
 80046a0:	2300      	movs	r3, #0
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	2320      	movs	r3, #32
 80046a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046aa:	2330      	movs	r3, #48	; 0x30
 80046ac:	f04f 0b01 	mov.w	fp, #1
 80046b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046b4:	9503      	str	r5, [sp, #12]
 80046b6:	46b8      	mov	r8, r7
 80046b8:	4645      	mov	r5, r8
 80046ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046be:	b10b      	cbz	r3, 80046c4 <_vfiprintf_r+0x50>
 80046c0:	2b25      	cmp	r3, #37	; 0x25
 80046c2:	d154      	bne.n	800476e <_vfiprintf_r+0xfa>
 80046c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80046c8:	d00b      	beq.n	80046e2 <_vfiprintf_r+0x6e>
 80046ca:	4653      	mov	r3, sl
 80046cc:	463a      	mov	r2, r7
 80046ce:	4621      	mov	r1, r4
 80046d0:	4630      	mov	r0, r6
 80046d2:	f7ff ffbc 	bl	800464e <__sfputs_r>
 80046d6:	3001      	adds	r0, #1
 80046d8:	f000 80c2 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 80046dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046de:	4453      	add	r3, sl
 80046e0:	9309      	str	r3, [sp, #36]	; 0x24
 80046e2:	f898 3000 	ldrb.w	r3, [r8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80ba 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 80046ec:	2300      	movs	r3, #0
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	9307      	str	r3, [sp, #28]
 80046fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004700:	46a8      	mov	r8, r5
 8004702:	2205      	movs	r2, #5
 8004704:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004708:	485e      	ldr	r0, [pc, #376]	; (8004884 <_vfiprintf_r+0x210>)
 800470a:	f7ff fbe1 	bl	8003ed0 <memchr>
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	bb78      	cbnz	r0, 8004772 <_vfiprintf_r+0xfe>
 8004712:	06d9      	lsls	r1, r3, #27
 8004714:	bf44      	itt	mi
 8004716:	2220      	movmi	r2, #32
 8004718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800471c:	071a      	lsls	r2, r3, #28
 800471e:	bf44      	itt	mi
 8004720:	222b      	movmi	r2, #43	; 0x2b
 8004722:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004726:	782a      	ldrb	r2, [r5, #0]
 8004728:	2a2a      	cmp	r2, #42	; 0x2a
 800472a:	d02a      	beq.n	8004782 <_vfiprintf_r+0x10e>
 800472c:	46a8      	mov	r8, r5
 800472e:	2000      	movs	r0, #0
 8004730:	250a      	movs	r5, #10
 8004732:	9a07      	ldr	r2, [sp, #28]
 8004734:	4641      	mov	r1, r8
 8004736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800473a:	3b30      	subs	r3, #48	; 0x30
 800473c:	2b09      	cmp	r3, #9
 800473e:	d969      	bls.n	8004814 <_vfiprintf_r+0x1a0>
 8004740:	b360      	cbz	r0, 800479c <_vfiprintf_r+0x128>
 8004742:	e024      	b.n	800478e <_vfiprintf_r+0x11a>
 8004744:	4b50      	ldr	r3, [pc, #320]	; (8004888 <_vfiprintf_r+0x214>)
 8004746:	429c      	cmp	r4, r3
 8004748:	d101      	bne.n	800474e <_vfiprintf_r+0xda>
 800474a:	68b4      	ldr	r4, [r6, #8]
 800474c:	e7a2      	b.n	8004694 <_vfiprintf_r+0x20>
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <_vfiprintf_r+0x218>)
 8004750:	429c      	cmp	r4, r3
 8004752:	bf08      	it	eq
 8004754:	68f4      	ldreq	r4, [r6, #12]
 8004756:	e79d      	b.n	8004694 <_vfiprintf_r+0x20>
 8004758:	4621      	mov	r1, r4
 800475a:	4630      	mov	r0, r6
 800475c:	f7fe fb14 	bl	8002d88 <__swsetup_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	d09d      	beq.n	80046a0 <_vfiprintf_r+0x2c>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004768:	b01d      	add	sp, #116	; 0x74
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476e:	46a8      	mov	r8, r5
 8004770:	e7a2      	b.n	80046b8 <_vfiprintf_r+0x44>
 8004772:	4a44      	ldr	r2, [pc, #272]	; (8004884 <_vfiprintf_r+0x210>)
 8004774:	4645      	mov	r5, r8
 8004776:	1a80      	subs	r0, r0, r2
 8004778:	fa0b f000 	lsl.w	r0, fp, r0
 800477c:	4318      	orrs	r0, r3
 800477e:	9004      	str	r0, [sp, #16]
 8004780:	e7be      	b.n	8004700 <_vfiprintf_r+0x8c>
 8004782:	9a03      	ldr	r2, [sp, #12]
 8004784:	1d11      	adds	r1, r2, #4
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	9103      	str	r1, [sp, #12]
 800478a:	2a00      	cmp	r2, #0
 800478c:	db01      	blt.n	8004792 <_vfiprintf_r+0x11e>
 800478e:	9207      	str	r2, [sp, #28]
 8004790:	e004      	b.n	800479c <_vfiprintf_r+0x128>
 8004792:	4252      	negs	r2, r2
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	9207      	str	r2, [sp, #28]
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	f898 3000 	ldrb.w	r3, [r8]
 80047a0:	2b2e      	cmp	r3, #46	; 0x2e
 80047a2:	d10e      	bne.n	80047c2 <_vfiprintf_r+0x14e>
 80047a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d138      	bne.n	800481e <_vfiprintf_r+0x1aa>
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	f108 0802 	add.w	r8, r8, #2
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	9203      	str	r2, [sp, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfb8      	it	lt
 80047bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047c0:	9305      	str	r3, [sp, #20]
 80047c2:	4d33      	ldr	r5, [pc, #204]	; (8004890 <_vfiprintf_r+0x21c>)
 80047c4:	2203      	movs	r2, #3
 80047c6:	f898 1000 	ldrb.w	r1, [r8]
 80047ca:	4628      	mov	r0, r5
 80047cc:	f7ff fb80 	bl	8003ed0 <memchr>
 80047d0:	b140      	cbz	r0, 80047e4 <_vfiprintf_r+0x170>
 80047d2:	2340      	movs	r3, #64	; 0x40
 80047d4:	1b40      	subs	r0, r0, r5
 80047d6:	fa03 f000 	lsl.w	r0, r3, r0
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	f108 0801 	add.w	r8, r8, #1
 80047e0:	4303      	orrs	r3, r0
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	f898 1000 	ldrb.w	r1, [r8]
 80047e8:	2206      	movs	r2, #6
 80047ea:	482a      	ldr	r0, [pc, #168]	; (8004894 <_vfiprintf_r+0x220>)
 80047ec:	f108 0701 	add.w	r7, r8, #1
 80047f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f4:	f7ff fb6c 	bl	8003ed0 <memchr>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d037      	beq.n	800486c <_vfiprintf_r+0x1f8>
 80047fc:	4b26      	ldr	r3, [pc, #152]	; (8004898 <_vfiprintf_r+0x224>)
 80047fe:	bb1b      	cbnz	r3, 8004848 <_vfiprintf_r+0x1d4>
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	3307      	adds	r3, #7
 8004804:	f023 0307 	bic.w	r3, r3, #7
 8004808:	3308      	adds	r3, #8
 800480a:	9303      	str	r3, [sp, #12]
 800480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480e:	444b      	add	r3, r9
 8004810:	9309      	str	r3, [sp, #36]	; 0x24
 8004812:	e750      	b.n	80046b6 <_vfiprintf_r+0x42>
 8004814:	fb05 3202 	mla	r2, r5, r2, r3
 8004818:	2001      	movs	r0, #1
 800481a:	4688      	mov	r8, r1
 800481c:	e78a      	b.n	8004734 <_vfiprintf_r+0xc0>
 800481e:	2300      	movs	r3, #0
 8004820:	250a      	movs	r5, #10
 8004822:	4619      	mov	r1, r3
 8004824:	f108 0801 	add.w	r8, r8, #1
 8004828:	9305      	str	r3, [sp, #20]
 800482a:	4640      	mov	r0, r8
 800482c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004830:	3a30      	subs	r2, #48	; 0x30
 8004832:	2a09      	cmp	r2, #9
 8004834:	d903      	bls.n	800483e <_vfiprintf_r+0x1ca>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0c3      	beq.n	80047c2 <_vfiprintf_r+0x14e>
 800483a:	9105      	str	r1, [sp, #20]
 800483c:	e7c1      	b.n	80047c2 <_vfiprintf_r+0x14e>
 800483e:	fb05 2101 	mla	r1, r5, r1, r2
 8004842:	2301      	movs	r3, #1
 8004844:	4680      	mov	r8, r0
 8004846:	e7f0      	b.n	800482a <_vfiprintf_r+0x1b6>
 8004848:	ab03      	add	r3, sp, #12
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4622      	mov	r2, r4
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <_vfiprintf_r+0x228>)
 8004850:	a904      	add	r1, sp, #16
 8004852:	4630      	mov	r0, r6
 8004854:	f7fd fe0c 	bl	8002470 <_printf_float>
 8004858:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800485c:	4681      	mov	r9, r0
 800485e:	d1d5      	bne.n	800480c <_vfiprintf_r+0x198>
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	065b      	lsls	r3, r3, #25
 8004864:	f53f af7e 	bmi.w	8004764 <_vfiprintf_r+0xf0>
 8004868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800486a:	e77d      	b.n	8004768 <_vfiprintf_r+0xf4>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4622      	mov	r2, r4
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <_vfiprintf_r+0x228>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4630      	mov	r0, r6
 8004878:	f7fe f8a6 	bl	80029c8 <_printf_i>
 800487c:	e7ec      	b.n	8004858 <_vfiprintf_r+0x1e4>
 800487e:	bf00      	nop
 8004880:	08004b4c 	.word	0x08004b4c
 8004884:	08004c8c 	.word	0x08004c8c
 8004888:	08004b6c 	.word	0x08004b6c
 800488c:	08004b2c 	.word	0x08004b2c
 8004890:	08004c92 	.word	0x08004c92
 8004894:	08004c96 	.word	0x08004c96
 8004898:	08002471 	.word	0x08002471
 800489c:	0800464f 	.word	0x0800464f

080048a0 <_sbrk_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	2300      	movs	r3, #0
 80048a4:	4c05      	ldr	r4, [pc, #20]	; (80048bc <_sbrk_r+0x1c>)
 80048a6:	4605      	mov	r5, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	f7fc fba2 	bl	8000ff4 <_sbrk>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_sbrk_r+0x1a>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_sbrk_r+0x1a>
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000248 	.word	0x20000248

080048c0 <__sread>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	460c      	mov	r4, r1
 80048c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c8:	f000 f8a8 	bl	8004a1c <_read_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	bfab      	itete	ge
 80048d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048d2:	89a3      	ldrhlt	r3, [r4, #12]
 80048d4:	181b      	addge	r3, r3, r0
 80048d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048da:	bfac      	ite	ge
 80048dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048de:	81a3      	strhlt	r3, [r4, #12]
 80048e0:	bd10      	pop	{r4, pc}

080048e2 <__swrite>:
 80048e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	461f      	mov	r7, r3
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	4605      	mov	r5, r0
 80048ec:	05db      	lsls	r3, r3, #23
 80048ee:	460c      	mov	r4, r1
 80048f0:	4616      	mov	r6, r2
 80048f2:	d505      	bpl.n	8004900 <__swrite+0x1e>
 80048f4:	2302      	movs	r3, #2
 80048f6:	2200      	movs	r2, #0
 80048f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fc:	f000 f868 	bl	80049d0 <_lseek_r>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	4632      	mov	r2, r6
 8004904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490e:	463b      	mov	r3, r7
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	f000 b817 	b.w	8004948 <_write_r>

0800491a <__sseek>:
 800491a:	b510      	push	{r4, lr}
 800491c:	460c      	mov	r4, r1
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 f855 	bl	80049d0 <_lseek_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	bf15      	itete	ne
 800492c:	6560      	strne	r0, [r4, #84]	; 0x54
 800492e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004936:	81a3      	strheq	r3, [r4, #12]
 8004938:	bf18      	it	ne
 800493a:	81a3      	strhne	r3, [r4, #12]
 800493c:	bd10      	pop	{r4, pc}

0800493e <__sclose>:
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 b813 	b.w	800496c <_close_r>
	...

08004948 <_write_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4605      	mov	r5, r0
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	2200      	movs	r2, #0
 8004952:	4c05      	ldr	r4, [pc, #20]	; (8004968 <_write_r+0x20>)
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc faff 	bl	8000f5a <_write>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_write_r+0x1e>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	b103      	cbz	r3, 8004966 <_write_r+0x1e>
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000248 	.word	0x20000248

0800496c <_close_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	2300      	movs	r3, #0
 8004970:	4c05      	ldr	r4, [pc, #20]	; (8004988 <_close_r+0x1c>)
 8004972:	4605      	mov	r5, r0
 8004974:	4608      	mov	r0, r1
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	f7fc fb0b 	bl	8000f92 <_close>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_close_r+0x1a>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	b103      	cbz	r3, 8004986 <_close_r+0x1a>
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20000248 	.word	0x20000248

0800498c <_fstat_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	2300      	movs	r3, #0
 8004990:	4c06      	ldr	r4, [pc, #24]	; (80049ac <_fstat_r+0x20>)
 8004992:	4605      	mov	r5, r0
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	f7fc fb05 	bl	8000fa8 <_fstat>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d102      	bne.n	80049a8 <_fstat_r+0x1c>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	b103      	cbz	r3, 80049a8 <_fstat_r+0x1c>
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	bd38      	pop	{r3, r4, r5, pc}
 80049aa:	bf00      	nop
 80049ac:	20000248 	.word	0x20000248

080049b0 <_isatty_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	2300      	movs	r3, #0
 80049b4:	4c05      	ldr	r4, [pc, #20]	; (80049cc <_isatty_r+0x1c>)
 80049b6:	4605      	mov	r5, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	f7fc fb03 	bl	8000fc6 <_isatty>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_isatty_r+0x1a>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_isatty_r+0x1a>
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000248 	.word	0x20000248

080049d0 <_lseek_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4605      	mov	r5, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	2200      	movs	r2, #0
 80049da:	4c05      	ldr	r4, [pc, #20]	; (80049f0 <_lseek_r+0x20>)
 80049dc:	6022      	str	r2, [r4, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f7fc fafb 	bl	8000fda <_lseek>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_lseek_r+0x1e>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_lseek_r+0x1e>
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	20000248 	.word	0x20000248

080049f4 <__ascii_mbtowc>:
 80049f4:	b082      	sub	sp, #8
 80049f6:	b901      	cbnz	r1, 80049fa <__ascii_mbtowc+0x6>
 80049f8:	a901      	add	r1, sp, #4
 80049fa:	b142      	cbz	r2, 8004a0e <__ascii_mbtowc+0x1a>
 80049fc:	b14b      	cbz	r3, 8004a12 <__ascii_mbtowc+0x1e>
 80049fe:	7813      	ldrb	r3, [r2, #0]
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	1c10      	adds	r0, r2, #0
 8004a06:	bf18      	it	ne
 8004a08:	2001      	movne	r0, #1
 8004a0a:	b002      	add	sp, #8
 8004a0c:	4770      	bx	lr
 8004a0e:	4610      	mov	r0, r2
 8004a10:	e7fb      	b.n	8004a0a <__ascii_mbtowc+0x16>
 8004a12:	f06f 0001 	mvn.w	r0, #1
 8004a16:	e7f8      	b.n	8004a0a <__ascii_mbtowc+0x16>

08004a18 <__malloc_lock>:
 8004a18:	4770      	bx	lr

08004a1a <__malloc_unlock>:
 8004a1a:	4770      	bx	lr

08004a1c <_read_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4605      	mov	r5, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	2200      	movs	r2, #0
 8004a26:	4c05      	ldr	r4, [pc, #20]	; (8004a3c <_read_r+0x20>)
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fc fa78 	bl	8000f20 <_read>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_read_r+0x1e>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_read_r+0x1e>
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20000248 	.word	0x20000248

08004a40 <__ascii_wctomb>:
 8004a40:	b149      	cbz	r1, 8004a56 <__ascii_wctomb+0x16>
 8004a42:	2aff      	cmp	r2, #255	; 0xff
 8004a44:	bf8b      	itete	hi
 8004a46:	238a      	movhi	r3, #138	; 0x8a
 8004a48:	700a      	strbls	r2, [r1, #0]
 8004a4a:	6003      	strhi	r3, [r0, #0]
 8004a4c:	2001      	movls	r0, #1
 8004a4e:	bf88      	it	hi
 8004a50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004a54:	4770      	bx	lr
 8004a56:	4608      	mov	r0, r1
 8004a58:	4770      	bx	lr
	...

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
