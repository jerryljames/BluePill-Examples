
UART DMA P3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003324  08003324  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003324  08003324  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800332c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  08003508  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003508  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ba5  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab7  00000000  00000000  00027daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  00029868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180d0  00000000  00000000  0002a650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076d5  00000000  00000000  00042720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082ffe  00000000  00000000  00049df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccdf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024bc  00000000  00000000  000cce70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003080 	.word	0x08003080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08003080 	.word	0x08003080

0800014c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
 8000170:	f000 fc75 	bl	8000a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f000 fc8e 	bl	8000a96 <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0x90>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a1d      	ldr	r2, [pc, #116]	; (8000218 <MX_GPIO_Init+0x90>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0x90>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0310 	and.w	r3, r3, #16
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0x90>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a17      	ldr	r2, [pc, #92]	; (8000218 <MX_GPIO_Init+0x90>)
 80001ba:	f043 0320 	orr.w	r3, r3, #32
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <MX_GPIO_Init+0x90>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0320 	and.w	r3, r3, #32
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <MX_GPIO_Init+0x90>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a11      	ldr	r2, [pc, #68]	; (8000218 <MX_GPIO_Init+0x90>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <MX_GPIO_Init+0x90>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0304 	and.w	r3, r3, #4
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Out_GPIO_Port, LED_Out_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	480c      	ldr	r0, [pc, #48]	; (800021c <MX_GPIO_Init+0x94>)
 80001ec:	f000 ffb6 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Out_Pin;
 80001f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	2301      	movs	r3, #1
 80001f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fe:	2302      	movs	r3, #2
 8000200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Out_GPIO_Port, &GPIO_InitStruct);
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	4619      	mov	r1, r3
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <MX_GPIO_Init+0x94>)
 800020a:	f000 fe4d 	bl	8000ea8 <HAL_GPIO_Init>

}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	40011000 	.word	0x40011000

08000220 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 fae1 	bl	80007ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f829 	bl	8000280 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f7ff ffab 	bl	8000188 <MX_GPIO_Init>
	MX_DMA_Init();
 8000232:	f7ff ff8b 	bl	800014c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000236:	f000 fa15 	bl	8000664 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Initialising...\r\n");
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <main+0x48>)
 800023c:	f001 ff74 	bl	8002128 <puts>
	printf("Size of Rx buffer : %d\r\n", sizeof(rxBuf));
 8000240:	2109      	movs	r1, #9
 8000242:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0x4c>)
 8000244:	f001 fefc 	bl	8002040 <iprintf>
	char *c = "6";
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <main+0x50>)
 800024a:	607b      	str	r3, [r7, #4]
	int y = atoi(c);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f001 fec1 	bl	8001fd4 <atoi>
 8000252:	6038      	str	r0, [r7, #0]
	printf("ATOI conv : %d\r\n",y);
 8000254:	6839      	ldr	r1, [r7, #0]
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0x54>)
 8000258:	f001 fef2 	bl	8002040 <iprintf>

	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 800025c:	2203      	movs	r2, #3
 800025e:	4906      	ldr	r1, [pc, #24]	; (8000278 <main+0x58>)
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <main+0x5c>)
 8000262:	f001 fc8f 	bl	8001b84 <HAL_UART_Receive_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x46>
 8000268:	08003098 	.word	0x08003098
 800026c:	080030ac 	.word	0x080030ac
 8000270:	080030c8 	.word	0x080030c8
 8000274:	080030cc 	.word	0x080030cc
 8000278:	20000208 	.word	0x20000208
 800027c:	20000258 	.word	0x20000258

08000280 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fece 	bl	8002030 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 ff5f 	bl	800118c <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80002d4:	f000 f8be 	bl	8000454 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 f9ca 	bl	800168c <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80002fe:	f000 f8a9 	bl	8000454 <Error_Handler>
	}
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000314:	1d39      	adds	r1, r7, #4
 8000316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800031a:	2201      	movs	r2, #1
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <__io_putchar+0x20>)
 800031e:	f001 fb9e 	bl	8001a5e <HAL_UART_Transmit>

	return ch;
 8000322:	687b      	ldr	r3, [r7, #4]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000258 	.word	0x20000258

08000330 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	///////////////////////////////////////////////////////////////
	switch (myUART_State)
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <HAL_UART_RxCpltCallback+0x98>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d002      	beq.n	8000346 <HAL_UART_RxCpltCallback+0x16>
 8000340:	2b01      	cmp	r3, #1
 8000342:	d031      	beq.n	80003a8 <HAL_UART_RxCpltCallback+0x78>
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
		myUART_State = UT_START;
		break;

	}
}
 8000344:	e03c      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x90>
		if(rxBuf[0] == '*' && rxBuf[2] == '#')
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b2a      	cmp	r3, #42	; 0x2a
 800034c:	d122      	bne.n	8000394 <HAL_UART_RxCpltCallback+0x64>
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 8000350:	789b      	ldrb	r3, [r3, #2]
 8000352:	2b23      	cmp	r3, #35	; 0x23
 8000354:	d11e      	bne.n	8000394 <HAL_UART_RxCpltCallback+0x64>
			if(((uint16_t)rxBuf[1] - 48) <= sizeof(rxBuf))
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 8000358:	785b      	ldrb	r3, [r3, #1]
 800035a:	3b30      	subs	r3, #48	; 0x30
 800035c:	2b09      	cmp	r3, #9
 800035e:	d810      	bhi.n	8000382 <HAL_UART_RxCpltCallback+0x52>
				printf("Send CMD:\r\n");
 8000360:	481b      	ldr	r0, [pc, #108]	; (80003d0 <HAL_UART_RxCpltCallback+0xa0>)
 8000362:	f001 fee1 	bl	8002128 <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, ((uint16_t)rxBuf[1] - 48));
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 8000368:	785b      	ldrb	r3, [r3, #1]
 800036a:	b29b      	uxth	r3, r3
 800036c:	3b30      	subs	r3, #48	; 0x30
 800036e:	b29b      	uxth	r3, r3
 8000370:	461a      	mov	r2, r3
 8000372:	4916      	ldr	r1, [pc, #88]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 8000374:	4817      	ldr	r0, [pc, #92]	; (80003d4 <HAL_UART_RxCpltCallback+0xa4>)
 8000376:	f001 fc05 	bl	8001b84 <HAL_UART_Receive_DMA>
				myUART_State = UT_APP;
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <HAL_UART_RxCpltCallback+0x98>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)rxBuf[1] - 48) <= sizeof(rxBuf))
 8000380:	e011      	b.n	80003a6 <HAL_UART_RxCpltCallback+0x76>
				printf("Invalid size\r\n");
 8000382:	4815      	ldr	r0, [pc, #84]	; (80003d8 <HAL_UART_RxCpltCallback+0xa8>)
 8000384:	f001 fed0 	bl	8002128 <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000388:	2203      	movs	r2, #3
 800038a:	4910      	ldr	r1, [pc, #64]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 800038c:	4811      	ldr	r0, [pc, #68]	; (80003d4 <HAL_UART_RxCpltCallback+0xa4>)
 800038e:	f001 fbf9 	bl	8001b84 <HAL_UART_Receive_DMA>
			if(((uint16_t)rxBuf[1] - 48) <= sizeof(rxBuf))
 8000392:	e008      	b.n	80003a6 <HAL_UART_RxCpltCallback+0x76>
			printf("Invalid command\r\n");
 8000394:	4811      	ldr	r0, [pc, #68]	; (80003dc <HAL_UART_RxCpltCallback+0xac>)
 8000396:	f001 fec7 	bl	8002128 <puts>
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 800039a:	2203      	movs	r2, #3
 800039c:	490b      	ldr	r1, [pc, #44]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <HAL_UART_RxCpltCallback+0xa4>)
 80003a0:	f001 fbf0 	bl	8001b84 <HAL_UART_Receive_DMA>
		break;
 80003a4:	e00c      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x90>
 80003a6:	e00b      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x90>
		application_handling(rxBuf);
 80003a8:	4808      	ldr	r0, [pc, #32]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 80003aa:	f000 f819 	bl	80003e0 <application_handling>
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 80003ae:	2203      	movs	r2, #3
 80003b0:	4906      	ldr	r1, [pc, #24]	; (80003cc <HAL_UART_RxCpltCallback+0x9c>)
 80003b2:	4808      	ldr	r0, [pc, #32]	; (80003d4 <HAL_UART_RxCpltCallback+0xa4>)
 80003b4:	f001 fbe6 	bl	8001b84 <HAL_UART_Receive_DMA>
		myUART_State = UT_START;
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <HAL_UART_RxCpltCallback+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		break;
 80003be:	bf00      	nop
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200001f8 	.word	0x200001f8
 80003cc:	20000208 	.word	0x20000208
 80003d0:	080030e0 	.word	0x080030e0
 80003d4:	20000258 	.word	0x20000258
 80003d8:	080030ec 	.word	0x080030ec
 80003dc:	080030fc 	.word	0x080030fc

080003e0 <application_handling>:

void application_handling(char *cmd)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 80003e8:	4914      	ldr	r1, [pc, #80]	; (800043c <application_handling+0x5c>)
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f001 fea4 	bl	8002138 <strstr>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d009      	beq.n	800040a <application_handling+0x2a>
	{
		//Turn LED ON
		HAL_GPIO_WritePin(LED_Out_GPIO_Port, LED_Out_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fc:	4810      	ldr	r0, [pc, #64]	; (8000440 <application_handling+0x60>)
 80003fe:	f000 fead 	bl	800115c <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 8000402:	4810      	ldr	r0, [pc, #64]	; (8000444 <application_handling+0x64>)
 8000404:	f001 fe90 	bl	8002128 <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000408:	e013      	b.n	8000432 <application_handling+0x52>
	else if(strstr(cmd, "LED OFF") != NULL)
 800040a:	490f      	ldr	r1, [pc, #60]	; (8000448 <application_handling+0x68>)
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f001 fe93 	bl	8002138 <strstr>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d009      	beq.n	800042c <application_handling+0x4c>
		HAL_GPIO_WritePin(LED_Out_GPIO_Port, LED_Out_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <application_handling+0x60>)
 8000420:	f000 fe9c 	bl	800115c <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <application_handling+0x6c>)
 8000426:	f001 fe7f 	bl	8002128 <puts>
}
 800042a:	e002      	b.n	8000432 <application_handling+0x52>
		printf("Invalid Command!\r\n");
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <application_handling+0x70>)
 800042e:	f001 fe7b 	bl	8002128 <puts>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	08003110 	.word	0x08003110
 8000440:	40011000 	.word	0x40011000
 8000444:	08003118 	.word	0x08003118
 8000448:	08003128 	.word	0x08003128
 800044c:	08003130 	.word	0x08003130
 8000450:	08003140 	.word	0x08003140

08000454 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <HardFault_Handler+0x4>

080004d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <BusFault_Handler+0x4>

080004e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f9b2 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <DMA1_Channel6_IRQHandler+0x10>)
 800051e:	f000 fb8f 	bl	8000c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000214 	.word	0x20000214

0800052c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00a      	b.n	8000554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800053e:	f3af 8000 	nop.w
 8000542:	4601      	mov	r1, r0
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf0      	blt.n	800053e <_read+0x12>
	}

return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e009      	b.n	800058c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fec3 	bl	800030c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf1      	blt.n	8000578 <_write+0x12>
	}
	return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_close>:

int _close(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
	return -1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c4:	605a      	str	r2, [r3, #4]
	return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_isatty>:

int _isatty(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <_sbrk+0x50>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <_sbrk+0x16>
		heap_end = &end;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <_sbrk+0x50>)
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <_sbrk+0x54>)
 8000614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <_sbrk+0x50>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <_sbrk+0x50>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	466a      	mov	r2, sp
 8000626:	4293      	cmp	r3, r2
 8000628:	d907      	bls.n	800063a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800062a:	f001 fcd7 	bl	8001fdc <__errno>
 800062e:	4602      	mov	r2, r0
 8000630:	230c      	movs	r3, #12
 8000632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000638:	e006      	b.n	8000648 <_sbrk+0x48>
	}

	heap_end += incr;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <_sbrk+0x50>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	4a03      	ldr	r2, [pc, #12]	; (8000650 <_sbrk+0x50>)
 8000644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001fc 	.word	0x200001fc
 8000654:	200002a0 	.word	0x200002a0

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 f992 	bl	80019c4 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f7ff fed5 	bl	8000454 <Error_Handler>
  }

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000258 	.word	0x20000258
 80006b4:	40004400 	.word	0x40004400

080006b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a2e      	ldr	r2, [pc, #184]	; (800078c <HAL_UART_MspInit+0xd4>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d155      	bne.n	8000784 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e2:	61d3      	str	r3, [r2, #28]
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a26      	ldr	r2, [pc, #152]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <HAL_UART_MspInit+0xd8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000708:	2304      	movs	r3, #4
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <HAL_UART_MspInit+0xdc>)
 800071c:	f000 fbc4 	bl	8000ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000720:	2308      	movs	r3, #8
 8000722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <HAL_UART_MspInit+0xdc>)
 8000734:	f000 fbb8 	bl	8000ea8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_UART_MspInit+0xe0>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <HAL_UART_MspInit+0xe4>)
 800073c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_UART_MspInit+0xe0>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_UART_MspInit+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_UART_MspInit+0xe0>)
 800076a:	f000 f9af 	bl	8000acc <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000774:	f7ff fe6e 	bl	8000454 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_UART_MspInit+0xe0>)
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_UART_MspInit+0xe0>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800
 8000798:	20000214 	.word	0x20000214
 800079c:	4002006c 	.word	0x4002006c

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007a2:	e003      	b.n	80007ac <LoopCopyDataInit>

080007a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007aa:	3104      	adds	r1, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007b4:	d3f6      	bcc.n	80007a4 <CopyDataInit>
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007b8:	e002      	b.n	80007c0 <LoopFillZerobss>

080007ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007bc:	f842 3b04 	str.w	r3, [r2], #4

080007c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007c4:	d3f9      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ff47 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 fc0d 	bl	8001fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fd27 	bl	8000220 <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r3, =_sidata
 80007d4:	0800332c 	.word	0x0800332c
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80007e0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80007e4:	200002a0 	.word	0x200002a0

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f923 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe2a 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f93b 	bl	8000ab2 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000854:	f000 f903 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000008 	.word	0x20000008
 8000898:	20000298 	.word	0x20000298

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000298 	.word	0x20000298

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4906      	ldr	r1, [pc, #24]	; (8000948 <__NVIC_EnableIRQ+0x34>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a28:	f7ff ff90 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff2d 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff42 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff90 	bl	80009a0 <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5f 	bl	800094c <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff35 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffa2 	bl	8000a04 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e043      	b.n	8000b6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <HAL_DMA_Init+0xa8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_DMA_Init+0xac>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	009a      	lsls	r2, r3, #2
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_DMA_Init+0xb0>)
 8000afe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2202      	movs	r2, #2
 8000b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	bffdfff8 	.word	0xbffdfff8
 8000b78:	cccccccd 	.word	0xcccccccd
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d101      	bne.n	8000ba0 <HAL_DMA_Start_IT+0x20>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e04a      	b.n	8000c36 <HAL_DMA_Start_IT+0xb6>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d13a      	bne.n	8000c28 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f022 0201 	bic.w	r2, r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 f938 	bl	8000e4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 020e 	orr.w	r2, r2, #14
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e00f      	b.n	8000c16 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0204 	bic.w	r2, r2, #4
 8000c04:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 020a 	orr.w	r2, r2, #10
 8000c14:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 0201 	orr.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e005      	b.n	8000c34 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c30:	2302      	movs	r3, #2
 8000c32:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d04f      	beq.n	8000d08 <HAL_DMA_IRQHandler+0xc8>
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d04a      	beq.n	8000d08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0320 	and.w	r3, r3, #32
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d107      	bne.n	8000c90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0204 	bic.w	r2, r2, #4
 8000c8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a66      	ldr	r2, [pc, #408]	; (8000e30 <HAL_DMA_IRQHandler+0x1f0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d029      	beq.n	8000cee <HAL_DMA_IRQHandler+0xae>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a65      	ldr	r2, [pc, #404]	; (8000e34 <HAL_DMA_IRQHandler+0x1f4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d022      	beq.n	8000cea <HAL_DMA_IRQHandler+0xaa>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <HAL_DMA_IRQHandler+0x1f8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01a      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0xa4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a62      	ldr	r2, [pc, #392]	; (8000e3c <HAL_DMA_IRQHandler+0x1fc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d012      	beq.n	8000cde <HAL_DMA_IRQHandler+0x9e>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a60      	ldr	r2, [pc, #384]	; (8000e40 <HAL_DMA_IRQHandler+0x200>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00a      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x98>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a5f      	ldr	r2, [pc, #380]	; (8000e44 <HAL_DMA_IRQHandler+0x204>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <HAL_DMA_IRQHandler+0x92>
 8000ccc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd0:	e00e      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000cd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cd6:	e00b      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cdc:	e008      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000cde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ce2:	e005      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	e002      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000cea:	2340      	movs	r3, #64	; 0x40
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_IRQHandler+0xb0>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	4a55      	ldr	r2, [pc, #340]	; (8000e48 <HAL_DMA_IRQHandler+0x208>)
 8000cf2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 8094 	beq.w	8000e26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d06:	e08e      	b.n	8000e26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d056      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x186>
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d051      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10b      	bne.n	8000d48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 020a 	bic.w	r2, r2, #10
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a38      	ldr	r2, [pc, #224]	; (8000e30 <HAL_DMA_IRQHandler+0x1f0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d029      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x166>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <HAL_DMA_IRQHandler+0x1f4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d022      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x162>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a35      	ldr	r2, [pc, #212]	; (8000e38 <HAL_DMA_IRQHandler+0x1f8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01a      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x15c>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a34      	ldr	r2, [pc, #208]	; (8000e3c <HAL_DMA_IRQHandler+0x1fc>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d012      	beq.n	8000d96 <HAL_DMA_IRQHandler+0x156>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <HAL_DMA_IRQHandler+0x200>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00a      	beq.n	8000d90 <HAL_DMA_IRQHandler+0x150>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <HAL_DMA_IRQHandler+0x204>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d102      	bne.n	8000d8a <HAL_DMA_IRQHandler+0x14a>
 8000d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d88:	e00e      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d8e:	e00b      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d94:	e008      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9a:	e005      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da0:	e002      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000da2:	2320      	movs	r3, #32
 8000da4:	e000      	b.n	8000da8 <HAL_DMA_IRQHandler+0x168>
 8000da6:	2302      	movs	r3, #2
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_DMA_IRQHandler+0x208>)
 8000daa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d034      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dc4:	e02f      	b.n	8000e26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	2208      	movs	r2, #8
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d028      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x1e8>
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d023      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 020e 	bic.w	r2, r2, #14
 8000dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	4798      	blx	r3
    }
  }
  return;
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
}
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020008 	.word	0x40020008
 8000e34:	4002001c 	.word	0x4002001c
 8000e38:	40020030 	.word	0x40020030
 8000e3c:	40020044 	.word	0x40020044
 8000e40:	40020058 	.word	0x40020058
 8000e44:	4002006c 	.word	0x4002006c
 8000e48:	40020000 	.word	0x40020000

08000e4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d108      	bne.n	8000e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e8a:	e007      	b.n	8000e9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eba:	e127      	b.n	800110c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8116 	bne.w	8001106 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d034      	beq.n	8000f4c <HAL_GPIO_Init+0xa4>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d80d      	bhi.n	8000f02 <HAL_GPIO_Init+0x5a>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x9a>
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d804      	bhi.n	8000ef8 <HAL_GPIO_Init+0x50>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d031      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d01c      	beq.n	8000f30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef6:	e048      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d043      	beq.n	8000f84 <HAL_GPIO_Init+0xdc>
 8000efc:	2b11      	cmp	r3, #17
 8000efe:	d01b      	beq.n	8000f38 <HAL_GPIO_Init+0x90>
          break;
 8000f00:	e043      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f02:	4a89      	ldr	r2, [pc, #548]	; (8001128 <HAL_GPIO_Init+0x280>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d026      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
 8000f08:	4a87      	ldr	r2, [pc, #540]	; (8001128 <HAL_GPIO_Init+0x280>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d806      	bhi.n	8000f1c <HAL_GPIO_Init+0x74>
 8000f0e:	4a87      	ldr	r2, [pc, #540]	; (800112c <HAL_GPIO_Init+0x284>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d020      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
 8000f14:	4a86      	ldr	r2, [pc, #536]	; (8001130 <HAL_GPIO_Init+0x288>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01d      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
          break;
 8000f1a:	e036      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f1c:	4a85      	ldr	r2, [pc, #532]	; (8001134 <HAL_GPIO_Init+0x28c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
 8000f22:	4a85      	ldr	r2, [pc, #532]	; (8001138 <HAL_GPIO_Init+0x290>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d016      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
 8000f28:	4a84      	ldr	r2, [pc, #528]	; (800113c <HAL_GPIO_Init+0x294>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0xae>
          break;
 8000f2e:	e02c      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	623b      	str	r3, [r7, #32]
          break;
 8000f36:	e028      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e023      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	3308      	adds	r3, #8
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e01e      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	330c      	adds	r3, #12
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e019      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e012      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d105      	bne.n	8000f78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	611a      	str	r2, [r3, #16]
          break;
 8000f76:	e008      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	615a      	str	r2, [r3, #20]
          break;
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d801      	bhi.n	8000f94 <HAL_GPIO_Init+0xec>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	e001      	b.n	8000f98 <HAL_GPIO_Init+0xf0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3304      	adds	r3, #4
 8000f98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2bff      	cmp	r3, #255	; 0xff
 8000f9e:	d802      	bhi.n	8000fa6 <HAL_GPIO_Init+0xfe>
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x104>
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	6a39      	ldr	r1, [r7, #32]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 8096 	beq.w	8001106 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fda:	4b59      	ldr	r3, [pc, #356]	; (8001140 <HAL_GPIO_Init+0x298>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x298>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <HAL_GPIO_Init+0x298>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff2:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x29c>)
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4013      	ands	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x2a0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x19e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x19a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2a8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x196>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2ac>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x192>
 8001036:	2303      	movs	r3, #3
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x1a0>
 800103a:	2304      	movs	r3, #4
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x1a0>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x1a0>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x1a0>
 8001046:	2300      	movs	r3, #0
 8001048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001058:	493a      	ldr	r1, [pc, #232]	; (8001144 <HAL_GPIO_Init+0x29c>)
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4938      	ldr	r1, [pc, #224]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4933      	ldr	r1, [pc, #204]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	492e      	ldr	r1, [pc, #184]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4929      	ldr	r1, [pc, #164]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4924      	ldr	r1, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	491f      	ldr	r1, [pc, #124]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010da:	4013      	ands	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	491a      	ldr	r1, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4915      	ldr	r1, [pc, #84]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8001102:	4013      	ands	r3, r2
 8001104:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	3301      	adds	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f aed0 	bne.w	8000ebc <HAL_GPIO_Init+0x14>
  }
}
 800111c:	bf00      	nop
 800111e:	372c      	adds	r7, #44	; 0x2c
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	10210000 	.word	0x10210000
 800112c:	10110000 	.word	0x10110000
 8001130:	10120000 	.word	0x10120000
 8001134:	10310000 	.word	0x10310000
 8001138:	10320000 	.word	0x10320000
 800113c:	10220000 	.word	0x10220000
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40011000 	.word	0x40011000
 8001154:	40011400 	.word	0x40011400
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e26c      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8087 	beq.w	80012ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ac:	4b92      	ldr	r3, [pc, #584]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d00c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b8:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d112      	bne.n	80011ea <HAL_RCC_OscConfig+0x5e>
 80011c4:	4b8c      	ldr	r3, [pc, #560]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d10b      	bne.n	80011ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x12c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d168      	bne.n	80012b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e246      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x76>
 80011f4:	4b80      	ldr	r3, [pc, #512]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a7f      	ldr	r2, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e02e      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7a      	ldr	r2, [pc, #488]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b78      	ldr	r3, [pc, #480]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a77      	ldr	r2, [pc, #476]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0xbc>
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001248:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6a      	ldr	r2, [pc, #424]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b68      	ldr	r3, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a67      	ldr	r2, [pc, #412]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb18 	bl	800089c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fb14 	bl	800089c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1fa      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xe4>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb04 	bl	800089c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fb00 	bl	800089c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1e6      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x10c>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c6:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x18c>
 80012de:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1ba      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4939      	ldr	r1, [pc, #228]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e03a      	b.n	800138e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fab9 	bl	800089c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fab5 	bl	800089c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e19b      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4927      	ldr	r1, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fa98 	bl	800089c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fa94 	bl	800089c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e17a      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03a      	beq.n	8001410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d019      	beq.n	80013d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_RCC_OscConfig+0x274>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fa78 	bl	800089c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa74 	bl	800089c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e15a      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 fada 	bl	8001988 <RCC_Delay>
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_OscConfig+0x274>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fa5e 	bl	800089c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	e00f      	b.n	8001404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fa5a 	bl	800089c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d908      	bls.n	8001404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e140      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	42420000 	.word	0x42420000
 8001400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b9e      	ldr	r3, [pc, #632]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e9      	bne.n	80013e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a6 	beq.w	800156a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b97      	ldr	r3, [pc, #604]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10d      	bne.n	800144a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b94      	ldr	r3, [pc, #592]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a93      	ldr	r2, [pc, #588]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b91      	ldr	r3, [pc, #580]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b8e      	ldr	r3, [pc, #568]	; (8001684 <HAL_RCC_OscConfig+0x4f8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a8a      	ldr	r2, [pc, #552]	; (8001684 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fa1b 	bl	800089c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fa17 	bl	800089c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	; 0x64
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0fd      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <HAL_RCC_OscConfig+0x4f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x312>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	e02d      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a75      	ldr	r2, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	4b73      	ldr	r3, [pc, #460]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a72      	ldr	r2, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x356>
 80014c8:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a6c      	ldr	r2, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a69      	ldr	r2, [pc, #420]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 80014e2:	4b67      	ldr	r3, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a66      	ldr	r2, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	4b64      	ldr	r3, [pc, #400]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a63      	ldr	r2, [pc, #396]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff f9cb 	bl	800089c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f9c7 	bl	800089c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0ab      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x37e>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff f9b5 	bl	800089c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff f9b1 	bl	800089c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e095      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b48      	ldr	r3, [pc, #288]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a47      	ldr	r2, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8081 	beq.w	8001676 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	4b42      	ldr	r3, [pc, #264]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d061      	beq.n	8001644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d146      	bne.n	8001616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_OscConfig+0x4fc>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff f985 	bl	800089c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f981 	bl	800089c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e067      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d108      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	492d      	ldr	r1, [pc, #180]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a19      	ldr	r1, [r3, #32]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	430b      	orrs	r3, r1
 80015e2:	4927      	ldr	r1, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x4fc>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff f955 	bl	800089c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff f951 	bl	800089c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e037      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46a>
 8001614:	e02f      	b.n	8001676 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_RCC_OscConfig+0x4fc>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff f93e 	bl	800089c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f93a 	bl	800089c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e020      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x498>
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e013      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	429a      	cmp	r2, r3
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	42420060 	.word	0x42420060

0800168c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0d0      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4965      	ldr	r1, [pc, #404]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b8      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800170a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	494d      	ldr	r1, [pc, #308]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d040      	beq.n	80017ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e073      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff f88e 	bl	800089c <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f88a 	bl	800089c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e053      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 020c 	and.w	r2, r3, #12
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1eb      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d210      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0207 	bic.w	r2, r3, #7
 80017c2:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e032      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4916      	ldr	r1, [pc, #88]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f821 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 800181e:	4601      	mov	r1, r0
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	fa21 f303 	lsr.w	r3, r1, r3
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1cc>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe ffec 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	08003168 	.word	0x08003168
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001860:	b490      	push	{r4, r7}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001868:	1d3c      	adds	r4, r7, #4
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_RCC_GetSysClockFreq+0xb8>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b04      	cmp	r3, #4
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x40>
 800189a:	2b08      	cmp	r3, #8
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x46>
 800189e:	e02d      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018a2:	623b      	str	r3, [r7, #32]
      break;
 80018a4:	e02d      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018b2:	4413      	add	r3, r2
 80018b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0c5b      	lsrs	r3, r3, #17
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018d2:	4413      	add	r3, r2
 80018d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018de:	fb02 f203 	mul.w	r2, r2, r3
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	e004      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	623b      	str	r3, [r7, #32]
      break;
 80018fa:	e002      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018fe:	623b      	str	r3, [r7, #32]
      break;
 8001900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001902:	6a3b      	ldr	r3, [r7, #32]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bc90      	pop	{r4, r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	08003154 	.word	0x08003154
 8001914:	08003164 	.word	0x08003164
 8001918:	40021000 	.word	0x40021000
 800191c:	007a1200 	.word	0x007a1200
 8001920:	003d0900 	.word	0x003d0900

08001924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <HAL_RCC_GetHCLKFreq+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff2 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08003178 	.word	0x08003178

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffde 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001968:	4601      	mov	r1, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0adb      	lsrs	r3, r3, #11
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	08003178 	.word	0x08003178

08001988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <RCC_Delay+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <RCC_Delay+0x38>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a4:	bf00      	nop
  }
  while (Delay --);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <RCC_Delay+0x1c>
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e03f      	b.n	8001a56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fe64 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fa55 	bl	8001eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b08a      	sub	sp, #40	; 0x28
 8001a62:	af02      	add	r7, sp, #8
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d17c      	bne.n	8001b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_UART_Transmit+0x2c>
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e075      	b.n	8001b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_UART_Transmit+0x3e>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e06e      	b.n	8001b7a <HAL_UART_Transmit+0x11c>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2221      	movs	r2, #33	; 0x21
 8001aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ab2:	f7fe fef3 	bl	800089c <HAL_GetTick>
 8001ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001acc:	d108      	bne.n	8001ae0 <HAL_UART_Transmit+0x82>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d104      	bne.n	8001ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e003      	b.n	8001ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001af0:	e02a      	b.n	8001b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f95f 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e036      	b.n	8001b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3302      	adds	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	e007      	b.n	8001b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1cf      	bne.n	8001af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f92f 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e006      	b.n	8001b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d166      	bne.n	8001c6c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_UART_Receive_DMA+0x26>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e05f      	b.n	8001c6e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_UART_Receive_DMA+0x38>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e058      	b.n	8001c6e <HAL_UART_Receive_DMA+0xea>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2222      	movs	r2, #34	; 0x22
 8001bda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_UART_Receive_DMA+0xf4>)
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_UART_Receive_DMA+0xf8>)
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_UART_Receive_DMA+0xfc>)
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	f7fe ffb3 	bl	8000b80 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c66:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	08001ca9 	.word	0x08001ca9
 8001c7c:	08001d11 	.word	0x08001d11
 8001c80:	08001d2d 	.word	0x08001d2d

08001c84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11e      	bne.n	8001d02 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7fe fb14 	bl	8000330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ffb0 	bl	8001c84 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf14      	ite	ne
 8001d4c:	2301      	movne	r3, #1
 8001d4e:	2300      	moveq	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b21      	cmp	r3, #33	; 0x21
 8001d5e:	d108      	bne.n	8001d72 <UART_DMAError+0x46>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001d6c:	68b8      	ldr	r0, [r7, #8]
 8001d6e:	f000 f871 	bl	8001e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b22      	cmp	r3, #34	; 0x22
 8001d92:	d108      	bne.n	8001da6 <UART_DMAError+0x7a>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f000 f86c 	bl	8001e7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001db2:	68b8      	ldr	r0, [r7, #8]
 8001db4:	f7ff ff6f 	bl	8001c96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd0:	e02c      	b.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd8:	d028      	beq.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001de0:	f7fe fd5c 	bl	800089c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d21d      	bcs.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e00f      	b.n	8001e4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d0c3      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ef2:	f023 030c 	bic.w	r3, r3, #12
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <UART_SetConfig+0x114>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d103      	bne.n	8001f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f20:	f7ff fd1e 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	e002      	b.n	8001f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f28:	f7ff fd06 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009a      	lsls	r2, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	0119      	lsls	r1, r3, #4
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f66:	fba3 0302 	umull	r0, r3, r3, r2
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	3332      	adds	r3, #50	; 0x32
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	4419      	add	r1, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <UART_SetConfig+0x118>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	51eb851f 	.word	0x51eb851f

08001fd4 <atoi>:
 8001fd4:	220a      	movs	r2, #10
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f000 b944 	b.w	8002264 <strtol>

08001fdc <__errno>:
 8001fdc:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <__errno+0x8>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000000c 	.word	0x2000000c

08001fe8 <__libc_init_array>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	2500      	movs	r5, #0
 8001fec:	4e0c      	ldr	r6, [pc, #48]	; (8002020 <__libc_init_array+0x38>)
 8001fee:	4c0d      	ldr	r4, [pc, #52]	; (8002024 <__libc_init_array+0x3c>)
 8001ff0:	1ba4      	subs	r4, r4, r6
 8001ff2:	10a4      	asrs	r4, r4, #2
 8001ff4:	42a5      	cmp	r5, r4
 8001ff6:	d109      	bne.n	800200c <__libc_init_array+0x24>
 8001ff8:	f001 f842 	bl	8003080 <_init>
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	4e0a      	ldr	r6, [pc, #40]	; (8002028 <__libc_init_array+0x40>)
 8002000:	4c0a      	ldr	r4, [pc, #40]	; (800202c <__libc_init_array+0x44>)
 8002002:	1ba4      	subs	r4, r4, r6
 8002004:	10a4      	asrs	r4, r4, #2
 8002006:	42a5      	cmp	r5, r4
 8002008:	d105      	bne.n	8002016 <__libc_init_array+0x2e>
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002010:	4798      	blx	r3
 8002012:	3501      	adds	r5, #1
 8002014:	e7ee      	b.n	8001ff4 <__libc_init_array+0xc>
 8002016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201a:	4798      	blx	r3
 800201c:	3501      	adds	r5, #1
 800201e:	e7f2      	b.n	8002006 <__libc_init_array+0x1e>
 8002020:	08003324 	.word	0x08003324
 8002024:	08003324 	.word	0x08003324
 8002028:	08003324 	.word	0x08003324
 800202c:	08003328 	.word	0x08003328

08002030 <memset>:
 8002030:	4603      	mov	r3, r0
 8002032:	4402      	add	r2, r0
 8002034:	4293      	cmp	r3, r2
 8002036:	d100      	bne.n	800203a <memset+0xa>
 8002038:	4770      	bx	lr
 800203a:	f803 1b01 	strb.w	r1, [r3], #1
 800203e:	e7f9      	b.n	8002034 <memset+0x4>

08002040 <iprintf>:
 8002040:	b40f      	push	{r0, r1, r2, r3}
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <iprintf+0x2c>)
 8002044:	b513      	push	{r0, r1, r4, lr}
 8002046:	681c      	ldr	r4, [r3, #0]
 8002048:	b124      	cbz	r4, 8002054 <iprintf+0x14>
 800204a:	69a3      	ldr	r3, [r4, #24]
 800204c:	b913      	cbnz	r3, 8002054 <iprintf+0x14>
 800204e:	4620      	mov	r0, r4
 8002050:	f000 face 	bl	80025f0 <__sinit>
 8002054:	ab05      	add	r3, sp, #20
 8002056:	9a04      	ldr	r2, [sp, #16]
 8002058:	68a1      	ldr	r1, [r4, #8]
 800205a:	4620      	mov	r0, r4
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	f000 fc99 	bl	8002994 <_vfiprintf_r>
 8002062:	b002      	add	sp, #8
 8002064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002068:	b004      	add	sp, #16
 800206a:	4770      	bx	lr
 800206c:	2000000c 	.word	0x2000000c

08002070 <_puts_r>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	460e      	mov	r6, r1
 8002074:	4605      	mov	r5, r0
 8002076:	b118      	cbz	r0, 8002080 <_puts_r+0x10>
 8002078:	6983      	ldr	r3, [r0, #24]
 800207a:	b90b      	cbnz	r3, 8002080 <_puts_r+0x10>
 800207c:	f000 fab8 	bl	80025f0 <__sinit>
 8002080:	69ab      	ldr	r3, [r5, #24]
 8002082:	68ac      	ldr	r4, [r5, #8]
 8002084:	b913      	cbnz	r3, 800208c <_puts_r+0x1c>
 8002086:	4628      	mov	r0, r5
 8002088:	f000 fab2 	bl	80025f0 <__sinit>
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <_puts_r+0xac>)
 800208e:	429c      	cmp	r4, r3
 8002090:	d117      	bne.n	80020c2 <_puts_r+0x52>
 8002092:	686c      	ldr	r4, [r5, #4]
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	071b      	lsls	r3, r3, #28
 8002098:	d51d      	bpl.n	80020d6 <_puts_r+0x66>
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	b1db      	cbz	r3, 80020d6 <_puts_r+0x66>
 800209e:	3e01      	subs	r6, #1
 80020a0:	68a3      	ldr	r3, [r4, #8]
 80020a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60a3      	str	r3, [r4, #8]
 80020aa:	b9e9      	cbnz	r1, 80020e8 <_puts_r+0x78>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da2e      	bge.n	800210e <_puts_r+0x9e>
 80020b0:	4622      	mov	r2, r4
 80020b2:	210a      	movs	r1, #10
 80020b4:	4628      	mov	r0, r5
 80020b6:	f000 f8eb 	bl	8002290 <__swbuf_r>
 80020ba:	3001      	adds	r0, #1
 80020bc:	d011      	beq.n	80020e2 <_puts_r+0x72>
 80020be:	200a      	movs	r0, #10
 80020c0:	e011      	b.n	80020e6 <_puts_r+0x76>
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <_puts_r+0xb0>)
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d101      	bne.n	80020cc <_puts_r+0x5c>
 80020c8:	68ac      	ldr	r4, [r5, #8]
 80020ca:	e7e3      	b.n	8002094 <_puts_r+0x24>
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_puts_r+0xb4>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	bf08      	it	eq
 80020d2:	68ec      	ldreq	r4, [r5, #12]
 80020d4:	e7de      	b.n	8002094 <_puts_r+0x24>
 80020d6:	4621      	mov	r1, r4
 80020d8:	4628      	mov	r0, r5
 80020da:	f000 f92b 	bl	8002334 <__swsetup_r>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d0dd      	beq.n	800209e <_puts_r+0x2e>
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da04      	bge.n	80020f6 <_puts_r+0x86>
 80020ec:	69a2      	ldr	r2, [r4, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc06      	bgt.n	8002100 <_puts_r+0x90>
 80020f2:	290a      	cmp	r1, #10
 80020f4:	d004      	beq.n	8002100 <_puts_r+0x90>
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	6022      	str	r2, [r4, #0]
 80020fc:	7019      	strb	r1, [r3, #0]
 80020fe:	e7cf      	b.n	80020a0 <_puts_r+0x30>
 8002100:	4622      	mov	r2, r4
 8002102:	4628      	mov	r0, r5
 8002104:	f000 f8c4 	bl	8002290 <__swbuf_r>
 8002108:	3001      	adds	r0, #1
 800210a:	d1c9      	bne.n	80020a0 <_puts_r+0x30>
 800210c:	e7e9      	b.n	80020e2 <_puts_r+0x72>
 800210e:	200a      	movs	r0, #10
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	6022      	str	r2, [r4, #0]
 8002116:	7018      	strb	r0, [r3, #0]
 8002118:	e7e5      	b.n	80020e6 <_puts_r+0x76>
 800211a:	bf00      	nop
 800211c:	080031a4 	.word	0x080031a4
 8002120:	080031c4 	.word	0x080031c4
 8002124:	08003184 	.word	0x08003184

08002128 <puts>:
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <puts+0xc>)
 800212a:	4601      	mov	r1, r0
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f7ff bf9f 	b.w	8002070 <_puts_r>
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c

08002138 <strstr>:
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	7803      	ldrb	r3, [r0, #0]
 800213c:	b17b      	cbz	r3, 800215e <strstr+0x26>
 800213e:	4604      	mov	r4, r0
 8002140:	7823      	ldrb	r3, [r4, #0]
 8002142:	4620      	mov	r0, r4
 8002144:	1c66      	adds	r6, r4, #1
 8002146:	b17b      	cbz	r3, 8002168 <strstr+0x30>
 8002148:	1e4a      	subs	r2, r1, #1
 800214a:	1e63      	subs	r3, r4, #1
 800214c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002150:	b14d      	cbz	r5, 8002166 <strstr+0x2e>
 8002152:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002156:	4634      	mov	r4, r6
 8002158:	42af      	cmp	r7, r5
 800215a:	d0f7      	beq.n	800214c <strstr+0x14>
 800215c:	e7f0      	b.n	8002140 <strstr+0x8>
 800215e:	780b      	ldrb	r3, [r1, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf18      	it	ne
 8002164:	2000      	movne	r0, #0
 8002166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002168:	4618      	mov	r0, r3
 800216a:	e7fc      	b.n	8002166 <strstr+0x2e>

0800216c <_strtol_l.isra.0>:
 800216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002170:	4680      	mov	r8, r0
 8002172:	4689      	mov	r9, r1
 8002174:	4692      	mov	sl, r2
 8002176:	461e      	mov	r6, r3
 8002178:	460f      	mov	r7, r1
 800217a:	463d      	mov	r5, r7
 800217c:	9808      	ldr	r0, [sp, #32]
 800217e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002182:	f000 fabf 	bl	8002704 <__locale_ctype_ptr_l>
 8002186:	4420      	add	r0, r4
 8002188:	7843      	ldrb	r3, [r0, #1]
 800218a:	f013 0308 	ands.w	r3, r3, #8
 800218e:	d132      	bne.n	80021f6 <_strtol_l.isra.0+0x8a>
 8002190:	2c2d      	cmp	r4, #45	; 0x2d
 8002192:	d132      	bne.n	80021fa <_strtol_l.isra.0+0x8e>
 8002194:	2201      	movs	r2, #1
 8002196:	787c      	ldrb	r4, [r7, #1]
 8002198:	1cbd      	adds	r5, r7, #2
 800219a:	2e00      	cmp	r6, #0
 800219c:	d05d      	beq.n	800225a <_strtol_l.isra.0+0xee>
 800219e:	2e10      	cmp	r6, #16
 80021a0:	d109      	bne.n	80021b6 <_strtol_l.isra.0+0x4a>
 80021a2:	2c30      	cmp	r4, #48	; 0x30
 80021a4:	d107      	bne.n	80021b6 <_strtol_l.isra.0+0x4a>
 80021a6:	782b      	ldrb	r3, [r5, #0]
 80021a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80021ac:	2b58      	cmp	r3, #88	; 0x58
 80021ae:	d14f      	bne.n	8002250 <_strtol_l.isra.0+0xe4>
 80021b0:	2610      	movs	r6, #16
 80021b2:	786c      	ldrb	r4, [r5, #1]
 80021b4:	3502      	adds	r5, #2
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	bf14      	ite	ne
 80021ba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80021be:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80021c2:	2700      	movs	r7, #0
 80021c4:	fbb1 fcf6 	udiv	ip, r1, r6
 80021c8:	4638      	mov	r0, r7
 80021ca:	fb06 1e1c 	mls	lr, r6, ip, r1
 80021ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80021d2:	2b09      	cmp	r3, #9
 80021d4:	d817      	bhi.n	8002206 <_strtol_l.isra.0+0x9a>
 80021d6:	461c      	mov	r4, r3
 80021d8:	42a6      	cmp	r6, r4
 80021da:	dd23      	ble.n	8002224 <_strtol_l.isra.0+0xb8>
 80021dc:	1c7b      	adds	r3, r7, #1
 80021de:	d007      	beq.n	80021f0 <_strtol_l.isra.0+0x84>
 80021e0:	4584      	cmp	ip, r0
 80021e2:	d31c      	bcc.n	800221e <_strtol_l.isra.0+0xb2>
 80021e4:	d101      	bne.n	80021ea <_strtol_l.isra.0+0x7e>
 80021e6:	45a6      	cmp	lr, r4
 80021e8:	db19      	blt.n	800221e <_strtol_l.isra.0+0xb2>
 80021ea:	2701      	movs	r7, #1
 80021ec:	fb00 4006 	mla	r0, r0, r6, r4
 80021f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80021f4:	e7eb      	b.n	80021ce <_strtol_l.isra.0+0x62>
 80021f6:	462f      	mov	r7, r5
 80021f8:	e7bf      	b.n	800217a <_strtol_l.isra.0+0xe>
 80021fa:	2c2b      	cmp	r4, #43	; 0x2b
 80021fc:	bf04      	itt	eq
 80021fe:	1cbd      	addeq	r5, r7, #2
 8002200:	787c      	ldrbeq	r4, [r7, #1]
 8002202:	461a      	mov	r2, r3
 8002204:	e7c9      	b.n	800219a <_strtol_l.isra.0+0x2e>
 8002206:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800220a:	2b19      	cmp	r3, #25
 800220c:	d801      	bhi.n	8002212 <_strtol_l.isra.0+0xa6>
 800220e:	3c37      	subs	r4, #55	; 0x37
 8002210:	e7e2      	b.n	80021d8 <_strtol_l.isra.0+0x6c>
 8002212:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002216:	2b19      	cmp	r3, #25
 8002218:	d804      	bhi.n	8002224 <_strtol_l.isra.0+0xb8>
 800221a:	3c57      	subs	r4, #87	; 0x57
 800221c:	e7dc      	b.n	80021d8 <_strtol_l.isra.0+0x6c>
 800221e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002222:	e7e5      	b.n	80021f0 <_strtol_l.isra.0+0x84>
 8002224:	1c7b      	adds	r3, r7, #1
 8002226:	d108      	bne.n	800223a <_strtol_l.isra.0+0xce>
 8002228:	2322      	movs	r3, #34	; 0x22
 800222a:	4608      	mov	r0, r1
 800222c:	f8c8 3000 	str.w	r3, [r8]
 8002230:	f1ba 0f00 	cmp.w	sl, #0
 8002234:	d107      	bne.n	8002246 <_strtol_l.isra.0+0xda>
 8002236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223a:	b102      	cbz	r2, 800223e <_strtol_l.isra.0+0xd2>
 800223c:	4240      	negs	r0, r0
 800223e:	f1ba 0f00 	cmp.w	sl, #0
 8002242:	d0f8      	beq.n	8002236 <_strtol_l.isra.0+0xca>
 8002244:	b10f      	cbz	r7, 800224a <_strtol_l.isra.0+0xde>
 8002246:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800224a:	f8ca 9000 	str.w	r9, [sl]
 800224e:	e7f2      	b.n	8002236 <_strtol_l.isra.0+0xca>
 8002250:	2430      	movs	r4, #48	; 0x30
 8002252:	2e00      	cmp	r6, #0
 8002254:	d1af      	bne.n	80021b6 <_strtol_l.isra.0+0x4a>
 8002256:	2608      	movs	r6, #8
 8002258:	e7ad      	b.n	80021b6 <_strtol_l.isra.0+0x4a>
 800225a:	2c30      	cmp	r4, #48	; 0x30
 800225c:	d0a3      	beq.n	80021a6 <_strtol_l.isra.0+0x3a>
 800225e:	260a      	movs	r6, #10
 8002260:	e7a9      	b.n	80021b6 <_strtol_l.isra.0+0x4a>
	...

08002264 <strtol>:
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <strtol+0x24>)
 8002266:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002268:	681c      	ldr	r4, [r3, #0]
 800226a:	4d08      	ldr	r5, [pc, #32]	; (800228c <strtol+0x28>)
 800226c:	6a23      	ldr	r3, [r4, #32]
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf08      	it	eq
 8002272:	462b      	moveq	r3, r5
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	460a      	mov	r2, r1
 800227a:	4601      	mov	r1, r0
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ff75 	bl	800216c <_strtol_l.isra.0>
 8002282:	b003      	add	sp, #12
 8002284:	bd30      	pop	{r4, r5, pc}
 8002286:	bf00      	nop
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000070 	.word	0x20000070

08002290 <__swbuf_r>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	460e      	mov	r6, r1
 8002294:	4614      	mov	r4, r2
 8002296:	4605      	mov	r5, r0
 8002298:	b118      	cbz	r0, 80022a2 <__swbuf_r+0x12>
 800229a:	6983      	ldr	r3, [r0, #24]
 800229c:	b90b      	cbnz	r3, 80022a2 <__swbuf_r+0x12>
 800229e:	f000 f9a7 	bl	80025f0 <__sinit>
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <__swbuf_r+0x98>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d12a      	bne.n	80022fe <__swbuf_r+0x6e>
 80022a8:	686c      	ldr	r4, [r5, #4]
 80022aa:	69a3      	ldr	r3, [r4, #24]
 80022ac:	60a3      	str	r3, [r4, #8]
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	071a      	lsls	r2, r3, #28
 80022b2:	d52e      	bpl.n	8002312 <__swbuf_r+0x82>
 80022b4:	6923      	ldr	r3, [r4, #16]
 80022b6:	b363      	cbz	r3, 8002312 <__swbuf_r+0x82>
 80022b8:	6923      	ldr	r3, [r4, #16]
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	b2f6      	uxtb	r6, r6
 80022be:	1ac0      	subs	r0, r0, r3
 80022c0:	6963      	ldr	r3, [r4, #20]
 80022c2:	4637      	mov	r7, r6
 80022c4:	4283      	cmp	r3, r0
 80022c6:	dc04      	bgt.n	80022d2 <__swbuf_r+0x42>
 80022c8:	4621      	mov	r1, r4
 80022ca:	4628      	mov	r0, r5
 80022cc:	f000 f926 	bl	800251c <_fflush_r>
 80022d0:	bb28      	cbnz	r0, 800231e <__swbuf_r+0x8e>
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	3001      	adds	r0, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	60a3      	str	r3, [r4, #8]
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	6022      	str	r2, [r4, #0]
 80022e0:	701e      	strb	r6, [r3, #0]
 80022e2:	6963      	ldr	r3, [r4, #20]
 80022e4:	4283      	cmp	r3, r0
 80022e6:	d004      	beq.n	80022f2 <__swbuf_r+0x62>
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	07db      	lsls	r3, r3, #31
 80022ec:	d519      	bpl.n	8002322 <__swbuf_r+0x92>
 80022ee:	2e0a      	cmp	r6, #10
 80022f0:	d117      	bne.n	8002322 <__swbuf_r+0x92>
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 f911 	bl	800251c <_fflush_r>
 80022fa:	b190      	cbz	r0, 8002322 <__swbuf_r+0x92>
 80022fc:	e00f      	b.n	800231e <__swbuf_r+0x8e>
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <__swbuf_r+0x9c>)
 8002300:	429c      	cmp	r4, r3
 8002302:	d101      	bne.n	8002308 <__swbuf_r+0x78>
 8002304:	68ac      	ldr	r4, [r5, #8]
 8002306:	e7d0      	b.n	80022aa <__swbuf_r+0x1a>
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <__swbuf_r+0xa0>)
 800230a:	429c      	cmp	r4, r3
 800230c:	bf08      	it	eq
 800230e:	68ec      	ldreq	r4, [r5, #12]
 8002310:	e7cb      	b.n	80022aa <__swbuf_r+0x1a>
 8002312:	4621      	mov	r1, r4
 8002314:	4628      	mov	r0, r5
 8002316:	f000 f80d 	bl	8002334 <__swsetup_r>
 800231a:	2800      	cmp	r0, #0
 800231c:	d0cc      	beq.n	80022b8 <__swbuf_r+0x28>
 800231e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002322:	4638      	mov	r0, r7
 8002324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002326:	bf00      	nop
 8002328:	080031a4 	.word	0x080031a4
 800232c:	080031c4 	.word	0x080031c4
 8002330:	08003184 	.word	0x08003184

08002334 <__swsetup_r>:
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <__swsetup_r+0xcc>)
 8002336:	b570      	push	{r4, r5, r6, lr}
 8002338:	681d      	ldr	r5, [r3, #0]
 800233a:	4606      	mov	r6, r0
 800233c:	460c      	mov	r4, r1
 800233e:	b125      	cbz	r5, 800234a <__swsetup_r+0x16>
 8002340:	69ab      	ldr	r3, [r5, #24]
 8002342:	b913      	cbnz	r3, 800234a <__swsetup_r+0x16>
 8002344:	4628      	mov	r0, r5
 8002346:	f000 f953 	bl	80025f0 <__sinit>
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <__swsetup_r+0xd0>)
 800234c:	429c      	cmp	r4, r3
 800234e:	d10f      	bne.n	8002370 <__swsetup_r+0x3c>
 8002350:	686c      	ldr	r4, [r5, #4]
 8002352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002356:	b29a      	uxth	r2, r3
 8002358:	0715      	lsls	r5, r2, #28
 800235a:	d42c      	bmi.n	80023b6 <__swsetup_r+0x82>
 800235c:	06d0      	lsls	r0, r2, #27
 800235e:	d411      	bmi.n	8002384 <__swsetup_r+0x50>
 8002360:	2209      	movs	r2, #9
 8002362:	6032      	str	r2, [r6, #0]
 8002364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002368:	81a3      	strh	r3, [r4, #12]
 800236a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236e:	e03e      	b.n	80023ee <__swsetup_r+0xba>
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <__swsetup_r+0xd4>)
 8002372:	429c      	cmp	r4, r3
 8002374:	d101      	bne.n	800237a <__swsetup_r+0x46>
 8002376:	68ac      	ldr	r4, [r5, #8]
 8002378:	e7eb      	b.n	8002352 <__swsetup_r+0x1e>
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <__swsetup_r+0xd8>)
 800237c:	429c      	cmp	r4, r3
 800237e:	bf08      	it	eq
 8002380:	68ec      	ldreq	r4, [r5, #12]
 8002382:	e7e6      	b.n	8002352 <__swsetup_r+0x1e>
 8002384:	0751      	lsls	r1, r2, #29
 8002386:	d512      	bpl.n	80023ae <__swsetup_r+0x7a>
 8002388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800238a:	b141      	cbz	r1, 800239e <__swsetup_r+0x6a>
 800238c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002390:	4299      	cmp	r1, r3
 8002392:	d002      	beq.n	800239a <__swsetup_r+0x66>
 8002394:	4630      	mov	r0, r6
 8002396:	f000 fa2f 	bl	80027f8 <_free_r>
 800239a:	2300      	movs	r3, #0
 800239c:	6363      	str	r3, [r4, #52]	; 0x34
 800239e:	89a3      	ldrh	r3, [r4, #12]
 80023a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023a4:	81a3      	strh	r3, [r4, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	6063      	str	r3, [r4, #4]
 80023aa:	6923      	ldr	r3, [r4, #16]
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	b94b      	cbnz	r3, 80023ce <__swsetup_r+0x9a>
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c4:	d003      	beq.n	80023ce <__swsetup_r+0x9a>
 80023c6:	4621      	mov	r1, r4
 80023c8:	4630      	mov	r0, r6
 80023ca:	f000 f9c3 	bl	8002754 <__smakebuf_r>
 80023ce:	89a2      	ldrh	r2, [r4, #12]
 80023d0:	f012 0301 	ands.w	r3, r2, #1
 80023d4:	d00c      	beq.n	80023f0 <__swsetup_r+0xbc>
 80023d6:	2300      	movs	r3, #0
 80023d8:	60a3      	str	r3, [r4, #8]
 80023da:	6963      	ldr	r3, [r4, #20]
 80023dc:	425b      	negs	r3, r3
 80023de:	61a3      	str	r3, [r4, #24]
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	b953      	cbnz	r3, 80023fa <__swsetup_r+0xc6>
 80023e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80023ec:	d1ba      	bne.n	8002364 <__swsetup_r+0x30>
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
 80023f0:	0792      	lsls	r2, r2, #30
 80023f2:	bf58      	it	pl
 80023f4:	6963      	ldrpl	r3, [r4, #20]
 80023f6:	60a3      	str	r3, [r4, #8]
 80023f8:	e7f2      	b.n	80023e0 <__swsetup_r+0xac>
 80023fa:	2000      	movs	r0, #0
 80023fc:	e7f7      	b.n	80023ee <__swsetup_r+0xba>
 80023fe:	bf00      	nop
 8002400:	2000000c 	.word	0x2000000c
 8002404:	080031a4 	.word	0x080031a4
 8002408:	080031c4 	.word	0x080031c4
 800240c:	08003184 	.word	0x08003184

08002410 <__sflush_r>:
 8002410:	898a      	ldrh	r2, [r1, #12]
 8002412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002416:	4605      	mov	r5, r0
 8002418:	0710      	lsls	r0, r2, #28
 800241a:	460c      	mov	r4, r1
 800241c:	d458      	bmi.n	80024d0 <__sflush_r+0xc0>
 800241e:	684b      	ldr	r3, [r1, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	dc05      	bgt.n	8002430 <__sflush_r+0x20>
 8002424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	dc02      	bgt.n	8002430 <__sflush_r+0x20>
 800242a:	2000      	movs	r0, #0
 800242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002432:	2e00      	cmp	r6, #0
 8002434:	d0f9      	beq.n	800242a <__sflush_r+0x1a>
 8002436:	2300      	movs	r3, #0
 8002438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800243c:	682f      	ldr	r7, [r5, #0]
 800243e:	6a21      	ldr	r1, [r4, #32]
 8002440:	602b      	str	r3, [r5, #0]
 8002442:	d032      	beq.n	80024aa <__sflush_r+0x9a>
 8002444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	075a      	lsls	r2, r3, #29
 800244a:	d505      	bpl.n	8002458 <__sflush_r+0x48>
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	1ac0      	subs	r0, r0, r3
 8002450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002452:	b10b      	cbz	r3, 8002458 <__sflush_r+0x48>
 8002454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	2300      	movs	r3, #0
 800245a:	4602      	mov	r2, r0
 800245c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800245e:	6a21      	ldr	r1, [r4, #32]
 8002460:	4628      	mov	r0, r5
 8002462:	47b0      	blx	r6
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	89a3      	ldrh	r3, [r4, #12]
 8002468:	d106      	bne.n	8002478 <__sflush_r+0x68>
 800246a:	6829      	ldr	r1, [r5, #0]
 800246c:	291d      	cmp	r1, #29
 800246e:	d848      	bhi.n	8002502 <__sflush_r+0xf2>
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <__sflush_r+0x108>)
 8002472:	40ca      	lsrs	r2, r1
 8002474:	07d6      	lsls	r6, r2, #31
 8002476:	d544      	bpl.n	8002502 <__sflush_r+0xf2>
 8002478:	2200      	movs	r2, #0
 800247a:	6062      	str	r2, [r4, #4]
 800247c:	6922      	ldr	r2, [r4, #16]
 800247e:	04d9      	lsls	r1, r3, #19
 8002480:	6022      	str	r2, [r4, #0]
 8002482:	d504      	bpl.n	800248e <__sflush_r+0x7e>
 8002484:	1c42      	adds	r2, r0, #1
 8002486:	d101      	bne.n	800248c <__sflush_r+0x7c>
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	b903      	cbnz	r3, 800248e <__sflush_r+0x7e>
 800248c:	6560      	str	r0, [r4, #84]	; 0x54
 800248e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002490:	602f      	str	r7, [r5, #0]
 8002492:	2900      	cmp	r1, #0
 8002494:	d0c9      	beq.n	800242a <__sflush_r+0x1a>
 8002496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800249a:	4299      	cmp	r1, r3
 800249c:	d002      	beq.n	80024a4 <__sflush_r+0x94>
 800249e:	4628      	mov	r0, r5
 80024a0:	f000 f9aa 	bl	80027f8 <_free_r>
 80024a4:	2000      	movs	r0, #0
 80024a6:	6360      	str	r0, [r4, #52]	; 0x34
 80024a8:	e7c0      	b.n	800242c <__sflush_r+0x1c>
 80024aa:	2301      	movs	r3, #1
 80024ac:	4628      	mov	r0, r5
 80024ae:	47b0      	blx	r6
 80024b0:	1c41      	adds	r1, r0, #1
 80024b2:	d1c8      	bne.n	8002446 <__sflush_r+0x36>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0c5      	beq.n	8002446 <__sflush_r+0x36>
 80024ba:	2b1d      	cmp	r3, #29
 80024bc:	d001      	beq.n	80024c2 <__sflush_r+0xb2>
 80024be:	2b16      	cmp	r3, #22
 80024c0:	d101      	bne.n	80024c6 <__sflush_r+0xb6>
 80024c2:	602f      	str	r7, [r5, #0]
 80024c4:	e7b1      	b.n	800242a <__sflush_r+0x1a>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	81a3      	strh	r3, [r4, #12]
 80024ce:	e7ad      	b.n	800242c <__sflush_r+0x1c>
 80024d0:	690f      	ldr	r7, [r1, #16]
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	d0a9      	beq.n	800242a <__sflush_r+0x1a>
 80024d6:	0793      	lsls	r3, r2, #30
 80024d8:	bf18      	it	ne
 80024da:	2300      	movne	r3, #0
 80024dc:	680e      	ldr	r6, [r1, #0]
 80024de:	bf08      	it	eq
 80024e0:	694b      	ldreq	r3, [r1, #20]
 80024e2:	eba6 0807 	sub.w	r8, r6, r7
 80024e6:	600f      	str	r7, [r1, #0]
 80024e8:	608b      	str	r3, [r1, #8]
 80024ea:	f1b8 0f00 	cmp.w	r8, #0
 80024ee:	dd9c      	ble.n	800242a <__sflush_r+0x1a>
 80024f0:	4643      	mov	r3, r8
 80024f2:	463a      	mov	r2, r7
 80024f4:	6a21      	ldr	r1, [r4, #32]
 80024f6:	4628      	mov	r0, r5
 80024f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024fa:	47b0      	blx	r6
 80024fc:	2800      	cmp	r0, #0
 80024fe:	dc06      	bgt.n	800250e <__sflush_r+0xfe>
 8002500:	89a3      	ldrh	r3, [r4, #12]
 8002502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002506:	81a3      	strh	r3, [r4, #12]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250c:	e78e      	b.n	800242c <__sflush_r+0x1c>
 800250e:	4407      	add	r7, r0
 8002510:	eba8 0800 	sub.w	r8, r8, r0
 8002514:	e7e9      	b.n	80024ea <__sflush_r+0xda>
 8002516:	bf00      	nop
 8002518:	20400001 	.word	0x20400001

0800251c <_fflush_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	690b      	ldr	r3, [r1, #16]
 8002520:	4605      	mov	r5, r0
 8002522:	460c      	mov	r4, r1
 8002524:	b1db      	cbz	r3, 800255e <_fflush_r+0x42>
 8002526:	b118      	cbz	r0, 8002530 <_fflush_r+0x14>
 8002528:	6983      	ldr	r3, [r0, #24]
 800252a:	b90b      	cbnz	r3, 8002530 <_fflush_r+0x14>
 800252c:	f000 f860 	bl	80025f0 <__sinit>
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <_fflush_r+0x48>)
 8002532:	429c      	cmp	r4, r3
 8002534:	d109      	bne.n	800254a <_fflush_r+0x2e>
 8002536:	686c      	ldr	r4, [r5, #4]
 8002538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253c:	b17b      	cbz	r3, 800255e <_fflush_r+0x42>
 800253e:	4621      	mov	r1, r4
 8002540:	4628      	mov	r0, r5
 8002542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002546:	f7ff bf63 	b.w	8002410 <__sflush_r>
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_fflush_r+0x4c>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d101      	bne.n	8002554 <_fflush_r+0x38>
 8002550:	68ac      	ldr	r4, [r5, #8]
 8002552:	e7f1      	b.n	8002538 <_fflush_r+0x1c>
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <_fflush_r+0x50>)
 8002556:	429c      	cmp	r4, r3
 8002558:	bf08      	it	eq
 800255a:	68ec      	ldreq	r4, [r5, #12]
 800255c:	e7ec      	b.n	8002538 <_fflush_r+0x1c>
 800255e:	2000      	movs	r0, #0
 8002560:	bd38      	pop	{r3, r4, r5, pc}
 8002562:	bf00      	nop
 8002564:	080031a4 	.word	0x080031a4
 8002568:	080031c4 	.word	0x080031c4
 800256c:	08003184 	.word	0x08003184

08002570 <std>:
 8002570:	2300      	movs	r3, #0
 8002572:	b510      	push	{r4, lr}
 8002574:	4604      	mov	r4, r0
 8002576:	e9c0 3300 	strd	r3, r3, [r0]
 800257a:	6083      	str	r3, [r0, #8]
 800257c:	8181      	strh	r1, [r0, #12]
 800257e:	6643      	str	r3, [r0, #100]	; 0x64
 8002580:	81c2      	strh	r2, [r0, #14]
 8002582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002586:	6183      	str	r3, [r0, #24]
 8002588:	4619      	mov	r1, r3
 800258a:	2208      	movs	r2, #8
 800258c:	305c      	adds	r0, #92	; 0x5c
 800258e:	f7ff fd4f 	bl	8002030 <memset>
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <std+0x38>)
 8002594:	6224      	str	r4, [r4, #32]
 8002596:	6263      	str	r3, [r4, #36]	; 0x24
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <std+0x3c>)
 800259a:	62a3      	str	r3, [r4, #40]	; 0x28
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <std+0x40>)
 800259e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <std+0x44>)
 80025a2:	6323      	str	r3, [r4, #48]	; 0x30
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	bf00      	nop
 80025a8:	08002ef1 	.word	0x08002ef1
 80025ac:	08002f13 	.word	0x08002f13
 80025b0:	08002f4b 	.word	0x08002f4b
 80025b4:	08002f6f 	.word	0x08002f6f

080025b8 <_cleanup_r>:
 80025b8:	4901      	ldr	r1, [pc, #4]	; (80025c0 <_cleanup_r+0x8>)
 80025ba:	f000 b885 	b.w	80026c8 <_fwalk_reent>
 80025be:	bf00      	nop
 80025c0:	0800251d 	.word	0x0800251d

080025c4 <__sfmoreglue>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2568      	movs	r5, #104	; 0x68
 80025c8:	1e4a      	subs	r2, r1, #1
 80025ca:	4355      	muls	r5, r2
 80025cc:	460e      	mov	r6, r1
 80025ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025d2:	f000 f95d 	bl	8002890 <_malloc_r>
 80025d6:	4604      	mov	r4, r0
 80025d8:	b140      	cbz	r0, 80025ec <__sfmoreglue+0x28>
 80025da:	2100      	movs	r1, #0
 80025dc:	e9c0 1600 	strd	r1, r6, [r0]
 80025e0:	300c      	adds	r0, #12
 80025e2:	60a0      	str	r0, [r4, #8]
 80025e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025e8:	f7ff fd22 	bl	8002030 <memset>
 80025ec:	4620      	mov	r0, r4
 80025ee:	bd70      	pop	{r4, r5, r6, pc}

080025f0 <__sinit>:
 80025f0:	6983      	ldr	r3, [r0, #24]
 80025f2:	b510      	push	{r4, lr}
 80025f4:	4604      	mov	r4, r0
 80025f6:	bb33      	cbnz	r3, 8002646 <__sinit+0x56>
 80025f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80025fc:	6503      	str	r3, [r0, #80]	; 0x50
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <__sinit+0x58>)
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <__sinit+0x5c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6282      	str	r2, [r0, #40]	; 0x28
 8002606:	4298      	cmp	r0, r3
 8002608:	bf04      	itt	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	6183      	streq	r3, [r0, #24]
 800260e:	f000 f81f 	bl	8002650 <__sfp>
 8002612:	6060      	str	r0, [r4, #4]
 8002614:	4620      	mov	r0, r4
 8002616:	f000 f81b 	bl	8002650 <__sfp>
 800261a:	60a0      	str	r0, [r4, #8]
 800261c:	4620      	mov	r0, r4
 800261e:	f000 f817 	bl	8002650 <__sfp>
 8002622:	2200      	movs	r2, #0
 8002624:	60e0      	str	r0, [r4, #12]
 8002626:	2104      	movs	r1, #4
 8002628:	6860      	ldr	r0, [r4, #4]
 800262a:	f7ff ffa1 	bl	8002570 <std>
 800262e:	2201      	movs	r2, #1
 8002630:	2109      	movs	r1, #9
 8002632:	68a0      	ldr	r0, [r4, #8]
 8002634:	f7ff ff9c 	bl	8002570 <std>
 8002638:	2202      	movs	r2, #2
 800263a:	2112      	movs	r1, #18
 800263c:	68e0      	ldr	r0, [r4, #12]
 800263e:	f7ff ff97 	bl	8002570 <std>
 8002642:	2301      	movs	r3, #1
 8002644:	61a3      	str	r3, [r4, #24]
 8002646:	bd10      	pop	{r4, pc}
 8002648:	08003180 	.word	0x08003180
 800264c:	080025b9 	.word	0x080025b9

08002650 <__sfp>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <__sfp+0x70>)
 8002654:	4607      	mov	r7, r0
 8002656:	681e      	ldr	r6, [r3, #0]
 8002658:	69b3      	ldr	r3, [r6, #24]
 800265a:	b913      	cbnz	r3, 8002662 <__sfp+0x12>
 800265c:	4630      	mov	r0, r6
 800265e:	f7ff ffc7 	bl	80025f0 <__sinit>
 8002662:	3648      	adds	r6, #72	; 0x48
 8002664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002668:	3b01      	subs	r3, #1
 800266a:	d503      	bpl.n	8002674 <__sfp+0x24>
 800266c:	6833      	ldr	r3, [r6, #0]
 800266e:	b133      	cbz	r3, 800267e <__sfp+0x2e>
 8002670:	6836      	ldr	r6, [r6, #0]
 8002672:	e7f7      	b.n	8002664 <__sfp+0x14>
 8002674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002678:	b16d      	cbz	r5, 8002696 <__sfp+0x46>
 800267a:	3468      	adds	r4, #104	; 0x68
 800267c:	e7f4      	b.n	8002668 <__sfp+0x18>
 800267e:	2104      	movs	r1, #4
 8002680:	4638      	mov	r0, r7
 8002682:	f7ff ff9f 	bl	80025c4 <__sfmoreglue>
 8002686:	6030      	str	r0, [r6, #0]
 8002688:	2800      	cmp	r0, #0
 800268a:	d1f1      	bne.n	8002670 <__sfp+0x20>
 800268c:	230c      	movs	r3, #12
 800268e:	4604      	mov	r4, r0
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	4620      	mov	r0, r4
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <__sfp+0x74>)
 8002698:	6665      	str	r5, [r4, #100]	; 0x64
 800269a:	e9c4 5500 	strd	r5, r5, [r4]
 800269e:	60a5      	str	r5, [r4, #8]
 80026a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80026a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80026a8:	2208      	movs	r2, #8
 80026aa:	4629      	mov	r1, r5
 80026ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026b0:	f7ff fcbe 	bl	8002030 <memset>
 80026b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026bc:	e7e9      	b.n	8002692 <__sfp+0x42>
 80026be:	bf00      	nop
 80026c0:	08003180 	.word	0x08003180
 80026c4:	ffff0001 	.word	0xffff0001

080026c8 <_fwalk_reent>:
 80026c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026cc:	4680      	mov	r8, r0
 80026ce:	4689      	mov	r9, r1
 80026d0:	2600      	movs	r6, #0
 80026d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026d6:	b914      	cbnz	r4, 80026de <_fwalk_reent+0x16>
 80026d8:	4630      	mov	r0, r6
 80026da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80026e2:	3f01      	subs	r7, #1
 80026e4:	d501      	bpl.n	80026ea <_fwalk_reent+0x22>
 80026e6:	6824      	ldr	r4, [r4, #0]
 80026e8:	e7f5      	b.n	80026d6 <_fwalk_reent+0xe>
 80026ea:	89ab      	ldrh	r3, [r5, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d907      	bls.n	8002700 <_fwalk_reent+0x38>
 80026f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d003      	beq.n	8002700 <_fwalk_reent+0x38>
 80026f8:	4629      	mov	r1, r5
 80026fa:	4640      	mov	r0, r8
 80026fc:	47c8      	blx	r9
 80026fe:	4306      	orrs	r6, r0
 8002700:	3568      	adds	r5, #104	; 0x68
 8002702:	e7ee      	b.n	80026e2 <_fwalk_reent+0x1a>

08002704 <__locale_ctype_ptr_l>:
 8002704:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002708:	4770      	bx	lr

0800270a <__swhatbuf_r>:
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	460e      	mov	r6, r1
 800270e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002712:	b096      	sub	sp, #88	; 0x58
 8002714:	2900      	cmp	r1, #0
 8002716:	4614      	mov	r4, r2
 8002718:	461d      	mov	r5, r3
 800271a:	da07      	bge.n	800272c <__swhatbuf_r+0x22>
 800271c:	2300      	movs	r3, #0
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	89b3      	ldrh	r3, [r6, #12]
 8002722:	061a      	lsls	r2, r3, #24
 8002724:	d410      	bmi.n	8002748 <__swhatbuf_r+0x3e>
 8002726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272a:	e00e      	b.n	800274a <__swhatbuf_r+0x40>
 800272c:	466a      	mov	r2, sp
 800272e:	f000 fc51 	bl	8002fd4 <_fstat_r>
 8002732:	2800      	cmp	r0, #0
 8002734:	dbf2      	blt.n	800271c <__swhatbuf_r+0x12>
 8002736:	9a01      	ldr	r2, [sp, #4]
 8002738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800273c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002740:	425a      	negs	r2, r3
 8002742:	415a      	adcs	r2, r3
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	e7ee      	b.n	8002726 <__swhatbuf_r+0x1c>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	2000      	movs	r0, #0
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	b016      	add	sp, #88	; 0x58
 8002750:	bd70      	pop	{r4, r5, r6, pc}
	...

08002754 <__smakebuf_r>:
 8002754:	898b      	ldrh	r3, [r1, #12]
 8002756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002758:	079d      	lsls	r5, r3, #30
 800275a:	4606      	mov	r6, r0
 800275c:	460c      	mov	r4, r1
 800275e:	d507      	bpl.n	8002770 <__smakebuf_r+0x1c>
 8002760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	6123      	str	r3, [r4, #16]
 8002768:	2301      	movs	r3, #1
 800276a:	6163      	str	r3, [r4, #20]
 800276c:	b002      	add	sp, #8
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	ab01      	add	r3, sp, #4
 8002772:	466a      	mov	r2, sp
 8002774:	f7ff ffc9 	bl	800270a <__swhatbuf_r>
 8002778:	9900      	ldr	r1, [sp, #0]
 800277a:	4605      	mov	r5, r0
 800277c:	4630      	mov	r0, r6
 800277e:	f000 f887 	bl	8002890 <_malloc_r>
 8002782:	b948      	cbnz	r0, 8002798 <__smakebuf_r+0x44>
 8002784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002788:	059a      	lsls	r2, r3, #22
 800278a:	d4ef      	bmi.n	800276c <__smakebuf_r+0x18>
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	81a3      	strh	r3, [r4, #12]
 8002796:	e7e3      	b.n	8002760 <__smakebuf_r+0xc>
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <__smakebuf_r+0x7c>)
 800279a:	62b3      	str	r3, [r6, #40]	; 0x28
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	6020      	str	r0, [r4, #0]
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	81a3      	strh	r3, [r4, #12]
 80027a6:	9b00      	ldr	r3, [sp, #0]
 80027a8:	6120      	str	r0, [r4, #16]
 80027aa:	6163      	str	r3, [r4, #20]
 80027ac:	9b01      	ldr	r3, [sp, #4]
 80027ae:	b15b      	cbz	r3, 80027c8 <__smakebuf_r+0x74>
 80027b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027b4:	4630      	mov	r0, r6
 80027b6:	f000 fc1f 	bl	8002ff8 <_isatty_r>
 80027ba:	b128      	cbz	r0, 80027c8 <__smakebuf_r+0x74>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	431d      	orrs	r5, r3
 80027cc:	81a5      	strh	r5, [r4, #12]
 80027ce:	e7cd      	b.n	800276c <__smakebuf_r+0x18>
 80027d0:	080025b9 	.word	0x080025b9

080027d4 <__ascii_mbtowc>:
 80027d4:	b082      	sub	sp, #8
 80027d6:	b901      	cbnz	r1, 80027da <__ascii_mbtowc+0x6>
 80027d8:	a901      	add	r1, sp, #4
 80027da:	b142      	cbz	r2, 80027ee <__ascii_mbtowc+0x1a>
 80027dc:	b14b      	cbz	r3, 80027f2 <__ascii_mbtowc+0x1e>
 80027de:	7813      	ldrb	r3, [r2, #0]
 80027e0:	600b      	str	r3, [r1, #0]
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	1c10      	adds	r0, r2, #0
 80027e6:	bf18      	it	ne
 80027e8:	2001      	movne	r0, #1
 80027ea:	b002      	add	sp, #8
 80027ec:	4770      	bx	lr
 80027ee:	4610      	mov	r0, r2
 80027f0:	e7fb      	b.n	80027ea <__ascii_mbtowc+0x16>
 80027f2:	f06f 0001 	mvn.w	r0, #1
 80027f6:	e7f8      	b.n	80027ea <__ascii_mbtowc+0x16>

080027f8 <_free_r>:
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4605      	mov	r5, r0
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d043      	beq.n	8002888 <_free_r+0x90>
 8002800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002804:	1f0c      	subs	r4, r1, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bfb8      	it	lt
 800280a:	18e4      	addlt	r4, r4, r3
 800280c:	f000 fc24 	bl	8003058 <__malloc_lock>
 8002810:	4a1e      	ldr	r2, [pc, #120]	; (800288c <_free_r+0x94>)
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	4610      	mov	r0, r2
 8002816:	b933      	cbnz	r3, 8002826 <_free_r+0x2e>
 8002818:	6063      	str	r3, [r4, #4]
 800281a:	6014      	str	r4, [r2, #0]
 800281c:	4628      	mov	r0, r5
 800281e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002822:	f000 bc1a 	b.w	800305a <__malloc_unlock>
 8002826:	42a3      	cmp	r3, r4
 8002828:	d90b      	bls.n	8002842 <_free_r+0x4a>
 800282a:	6821      	ldr	r1, [r4, #0]
 800282c:	1862      	adds	r2, r4, r1
 800282e:	4293      	cmp	r3, r2
 8002830:	bf01      	itttt	eq
 8002832:	681a      	ldreq	r2, [r3, #0]
 8002834:	685b      	ldreq	r3, [r3, #4]
 8002836:	1852      	addeq	r2, r2, r1
 8002838:	6022      	streq	r2, [r4, #0]
 800283a:	6063      	str	r3, [r4, #4]
 800283c:	6004      	str	r4, [r0, #0]
 800283e:	e7ed      	b.n	800281c <_free_r+0x24>
 8002840:	4613      	mov	r3, r2
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	b10a      	cbz	r2, 800284a <_free_r+0x52>
 8002846:	42a2      	cmp	r2, r4
 8002848:	d9fa      	bls.n	8002840 <_free_r+0x48>
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	1858      	adds	r0, r3, r1
 800284e:	42a0      	cmp	r0, r4
 8002850:	d10b      	bne.n	800286a <_free_r+0x72>
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	4401      	add	r1, r0
 8002856:	1858      	adds	r0, r3, r1
 8002858:	4282      	cmp	r2, r0
 800285a:	6019      	str	r1, [r3, #0]
 800285c:	d1de      	bne.n	800281c <_free_r+0x24>
 800285e:	6810      	ldr	r0, [r2, #0]
 8002860:	6852      	ldr	r2, [r2, #4]
 8002862:	4401      	add	r1, r0
 8002864:	6019      	str	r1, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	e7d8      	b.n	800281c <_free_r+0x24>
 800286a:	d902      	bls.n	8002872 <_free_r+0x7a>
 800286c:	230c      	movs	r3, #12
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	e7d4      	b.n	800281c <_free_r+0x24>
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	1821      	adds	r1, r4, r0
 8002876:	428a      	cmp	r2, r1
 8002878:	bf01      	itttt	eq
 800287a:	6811      	ldreq	r1, [r2, #0]
 800287c:	6852      	ldreq	r2, [r2, #4]
 800287e:	1809      	addeq	r1, r1, r0
 8002880:	6021      	streq	r1, [r4, #0]
 8002882:	6062      	str	r2, [r4, #4]
 8002884:	605c      	str	r4, [r3, #4]
 8002886:	e7c9      	b.n	800281c <_free_r+0x24>
 8002888:	bd38      	pop	{r3, r4, r5, pc}
 800288a:	bf00      	nop
 800288c:	20000200 	.word	0x20000200

08002890 <_malloc_r>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	1ccd      	adds	r5, r1, #3
 8002894:	f025 0503 	bic.w	r5, r5, #3
 8002898:	3508      	adds	r5, #8
 800289a:	2d0c      	cmp	r5, #12
 800289c:	bf38      	it	cc
 800289e:	250c      	movcc	r5, #12
 80028a0:	2d00      	cmp	r5, #0
 80028a2:	4606      	mov	r6, r0
 80028a4:	db01      	blt.n	80028aa <_malloc_r+0x1a>
 80028a6:	42a9      	cmp	r1, r5
 80028a8:	d903      	bls.n	80028b2 <_malloc_r+0x22>
 80028aa:	230c      	movs	r3, #12
 80028ac:	6033      	str	r3, [r6, #0]
 80028ae:	2000      	movs	r0, #0
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	f000 fbd1 	bl	8003058 <__malloc_lock>
 80028b6:	4a21      	ldr	r2, [pc, #132]	; (800293c <_malloc_r+0xac>)
 80028b8:	6814      	ldr	r4, [r2, #0]
 80028ba:	4621      	mov	r1, r4
 80028bc:	b991      	cbnz	r1, 80028e4 <_malloc_r+0x54>
 80028be:	4c20      	ldr	r4, [pc, #128]	; (8002940 <_malloc_r+0xb0>)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	b91b      	cbnz	r3, 80028cc <_malloc_r+0x3c>
 80028c4:	4630      	mov	r0, r6
 80028c6:	f000 fb03 	bl	8002ed0 <_sbrk_r>
 80028ca:	6020      	str	r0, [r4, #0]
 80028cc:	4629      	mov	r1, r5
 80028ce:	4630      	mov	r0, r6
 80028d0:	f000 fafe 	bl	8002ed0 <_sbrk_r>
 80028d4:	1c43      	adds	r3, r0, #1
 80028d6:	d124      	bne.n	8002922 <_malloc_r+0x92>
 80028d8:	230c      	movs	r3, #12
 80028da:	4630      	mov	r0, r6
 80028dc:	6033      	str	r3, [r6, #0]
 80028de:	f000 fbbc 	bl	800305a <__malloc_unlock>
 80028e2:	e7e4      	b.n	80028ae <_malloc_r+0x1e>
 80028e4:	680b      	ldr	r3, [r1, #0]
 80028e6:	1b5b      	subs	r3, r3, r5
 80028e8:	d418      	bmi.n	800291c <_malloc_r+0x8c>
 80028ea:	2b0b      	cmp	r3, #11
 80028ec:	d90f      	bls.n	800290e <_malloc_r+0x7e>
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	18cc      	adds	r4, r1, r3
 80028f2:	50cd      	str	r5, [r1, r3]
 80028f4:	4630      	mov	r0, r6
 80028f6:	f000 fbb0 	bl	800305a <__malloc_unlock>
 80028fa:	f104 000b 	add.w	r0, r4, #11
 80028fe:	1d23      	adds	r3, r4, #4
 8002900:	f020 0007 	bic.w	r0, r0, #7
 8002904:	1ac3      	subs	r3, r0, r3
 8002906:	d0d3      	beq.n	80028b0 <_malloc_r+0x20>
 8002908:	425a      	negs	r2, r3
 800290a:	50e2      	str	r2, [r4, r3]
 800290c:	e7d0      	b.n	80028b0 <_malloc_r+0x20>
 800290e:	684b      	ldr	r3, [r1, #4]
 8002910:	428c      	cmp	r4, r1
 8002912:	bf16      	itet	ne
 8002914:	6063      	strne	r3, [r4, #4]
 8002916:	6013      	streq	r3, [r2, #0]
 8002918:	460c      	movne	r4, r1
 800291a:	e7eb      	b.n	80028f4 <_malloc_r+0x64>
 800291c:	460c      	mov	r4, r1
 800291e:	6849      	ldr	r1, [r1, #4]
 8002920:	e7cc      	b.n	80028bc <_malloc_r+0x2c>
 8002922:	1cc4      	adds	r4, r0, #3
 8002924:	f024 0403 	bic.w	r4, r4, #3
 8002928:	42a0      	cmp	r0, r4
 800292a:	d005      	beq.n	8002938 <_malloc_r+0xa8>
 800292c:	1a21      	subs	r1, r4, r0
 800292e:	4630      	mov	r0, r6
 8002930:	f000 face 	bl	8002ed0 <_sbrk_r>
 8002934:	3001      	adds	r0, #1
 8002936:	d0cf      	beq.n	80028d8 <_malloc_r+0x48>
 8002938:	6025      	str	r5, [r4, #0]
 800293a:	e7db      	b.n	80028f4 <_malloc_r+0x64>
 800293c:	20000200 	.word	0x20000200
 8002940:	20000204 	.word	0x20000204

08002944 <__sfputc_r>:
 8002944:	6893      	ldr	r3, [r2, #8]
 8002946:	b410      	push	{r4}
 8002948:	3b01      	subs	r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	6093      	str	r3, [r2, #8]
 800294e:	da07      	bge.n	8002960 <__sfputc_r+0x1c>
 8002950:	6994      	ldr	r4, [r2, #24]
 8002952:	42a3      	cmp	r3, r4
 8002954:	db01      	blt.n	800295a <__sfputc_r+0x16>
 8002956:	290a      	cmp	r1, #10
 8002958:	d102      	bne.n	8002960 <__sfputc_r+0x1c>
 800295a:	bc10      	pop	{r4}
 800295c:	f7ff bc98 	b.w	8002290 <__swbuf_r>
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	1c58      	adds	r0, r3, #1
 8002964:	6010      	str	r0, [r2, #0]
 8002966:	7019      	strb	r1, [r3, #0]
 8002968:	4608      	mov	r0, r1
 800296a:	bc10      	pop	{r4}
 800296c:	4770      	bx	lr

0800296e <__sfputs_r>:
 800296e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002970:	4606      	mov	r6, r0
 8002972:	460f      	mov	r7, r1
 8002974:	4614      	mov	r4, r2
 8002976:	18d5      	adds	r5, r2, r3
 8002978:	42ac      	cmp	r4, r5
 800297a:	d101      	bne.n	8002980 <__sfputs_r+0x12>
 800297c:	2000      	movs	r0, #0
 800297e:	e007      	b.n	8002990 <__sfputs_r+0x22>
 8002980:	463a      	mov	r2, r7
 8002982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002986:	4630      	mov	r0, r6
 8002988:	f7ff ffdc 	bl	8002944 <__sfputc_r>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d1f3      	bne.n	8002978 <__sfputs_r+0xa>
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002994 <_vfiprintf_r>:
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	460c      	mov	r4, r1
 800299a:	b09d      	sub	sp, #116	; 0x74
 800299c:	4617      	mov	r7, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4606      	mov	r6, r0
 80029a2:	b118      	cbz	r0, 80029ac <_vfiprintf_r+0x18>
 80029a4:	6983      	ldr	r3, [r0, #24]
 80029a6:	b90b      	cbnz	r3, 80029ac <_vfiprintf_r+0x18>
 80029a8:	f7ff fe22 	bl	80025f0 <__sinit>
 80029ac:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <_vfiprintf_r+0x20c>)
 80029ae:	429c      	cmp	r4, r3
 80029b0:	d158      	bne.n	8002a64 <_vfiprintf_r+0xd0>
 80029b2:	6874      	ldr	r4, [r6, #4]
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	0718      	lsls	r0, r3, #28
 80029b8:	d55e      	bpl.n	8002a78 <_vfiprintf_r+0xe4>
 80029ba:	6923      	ldr	r3, [r4, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <_vfiprintf_r+0xe4>
 80029c0:	2300      	movs	r3, #0
 80029c2:	9309      	str	r3, [sp, #36]	; 0x24
 80029c4:	2320      	movs	r3, #32
 80029c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ca:	2330      	movs	r3, #48	; 0x30
 80029cc:	f04f 0b01 	mov.w	fp, #1
 80029d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029d4:	9503      	str	r5, [sp, #12]
 80029d6:	46b8      	mov	r8, r7
 80029d8:	4645      	mov	r5, r8
 80029da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029de:	b10b      	cbz	r3, 80029e4 <_vfiprintf_r+0x50>
 80029e0:	2b25      	cmp	r3, #37	; 0x25
 80029e2:	d154      	bne.n	8002a8e <_vfiprintf_r+0xfa>
 80029e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80029e8:	d00b      	beq.n	8002a02 <_vfiprintf_r+0x6e>
 80029ea:	4653      	mov	r3, sl
 80029ec:	463a      	mov	r2, r7
 80029ee:	4621      	mov	r1, r4
 80029f0:	4630      	mov	r0, r6
 80029f2:	f7ff ffbc 	bl	800296e <__sfputs_r>
 80029f6:	3001      	adds	r0, #1
 80029f8:	f000 80c2 	beq.w	8002b80 <_vfiprintf_r+0x1ec>
 80029fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029fe:	4453      	add	r3, sl
 8002a00:	9309      	str	r3, [sp, #36]	; 0x24
 8002a02:	f898 3000 	ldrb.w	r3, [r8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80ba 	beq.w	8002b80 <_vfiprintf_r+0x1ec>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a16:	9304      	str	r3, [sp, #16]
 8002a18:	9307      	str	r3, [sp, #28]
 8002a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8002a20:	46a8      	mov	r8, r5
 8002a22:	2205      	movs	r2, #5
 8002a24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002a28:	485e      	ldr	r0, [pc, #376]	; (8002ba4 <_vfiprintf_r+0x210>)
 8002a2a:	f000 fb07 	bl	800303c <memchr>
 8002a2e:	9b04      	ldr	r3, [sp, #16]
 8002a30:	bb78      	cbnz	r0, 8002a92 <_vfiprintf_r+0xfe>
 8002a32:	06d9      	lsls	r1, r3, #27
 8002a34:	bf44      	itt	mi
 8002a36:	2220      	movmi	r2, #32
 8002a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a3c:	071a      	lsls	r2, r3, #28
 8002a3e:	bf44      	itt	mi
 8002a40:	222b      	movmi	r2, #43	; 0x2b
 8002a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a46:	782a      	ldrb	r2, [r5, #0]
 8002a48:	2a2a      	cmp	r2, #42	; 0x2a
 8002a4a:	d02a      	beq.n	8002aa2 <_vfiprintf_r+0x10e>
 8002a4c:	46a8      	mov	r8, r5
 8002a4e:	2000      	movs	r0, #0
 8002a50:	250a      	movs	r5, #10
 8002a52:	9a07      	ldr	r2, [sp, #28]
 8002a54:	4641      	mov	r1, r8
 8002a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a5a:	3b30      	subs	r3, #48	; 0x30
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d969      	bls.n	8002b34 <_vfiprintf_r+0x1a0>
 8002a60:	b360      	cbz	r0, 8002abc <_vfiprintf_r+0x128>
 8002a62:	e024      	b.n	8002aae <_vfiprintf_r+0x11a>
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <_vfiprintf_r+0x214>)
 8002a66:	429c      	cmp	r4, r3
 8002a68:	d101      	bne.n	8002a6e <_vfiprintf_r+0xda>
 8002a6a:	68b4      	ldr	r4, [r6, #8]
 8002a6c:	e7a2      	b.n	80029b4 <_vfiprintf_r+0x20>
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <_vfiprintf_r+0x218>)
 8002a70:	429c      	cmp	r4, r3
 8002a72:	bf08      	it	eq
 8002a74:	68f4      	ldreq	r4, [r6, #12]
 8002a76:	e79d      	b.n	80029b4 <_vfiprintf_r+0x20>
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f7ff fc5a 	bl	8002334 <__swsetup_r>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d09d      	beq.n	80029c0 <_vfiprintf_r+0x2c>
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a88:	b01d      	add	sp, #116	; 0x74
 8002a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8e:	46a8      	mov	r8, r5
 8002a90:	e7a2      	b.n	80029d8 <_vfiprintf_r+0x44>
 8002a92:	4a44      	ldr	r2, [pc, #272]	; (8002ba4 <_vfiprintf_r+0x210>)
 8002a94:	4645      	mov	r5, r8
 8002a96:	1a80      	subs	r0, r0, r2
 8002a98:	fa0b f000 	lsl.w	r0, fp, r0
 8002a9c:	4318      	orrs	r0, r3
 8002a9e:	9004      	str	r0, [sp, #16]
 8002aa0:	e7be      	b.n	8002a20 <_vfiprintf_r+0x8c>
 8002aa2:	9a03      	ldr	r2, [sp, #12]
 8002aa4:	1d11      	adds	r1, r2, #4
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	9103      	str	r1, [sp, #12]
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	db01      	blt.n	8002ab2 <_vfiprintf_r+0x11e>
 8002aae:	9207      	str	r2, [sp, #28]
 8002ab0:	e004      	b.n	8002abc <_vfiprintf_r+0x128>
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	9207      	str	r2, [sp, #28]
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	f898 3000 	ldrb.w	r3, [r8]
 8002ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac2:	d10e      	bne.n	8002ae2 <_vfiprintf_r+0x14e>
 8002ac4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8002aca:	d138      	bne.n	8002b3e <_vfiprintf_r+0x1aa>
 8002acc:	9b03      	ldr	r3, [sp, #12]
 8002ace:	f108 0802 	add.w	r8, r8, #2
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	9203      	str	r2, [sp, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bfb8      	it	lt
 8002adc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ae0:	9305      	str	r3, [sp, #20]
 8002ae2:	4d33      	ldr	r5, [pc, #204]	; (8002bb0 <_vfiprintf_r+0x21c>)
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	f898 1000 	ldrb.w	r1, [r8]
 8002aea:	4628      	mov	r0, r5
 8002aec:	f000 faa6 	bl	800303c <memchr>
 8002af0:	b140      	cbz	r0, 8002b04 <_vfiprintf_r+0x170>
 8002af2:	2340      	movs	r3, #64	; 0x40
 8002af4:	1b40      	subs	r0, r0, r5
 8002af6:	fa03 f000 	lsl.w	r0, r3, r0
 8002afa:	9b04      	ldr	r3, [sp, #16]
 8002afc:	f108 0801 	add.w	r8, r8, #1
 8002b00:	4303      	orrs	r3, r0
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	f898 1000 	ldrb.w	r1, [r8]
 8002b08:	2206      	movs	r2, #6
 8002b0a:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <_vfiprintf_r+0x220>)
 8002b0c:	f108 0701 	add.w	r7, r8, #1
 8002b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b14:	f000 fa92 	bl	800303c <memchr>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d037      	beq.n	8002b8c <_vfiprintf_r+0x1f8>
 8002b1c:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <_vfiprintf_r+0x224>)
 8002b1e:	bb1b      	cbnz	r3, 8002b68 <_vfiprintf_r+0x1d4>
 8002b20:	9b03      	ldr	r3, [sp, #12]
 8002b22:	3307      	adds	r3, #7
 8002b24:	f023 0307 	bic.w	r3, r3, #7
 8002b28:	3308      	adds	r3, #8
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b2e:	444b      	add	r3, r9
 8002b30:	9309      	str	r3, [sp, #36]	; 0x24
 8002b32:	e750      	b.n	80029d6 <_vfiprintf_r+0x42>
 8002b34:	fb05 3202 	mla	r2, r5, r2, r3
 8002b38:	2001      	movs	r0, #1
 8002b3a:	4688      	mov	r8, r1
 8002b3c:	e78a      	b.n	8002a54 <_vfiprintf_r+0xc0>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	250a      	movs	r5, #10
 8002b42:	4619      	mov	r1, r3
 8002b44:	f108 0801 	add.w	r8, r8, #1
 8002b48:	9305      	str	r3, [sp, #20]
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b50:	3a30      	subs	r2, #48	; 0x30
 8002b52:	2a09      	cmp	r2, #9
 8002b54:	d903      	bls.n	8002b5e <_vfiprintf_r+0x1ca>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0c3      	beq.n	8002ae2 <_vfiprintf_r+0x14e>
 8002b5a:	9105      	str	r1, [sp, #20]
 8002b5c:	e7c1      	b.n	8002ae2 <_vfiprintf_r+0x14e>
 8002b5e:	fb05 2101 	mla	r1, r5, r1, r2
 8002b62:	2301      	movs	r3, #1
 8002b64:	4680      	mov	r8, r0
 8002b66:	e7f0      	b.n	8002b4a <_vfiprintf_r+0x1b6>
 8002b68:	ab03      	add	r3, sp, #12
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4622      	mov	r2, r4
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_vfiprintf_r+0x228>)
 8002b70:	a904      	add	r1, sp, #16
 8002b72:	4630      	mov	r0, r6
 8002b74:	f3af 8000 	nop.w
 8002b78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002b7c:	4681      	mov	r9, r0
 8002b7e:	d1d5      	bne.n	8002b2c <_vfiprintf_r+0x198>
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	065b      	lsls	r3, r3, #25
 8002b84:	f53f af7e 	bmi.w	8002a84 <_vfiprintf_r+0xf0>
 8002b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b8a:	e77d      	b.n	8002a88 <_vfiprintf_r+0xf4>
 8002b8c:	ab03      	add	r3, sp, #12
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4622      	mov	r2, r4
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <_vfiprintf_r+0x228>)
 8002b94:	a904      	add	r1, sp, #16
 8002b96:	4630      	mov	r0, r6
 8002b98:	f000 f888 	bl	8002cac <_printf_i>
 8002b9c:	e7ec      	b.n	8002b78 <_vfiprintf_r+0x1e4>
 8002b9e:	bf00      	nop
 8002ba0:	080031a4 	.word	0x080031a4
 8002ba4:	080031ee 	.word	0x080031ee
 8002ba8:	080031c4 	.word	0x080031c4
 8002bac:	08003184 	.word	0x08003184
 8002bb0:	080031f4 	.word	0x080031f4
 8002bb4:	080031f8 	.word	0x080031f8
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	0800296f 	.word	0x0800296f

08002bc0 <_printf_common>:
 8002bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc4:	4691      	mov	r9, r2
 8002bc6:	461f      	mov	r7, r3
 8002bc8:	688a      	ldr	r2, [r1, #8]
 8002bca:	690b      	ldr	r3, [r1, #16]
 8002bcc:	4606      	mov	r6, r0
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	bfb8      	it	lt
 8002bd2:	4613      	movlt	r3, r2
 8002bd4:	f8c9 3000 	str.w	r3, [r9]
 8002bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bdc:	460c      	mov	r4, r1
 8002bde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002be2:	b112      	cbz	r2, 8002bea <_printf_common+0x2a>
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c9 3000 	str.w	r3, [r9]
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	0699      	lsls	r1, r3, #26
 8002bee:	bf42      	ittt	mi
 8002bf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002bf4:	3302      	addmi	r3, #2
 8002bf6:	f8c9 3000 	strmi.w	r3, [r9]
 8002bfa:	6825      	ldr	r5, [r4, #0]
 8002bfc:	f015 0506 	ands.w	r5, r5, #6
 8002c00:	d107      	bne.n	8002c12 <_printf_common+0x52>
 8002c02:	f104 0a19 	add.w	sl, r4, #25
 8002c06:	68e3      	ldr	r3, [r4, #12]
 8002c08:	f8d9 2000 	ldr.w	r2, [r9]
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	42ab      	cmp	r3, r5
 8002c10:	dc29      	bgt.n	8002c66 <_printf_common+0xa6>
 8002c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	3300      	adds	r3, #0
 8002c1a:	bf18      	it	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	0692      	lsls	r2, r2, #26
 8002c20:	d42e      	bmi.n	8002c80 <_printf_common+0xc0>
 8002c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c26:	4639      	mov	r1, r7
 8002c28:	4630      	mov	r0, r6
 8002c2a:	47c0      	blx	r8
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d021      	beq.n	8002c74 <_printf_common+0xb4>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	68e5      	ldr	r5, [r4, #12]
 8002c34:	f003 0306 	and.w	r3, r3, #6
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	bf18      	it	ne
 8002c3c:	2500      	movne	r5, #0
 8002c3e:	f8d9 2000 	ldr.w	r2, [r9]
 8002c42:	f04f 0900 	mov.w	r9, #0
 8002c46:	bf08      	it	eq
 8002c48:	1aad      	subeq	r5, r5, r2
 8002c4a:	68a3      	ldr	r3, [r4, #8]
 8002c4c:	6922      	ldr	r2, [r4, #16]
 8002c4e:	bf08      	it	eq
 8002c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bfc4      	itt	gt
 8002c58:	1a9b      	subgt	r3, r3, r2
 8002c5a:	18ed      	addgt	r5, r5, r3
 8002c5c:	341a      	adds	r4, #26
 8002c5e:	454d      	cmp	r5, r9
 8002c60:	d11a      	bne.n	8002c98 <_printf_common+0xd8>
 8002c62:	2000      	movs	r0, #0
 8002c64:	e008      	b.n	8002c78 <_printf_common+0xb8>
 8002c66:	2301      	movs	r3, #1
 8002c68:	4652      	mov	r2, sl
 8002c6a:	4639      	mov	r1, r7
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	47c0      	blx	r8
 8002c70:	3001      	adds	r0, #1
 8002c72:	d103      	bne.n	8002c7c <_printf_common+0xbc>
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	e7c2      	b.n	8002c06 <_printf_common+0x46>
 8002c80:	2030      	movs	r0, #48	; 0x30
 8002c82:	18e1      	adds	r1, r4, r3
 8002c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c8e:	4422      	add	r2, r4
 8002c90:	3302      	adds	r3, #2
 8002c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c96:	e7c4      	b.n	8002c22 <_printf_common+0x62>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4639      	mov	r1, r7
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	47c0      	blx	r8
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d0e6      	beq.n	8002c74 <_printf_common+0xb4>
 8002ca6:	f109 0901 	add.w	r9, r9, #1
 8002caa:	e7d8      	b.n	8002c5e <_printf_common+0x9e>

08002cac <_printf_i>:
 8002cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	7e09      	ldrb	r1, [r1, #24]
 8002cb8:	b085      	sub	sp, #20
 8002cba:	296e      	cmp	r1, #110	; 0x6e
 8002cbc:	4617      	mov	r7, r2
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	4698      	mov	r8, r3
 8002cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cc4:	f000 80b3 	beq.w	8002e2e <_printf_i+0x182>
 8002cc8:	d822      	bhi.n	8002d10 <_printf_i+0x64>
 8002cca:	2963      	cmp	r1, #99	; 0x63
 8002ccc:	d036      	beq.n	8002d3c <_printf_i+0x90>
 8002cce:	d80a      	bhi.n	8002ce6 <_printf_i+0x3a>
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	f000 80b9 	beq.w	8002e48 <_printf_i+0x19c>
 8002cd6:	2958      	cmp	r1, #88	; 0x58
 8002cd8:	f000 8083 	beq.w	8002de2 <_printf_i+0x136>
 8002cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ce4:	e032      	b.n	8002d4c <_printf_i+0xa0>
 8002ce6:	2964      	cmp	r1, #100	; 0x64
 8002ce8:	d001      	beq.n	8002cee <_printf_i+0x42>
 8002cea:	2969      	cmp	r1, #105	; 0x69
 8002cec:	d1f6      	bne.n	8002cdc <_printf_i+0x30>
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	0605      	lsls	r5, r0, #24
 8002cf4:	f103 0104 	add.w	r1, r3, #4
 8002cf8:	d52a      	bpl.n	8002d50 <_printf_i+0xa4>
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6011      	str	r1, [r2, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da03      	bge.n	8002d0a <_printf_i+0x5e>
 8002d02:	222d      	movs	r2, #45	; 0x2d
 8002d04:	425b      	negs	r3, r3
 8002d06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d0a:	486f      	ldr	r0, [pc, #444]	; (8002ec8 <_printf_i+0x21c>)
 8002d0c:	220a      	movs	r2, #10
 8002d0e:	e039      	b.n	8002d84 <_printf_i+0xd8>
 8002d10:	2973      	cmp	r1, #115	; 0x73
 8002d12:	f000 809d 	beq.w	8002e50 <_printf_i+0x1a4>
 8002d16:	d808      	bhi.n	8002d2a <_printf_i+0x7e>
 8002d18:	296f      	cmp	r1, #111	; 0x6f
 8002d1a:	d020      	beq.n	8002d5e <_printf_i+0xb2>
 8002d1c:	2970      	cmp	r1, #112	; 0x70
 8002d1e:	d1dd      	bne.n	8002cdc <_printf_i+0x30>
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	e003      	b.n	8002d32 <_printf_i+0x86>
 8002d2a:	2975      	cmp	r1, #117	; 0x75
 8002d2c:	d017      	beq.n	8002d5e <_printf_i+0xb2>
 8002d2e:	2978      	cmp	r1, #120	; 0x78
 8002d30:	d1d4      	bne.n	8002cdc <_printf_i+0x30>
 8002d32:	2378      	movs	r3, #120	; 0x78
 8002d34:	4865      	ldr	r0, [pc, #404]	; (8002ecc <_printf_i+0x220>)
 8002d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d3a:	e055      	b.n	8002de8 <_printf_i+0x13c>
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d42:	1d19      	adds	r1, r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6011      	str	r1, [r2, #0]
 8002d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e08c      	b.n	8002e6a <_printf_i+0x1be>
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d56:	6011      	str	r1, [r2, #0]
 8002d58:	bf18      	it	ne
 8002d5a:	b21b      	sxthne	r3, r3
 8002d5c:	e7cf      	b.n	8002cfe <_printf_i+0x52>
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	6825      	ldr	r5, [r4, #0]
 8002d62:	1d18      	adds	r0, r3, #4
 8002d64:	6010      	str	r0, [r2, #0]
 8002d66:	0628      	lsls	r0, r5, #24
 8002d68:	d501      	bpl.n	8002d6e <_printf_i+0xc2>
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	e002      	b.n	8002d74 <_printf_i+0xc8>
 8002d6e:	0668      	lsls	r0, r5, #25
 8002d70:	d5fb      	bpl.n	8002d6a <_printf_i+0xbe>
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	296f      	cmp	r1, #111	; 0x6f
 8002d76:	bf14      	ite	ne
 8002d78:	220a      	movne	r2, #10
 8002d7a:	2208      	moveq	r2, #8
 8002d7c:	4852      	ldr	r0, [pc, #328]	; (8002ec8 <_printf_i+0x21c>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d84:	6865      	ldr	r5, [r4, #4]
 8002d86:	2d00      	cmp	r5, #0
 8002d88:	60a5      	str	r5, [r4, #8]
 8002d8a:	f2c0 8095 	blt.w	8002eb8 <_printf_i+0x20c>
 8002d8e:	6821      	ldr	r1, [r4, #0]
 8002d90:	f021 0104 	bic.w	r1, r1, #4
 8002d94:	6021      	str	r1, [r4, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <_printf_i+0x16a>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	f040 808e 	bne.w	8002ebc <_printf_i+0x210>
 8002da0:	4665      	mov	r5, ip
 8002da2:	2a08      	cmp	r2, #8
 8002da4:	d10b      	bne.n	8002dbe <_printf_i+0x112>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	07db      	lsls	r3, r3, #31
 8002daa:	d508      	bpl.n	8002dbe <_printf_i+0x112>
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	6862      	ldr	r2, [r4, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	bfde      	ittt	le
 8002db4:	2330      	movle	r3, #48	; 0x30
 8002db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dbe:	ebac 0305 	sub.w	r3, ip, r5
 8002dc2:	6123      	str	r3, [r4, #16]
 8002dc4:	f8cd 8000 	str.w	r8, [sp]
 8002dc8:	463b      	mov	r3, r7
 8002dca:	aa03      	add	r2, sp, #12
 8002dcc:	4621      	mov	r1, r4
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f7ff fef6 	bl	8002bc0 <_printf_common>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d14d      	bne.n	8002e74 <_printf_i+0x1c8>
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	b005      	add	sp, #20
 8002dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002de2:	4839      	ldr	r0, [pc, #228]	; (8002ec8 <_printf_i+0x21c>)
 8002de4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002de8:	6813      	ldr	r3, [r2, #0]
 8002dea:	6821      	ldr	r1, [r4, #0]
 8002dec:	1d1d      	adds	r5, r3, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6015      	str	r5, [r2, #0]
 8002df2:	060a      	lsls	r2, r1, #24
 8002df4:	d50b      	bpl.n	8002e0e <_printf_i+0x162>
 8002df6:	07ca      	lsls	r2, r1, #31
 8002df8:	bf44      	itt	mi
 8002dfa:	f041 0120 	orrmi.w	r1, r1, #32
 8002dfe:	6021      	strmi	r1, [r4, #0]
 8002e00:	b91b      	cbnz	r3, 8002e0a <_printf_i+0x15e>
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	f022 0220 	bic.w	r2, r2, #32
 8002e08:	6022      	str	r2, [r4, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	e7b7      	b.n	8002d7e <_printf_i+0xd2>
 8002e0e:	064d      	lsls	r5, r1, #25
 8002e10:	bf48      	it	mi
 8002e12:	b29b      	uxthmi	r3, r3
 8002e14:	e7ef      	b.n	8002df6 <_printf_i+0x14a>
 8002e16:	4665      	mov	r5, ip
 8002e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e1c:	fb02 3311 	mls	r3, r2, r1, r3
 8002e20:	5cc3      	ldrb	r3, [r0, r3]
 8002e22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e26:	460b      	mov	r3, r1
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d1f5      	bne.n	8002e18 <_printf_i+0x16c>
 8002e2c:	e7b9      	b.n	8002da2 <_printf_i+0xf6>
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	6825      	ldr	r5, [r4, #0]
 8002e32:	1d18      	adds	r0, r3, #4
 8002e34:	6961      	ldr	r1, [r4, #20]
 8002e36:	6010      	str	r0, [r2, #0]
 8002e38:	0628      	lsls	r0, r5, #24
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	d501      	bpl.n	8002e42 <_printf_i+0x196>
 8002e3e:	6019      	str	r1, [r3, #0]
 8002e40:	e002      	b.n	8002e48 <_printf_i+0x19c>
 8002e42:	066a      	lsls	r2, r5, #25
 8002e44:	d5fb      	bpl.n	8002e3e <_printf_i+0x192>
 8002e46:	8019      	strh	r1, [r3, #0]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	4665      	mov	r5, ip
 8002e4c:	6123      	str	r3, [r4, #16]
 8002e4e:	e7b9      	b.n	8002dc4 <_printf_i+0x118>
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	1d19      	adds	r1, r3, #4
 8002e54:	6011      	str	r1, [r2, #0]
 8002e56:	681d      	ldr	r5, [r3, #0]
 8002e58:	6862      	ldr	r2, [r4, #4]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f000 f8ed 	bl	800303c <memchr>
 8002e62:	b108      	cbz	r0, 8002e68 <_printf_i+0x1bc>
 8002e64:	1b40      	subs	r0, r0, r5
 8002e66:	6060      	str	r0, [r4, #4]
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	6123      	str	r3, [r4, #16]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e72:	e7a7      	b.n	8002dc4 <_printf_i+0x118>
 8002e74:	6923      	ldr	r3, [r4, #16]
 8002e76:	462a      	mov	r2, r5
 8002e78:	4639      	mov	r1, r7
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	47c0      	blx	r8
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d0aa      	beq.n	8002dd8 <_printf_i+0x12c>
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	079b      	lsls	r3, r3, #30
 8002e86:	d413      	bmi.n	8002eb0 <_printf_i+0x204>
 8002e88:	68e0      	ldr	r0, [r4, #12]
 8002e8a:	9b03      	ldr	r3, [sp, #12]
 8002e8c:	4298      	cmp	r0, r3
 8002e8e:	bfb8      	it	lt
 8002e90:	4618      	movlt	r0, r3
 8002e92:	e7a3      	b.n	8002ddc <_printf_i+0x130>
 8002e94:	2301      	movs	r3, #1
 8002e96:	464a      	mov	r2, r9
 8002e98:	4639      	mov	r1, r7
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	47c0      	blx	r8
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	d09a      	beq.n	8002dd8 <_printf_i+0x12c>
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	68e3      	ldr	r3, [r4, #12]
 8002ea6:	9a03      	ldr	r2, [sp, #12]
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	42ab      	cmp	r3, r5
 8002eac:	dcf2      	bgt.n	8002e94 <_printf_i+0x1e8>
 8002eae:	e7eb      	b.n	8002e88 <_printf_i+0x1dc>
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	f104 0919 	add.w	r9, r4, #25
 8002eb6:	e7f5      	b.n	8002ea4 <_printf_i+0x1f8>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ac      	bne.n	8002e16 <_printf_i+0x16a>
 8002ebc:	7803      	ldrb	r3, [r0, #0]
 8002ebe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ec6:	e76c      	b.n	8002da2 <_printf_i+0xf6>
 8002ec8:	080031ff 	.word	0x080031ff
 8002ecc:	08003210 	.word	0x08003210

08002ed0 <_sbrk_r>:
 8002ed0:	b538      	push	{r3, r4, r5, lr}
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	4c05      	ldr	r4, [pc, #20]	; (8002eec <_sbrk_r+0x1c>)
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	4608      	mov	r0, r1
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	f7fd fb90 	bl	8000600 <_sbrk>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d102      	bne.n	8002eea <_sbrk_r+0x1a>
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	b103      	cbz	r3, 8002eea <_sbrk_r+0x1a>
 8002ee8:	602b      	str	r3, [r5, #0]
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	2000029c 	.word	0x2000029c

08002ef0 <__sread>:
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef8:	f000 f8b0 	bl	800305c <_read_r>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	bfab      	itete	ge
 8002f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f02:	89a3      	ldrhlt	r3, [r4, #12]
 8002f04:	181b      	addge	r3, r3, r0
 8002f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f0a:	bfac      	ite	ge
 8002f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f0e:	81a3      	strhlt	r3, [r4, #12]
 8002f10:	bd10      	pop	{r4, pc}

08002f12 <__swrite>:
 8002f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f16:	461f      	mov	r7, r3
 8002f18:	898b      	ldrh	r3, [r1, #12]
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	460c      	mov	r4, r1
 8002f20:	4616      	mov	r6, r2
 8002f22:	d505      	bpl.n	8002f30 <__swrite+0x1e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	2200      	movs	r2, #0
 8002f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2c:	f000 f874 	bl	8003018 <_lseek_r>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	4632      	mov	r2, r6
 8002f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f3e:	463b      	mov	r3, r7
 8002f40:	4628      	mov	r0, r5
 8002f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f46:	f000 b823 	b.w	8002f90 <_write_r>

08002f4a <__sseek>:
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f52:	f000 f861 	bl	8003018 <_lseek_r>
 8002f56:	1c43      	adds	r3, r0, #1
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	bf15      	itete	ne
 8002f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f66:	81a3      	strheq	r3, [r4, #12]
 8002f68:	bf18      	it	ne
 8002f6a:	81a3      	strhne	r3, [r4, #12]
 8002f6c:	bd10      	pop	{r4, pc}

08002f6e <__sclose>:
 8002f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f72:	f000 b81f 	b.w	8002fb4 <_close_r>

08002f76 <__ascii_wctomb>:
 8002f76:	b149      	cbz	r1, 8002f8c <__ascii_wctomb+0x16>
 8002f78:	2aff      	cmp	r2, #255	; 0xff
 8002f7a:	bf8b      	itete	hi
 8002f7c:	238a      	movhi	r3, #138	; 0x8a
 8002f7e:	700a      	strbls	r2, [r1, #0]
 8002f80:	6003      	strhi	r3, [r0, #0]
 8002f82:	2001      	movls	r0, #1
 8002f84:	bf88      	it	hi
 8002f86:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8002f8a:	4770      	bx	lr
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4770      	bx	lr

08002f90 <_write_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4605      	mov	r5, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4c05      	ldr	r4, [pc, #20]	; (8002fb0 <_write_r+0x20>)
 8002f9c:	6022      	str	r2, [r4, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7fd fae1 	bl	8000566 <_write>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_write_r+0x1e>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_write_r+0x1e>
 8002fac:	602b      	str	r3, [r5, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	2000029c 	.word	0x2000029c

08002fb4 <_close_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4c05      	ldr	r4, [pc, #20]	; (8002fd0 <_close_r+0x1c>)
 8002fba:	4605      	mov	r5, r0
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	f7fd faed 	bl	800059e <_close>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_close_r+0x1a>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_close_r+0x1a>
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	2000029c 	.word	0x2000029c

08002fd4 <_fstat_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4c06      	ldr	r4, [pc, #24]	; (8002ff4 <_fstat_r+0x20>)
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	f7fd fae7 	bl	80005b4 <_fstat>
 8002fe6:	1c43      	adds	r3, r0, #1
 8002fe8:	d102      	bne.n	8002ff0 <_fstat_r+0x1c>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	b103      	cbz	r3, 8002ff0 <_fstat_r+0x1c>
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000029c 	.word	0x2000029c

08002ff8 <_isatty_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4c05      	ldr	r4, [pc, #20]	; (8003014 <_isatty_r+0x1c>)
 8002ffe:	4605      	mov	r5, r0
 8003000:	4608      	mov	r0, r1
 8003002:	6023      	str	r3, [r4, #0]
 8003004:	f7fd fae5 	bl	80005d2 <_isatty>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_isatty_r+0x1a>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	b103      	cbz	r3, 8003012 <_isatty_r+0x1a>
 8003010:	602b      	str	r3, [r5, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	2000029c 	.word	0x2000029c

08003018 <_lseek_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4605      	mov	r5, r0
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	2200      	movs	r2, #0
 8003022:	4c05      	ldr	r4, [pc, #20]	; (8003038 <_lseek_r+0x20>)
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f7fd fadd 	bl	80005e6 <_lseek>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d102      	bne.n	8003036 <_lseek_r+0x1e>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	b103      	cbz	r3, 8003036 <_lseek_r+0x1e>
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	2000029c 	.word	0x2000029c

0800303c <memchr>:
 800303c:	b510      	push	{r4, lr}
 800303e:	b2c9      	uxtb	r1, r1
 8003040:	4402      	add	r2, r0
 8003042:	4290      	cmp	r0, r2
 8003044:	4603      	mov	r3, r0
 8003046:	d101      	bne.n	800304c <memchr+0x10>
 8003048:	2300      	movs	r3, #0
 800304a:	e003      	b.n	8003054 <memchr+0x18>
 800304c:	781c      	ldrb	r4, [r3, #0]
 800304e:	3001      	adds	r0, #1
 8003050:	428c      	cmp	r4, r1
 8003052:	d1f6      	bne.n	8003042 <memchr+0x6>
 8003054:	4618      	mov	r0, r3
 8003056:	bd10      	pop	{r4, pc}

08003058 <__malloc_lock>:
 8003058:	4770      	bx	lr

0800305a <__malloc_unlock>:
 800305a:	4770      	bx	lr

0800305c <_read_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4605      	mov	r5, r0
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	2200      	movs	r2, #0
 8003066:	4c05      	ldr	r4, [pc, #20]	; (800307c <_read_r+0x20>)
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7fd fa5e 	bl	800052c <_read>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_read_r+0x1e>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	b103      	cbz	r3, 800307a <_read_r+0x1e>
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	2000029c 	.word	0x2000029c

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
